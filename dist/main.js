/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is not neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/phina.js/build/phina.esm.js":
/*!**************************************************!*
  !*** ./node_modules/phina.js/build/phina.esm.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Accelerometer\": () => /* binding */ Accelerometer,\n/* harmony export */   \"Accessory\": () => /* binding */ Accessory,\n/* harmony export */   \"Ajax\": () => /* binding */ Ajax,\n/* harmony export */   \"Asset\": () => /* binding */ Asset,\n/* harmony export */   \"AssetLoader\": () => /* binding */ AssetLoader,\n/* harmony export */   \"AssetManager\": () => /* binding */ AssetManager,\n/* harmony export */   \"BaseApp\": () => /* binding */ BaseApp,\n/* harmony export */   \"Button\": () => /* binding */ Button,\n/* harmony export */   \"Canvas\": () => /* binding */ Canvas,\n/* harmony export */   \"CanvasApp\": () => /* binding */ CanvasApp,\n/* harmony export */   \"CanvasLayer\": () => /* binding */ CanvasLayer,\n/* harmony export */   \"CanvasRenderer\": () => /* binding */ CanvasRenderer,\n/* harmony export */   \"ChangeDispatcher\": () => /* binding */ ChangeDispatcher,\n/* harmony export */   \"Circle\": () => /* binding */ Circle,\n/* harmony export */   \"CircleGauge\": () => /* binding */ CircleGauge,\n/* harmony export */   \"CircleShape\": () => /* binding */ CircleShape,\n/* harmony export */   \"Collision\": () => /* binding */ Collision,\n/* harmony export */   \"Color\": () => /* binding */ Color,\n/* harmony export */   \"CountScene\": () => /* binding */ CountScene,\n/* harmony export */   \"DisplayElement\": () => /* binding */ DisplayElement,\n/* harmony export */   \"DisplayScene\": () => /* binding */ DisplayScene,\n/* harmony export */   \"DomApp\": () => /* binding */ DomApp,\n/* harmony export */   \"Draggable\": () => /* binding */ Draggable,\n/* harmony export */   \"Element\": () => /* binding */ Element,\n/* harmony export */   \"EventDispatcher\": () => /* binding */ EventDispatcher,\n/* harmony export */   \"File\": () => /* binding */ File,\n/* harmony export */   \"Flickable\": () => /* binding */ Flickable,\n/* harmony export */   \"Flow\": () => /* binding */ Flow,\n/* harmony export */   \"Font\": () => /* binding */ Font,\n/* harmony export */   \"FrameAnimation\": () => /* binding */ FrameAnimation,\n/* harmony export */   \"GameApp\": () => /* binding */ GameApp,\n/* harmony export */   \"GamepadManager\": () => /* binding */ GamepadManager,\n/* harmony export */   \"Gauge\": () => /* binding */ Gauge,\n/* harmony export */   \"Grid\": () => /* binding */ Grid,\n/* harmony export */   \"HeartShape\": () => /* binding */ HeartShape,\n/* harmony export */   \"Input\": () => /* binding */ Input,\n/* harmony export */   \"Interactive\": () => /* binding */ Interactive,\n/* harmony export */   \"Keyboard\": () => /* binding */ Keyboard,\n/* harmony export */   \"Label\": () => /* binding */ Label,\n/* harmony export */   \"LabelArea\": () => /* binding */ LabelArea,\n/* harmony export */   \"Layer\": () => /* binding */ Layer,\n/* harmony export */   \"LoadingScene\": () => /* binding */ LoadingScene,\n/* harmony export */   \"ManagerScene\": () => /* binding */ ManagerScene,\n/* harmony export */   \"Matrix33\": () => /* binding */ Matrix33,\n/* harmony export */   \"Mouse\": () => /* binding */ Mouse,\n/* harmony export */   \"Object2D\": () => /* binding */ Object2D,\n/* harmony export */   \"PathShape\": () => /* binding */ PathShape,\n/* harmony export */   \"PauseScene\": () => /* binding */ PauseScene,\n/* harmony export */   \"Physical\": () => /* binding */ Physical,\n/* harmony export */   \"PlainElement\": () => /* binding */ PlainElement,\n/* harmony export */   \"PolygonShape\": () => /* binding */ PolygonShape,\n/* harmony export */   \"QueryString\": () => /* binding */ QueryString,\n/* harmony export */   \"Random\": () => /* binding */ Random,\n/* harmony export */   \"Rect\": () => /* binding */ Rect,\n/* harmony export */   \"RectangleShape\": () => /* binding */ RectangleShape,\n/* harmony export */   \"ResultScene\": () => /* binding */ ResultScene,\n/* harmony export */   \"Scene\": () => /* binding */ Scene,\n/* harmony export */   \"Script\": () => /* binding */ Script,\n/* harmony export */   \"Shape\": () => /* binding */ Shape,\n/* harmony export */   \"SoundManager\": () => /* binding */ SoundManager,\n/* harmony export */   \"SplashScene\": () => /* binding */ SplashScene,\n/* harmony export */   \"Sprite\": () => /* binding */ Sprite,\n/* harmony export */   \"SpriteSheet\": () => /* binding */ SpriteSheet,\n/* harmony export */   \"StarShape\": () => /* binding */ StarShape,\n/* harmony export */   \"Support\": () => /* binding */ Support,\n/* harmony export */   \"Texture\": () => /* binding */ Texture,\n/* harmony export */   \"ThreeLayer\": () => /* binding */ ThreeLayer,\n/* harmony export */   \"Ticker\": () => /* binding */ Ticker,\n/* harmony export */   \"TitleScene\": () => /* binding */ TitleScene,\n/* harmony export */   \"Touch\": () => /* binding */ Touch,\n/* harmony export */   \"TouchList\": () => /* binding */ TouchList,\n/* harmony export */   \"TriangleShape\": () => /* binding */ TriangleShape,\n/* harmony export */   \"Tween\": () => /* binding */ Tween,\n/* harmony export */   \"Tweener\": () => /* binding */ Tweener,\n/* harmony export */   \"Twitter\": () => /* binding */ Twitter,\n/* harmony export */   \"Updater\": () => /* binding */ Updater,\n/* harmony export */   \"Vector2\": () => /* binding */ Vector2,\n/* harmony export */   \"Vector3\": () => /* binding */ Vector3,\n/* harmony export */   \"Wave\": () => /* binding */ Wave,\n/* harmony export */   \"phina\": () => /* binding */ phina$1\n/* harmony export */ });\n/*!\n * phina.js v0.2.3\n * Released under the MIT license\n *\n * Copyright (C) phi\n */\n/**\r\n * @class global.Object\r\n * Objectの拡張\r\n */\r\n\r\n/**\r\n * 関数を追加\r\n * @param   {String} key name\r\n * @param   {Function} function\r\n */\r\nfunction $method(name, fn) {\r\n  Object.defineProperty(this, name, {\r\n    value: fn,\r\n    enumerable: false,\r\n    writable: true\r\n  });\r\n}\r\n\r\n/**\r\n * @method accessor\r\n * アクセッサ(セッター/ゲッター)を定義する\r\n */\r\n// Object.prototype.$method(\"accessor\", function(name, param) {\r\nfunction accessor(name, param) {\r\n  Object.defineProperty(this, name, {\r\n    set: param[\"set\"],\r\n    get: param[\"get\"],\r\n    enumerable: false,\r\n    configurable: true,\r\n  });\r\n}\r\n\r\n/**\r\n * @method forIn\r\n * オブジェクト用ループ処理\r\n */\r\nfunction forIn(fn, self) {\r\n  self = self || this;\r\n\r\n  Object.keys(this).forEach(function(key, index) {\r\n    var value = this[key];\r\n\r\n    fn.call(self, key, value, index);\r\n  }, this);\r\n\r\n  return this;\r\n}\r\n\r\n/**\r\n * @method  $extend\r\n * 他のライブラリと競合しちゃうので extend -> $extend としました\r\n */\r\nfunction $extend() {\r\n// Object.prototype.$method(\"$extend\", function() {\r\n  Array.prototype.forEach.call(arguments, function(source) {\r\n    for (var property in source) {\r\n      this[property] = source[property];\r\n    }\r\n  }, this);\r\n  return this;\r\n}\r\n\r\n/**\r\n * @method  $safe\r\n * 安全拡張\r\n * 上書きしない\r\n */\r\nfunction $safe(source) {\r\n// Object.prototype.$method(\"$safe\", function(source) {\r\n  Array.prototype.forEach.call(arguments, function(source) {\r\n    for (var property in source) {\r\n      if (this[property] === undefined) this[property] = source[property];\r\n    }\r\n  }, this);\r\n  return this;\r\n}\r\n\r\n/**\r\n * @method $watch\r\n * @param  {string} key       [description]\r\n * @param  {function} callback  [description]\r\n * @return {[type]}           [description]\r\n */\r\nfunction $watch(key, callback) {\r\n// Object.prototype.$method('$watch', function(key, callback) {\r\n  var target = this;\r\n  var descriptor = null;\r\n\r\n  while(target) {\r\n    descriptor = Object.getOwnPropertyDescriptor(target, key);\r\n    if (descriptor) {\r\n      break;\r\n    }\r\n    target = Object.getPrototypeOf(target);\r\n  }\r\n\r\n  // すでにアクセッサーとして存在する場合\r\n  if (descriptor) {\r\n    // データディスクリプタの場合\r\n    if (descriptor.value !== undefined) {\r\n      var tempKey = '__' + key;\r\n      var tempValue = this[key];\r\n\r\n      this[tempKey] = tempValue;\r\n\r\n      accessor.call(this, key, {\r\n      // this.accessor(key, {\r\n        get: function() {\r\n          return this[tempKey];\r\n        },\r\n        set: function(v) {\r\n          var old = this[tempKey];\r\n          this[tempKey] = v;\r\n          callback.call(this, v, old);\r\n        },\r\n      });\r\n    }\r\n    // アクセサディスクリプタの場合\r\n    else {\r\n      accessor.call(this, key, {\r\n      // this.accessor(key, {\r\n        get: function() {\r\n          return descriptor.get.call(this);\r\n        },\r\n        set: function(v) {\r\n          var old = descriptor.get.call(this);\r\n          descriptor.set.call(this, v);\r\n          callback.call(this, v, old);\r\n        },\r\n      });\r\n    }\r\n  }\r\n  else {\r\n    var accesskey = '__' + key;\r\n\r\n    accessor.call(this, key, {\r\n    // this.accessor(key, {\r\n      get: function() {\r\n        return this[accesskey];\r\n      },\r\n      set: function(v) {\r\n        var old = this[accesskey];\r\n        this[accesskey] = v;\r\n        callback.call(this, v, old);\r\n      },\r\n    });\r\n  }\r\n}\n\n/*\r\n * array.js\r\n */\r\n\r\n/**\r\n * @property {Object} first\r\n * 最初の要素\r\n *\r\n * ### Example\r\n *     arr = [6, 5, 2, 3, 1, 4];\r\n *     arr.first; // => 6\r\n */\r\nconst first = {\r\n// Array.prototype.accessor(\"first\", {\r\n  \"get\": function()   { return this[0]; },\r\n  \"set\": function(v)  { this[0] = v; }\r\n};\r\n\r\n/**\r\n * @property {Object} last\r\n * 最後の要素\r\n *\r\n * ### Example\r\n *     arr = [6, 5, 2, 3, 1, 4];\r\n *     arr.last; // => 4\r\n */\r\nconst last = {\r\n// Array.prototype.accessor(\"last\", {\r\n  \"get\": function()   { return this[this.length-1]; },\r\n  \"set\": function(v)  { this[this.length-1] = v; }\r\n};\r\n\r\n\r\n/**\r\n * @method at\r\n * 指定したインデックスの要素を返します（ループ・負数の指定可）。\r\n *\r\n * 添字が負数の場合は末尾からのオフセットとみなします。末尾の要素が -1 番目になります。  \r\n * 添字の絶対値が Array.length 以上の場合はループします。\r\n *\r\n * ### Example\r\n *     arr = ['a', 'b', 'c', 'd', 'e', 'f'];\r\n *     arr.at(0);  // => 'a'\r\n *     arr.at(6);  // => 'a'\r\n *     arr.at(13); // => 'b'\r\n *     arr.at(-1); // => 'f'\r\n *     arr.at(-8); // => 'e'\r\n *\r\n * @param {Number} index 添字\r\n * @return {Object} 添字で指定された要素\r\n */\r\nfunction at(i) {\r\n// Array.prototype.$method(\"at\", function(i) {\r\n  i%=this.length;\r\n  i+=this.length;\r\n  i%=this.length;\r\n  return this[i];\r\n}\r\n\r\n/**\r\n * @method erase\r\n * @chainable\r\n * 指定したオブジェクトと一致した最初の要素を削除します。\r\n *\r\n * ### Example\r\n *     arr1 = ['a', 'b', 'b', 'c'];\r\n *     arr2 = arr1.erase('b'); // => ['a', 'b', 'c']\r\n *     arr1 === arr2;          // => true\r\n *\r\n * @param {Object} elm 削除したいオブジェクト\r\n */\r\nfunction erase(elm) {\r\n// Array.prototype.$method(\"erase\", function(elm) {\r\n  var index  = this.indexOf(elm);\r\n  if (index >= 0) {\r\n    this.splice(index, 1);\r\n  }\r\n  return this;\r\n}\r\n\r\n\r\n/**\r\n * @method clear\r\n * @chainable\r\n * 自身を空の配列にします。\r\n *\r\n * ### Example\r\n *     arr = [1, 2, [3, 4]];\r\n *     arr.clear(); // => []\r\n */\r\nfunction clear(deep) {\r\n// Array.prototype.$method(\"clear\", function() {\r\n  this.length = 0;\r\n  return this;\r\n}\r\n\r\n/**\r\n * @method contains\r\n * 指定した要素が配列に含まれているかをチェックします。\r\n *\r\n * 比較には厳密な同値（三重イコール演算子 === で使われるのと同じ方法）を用います。\r\n *\r\n * ### Example\r\n *     arr = [6, 5, 2, 3, 1, 4];\r\n *     arr.contains(3);     // => true\r\n *     arr.contains(3, 4);  // => false\r\n *     arr.contains(3, -4); // => true\r\n *     arr.contains(\"6\");   // => false\r\n *\r\n * @param {Object} item チェックするオブジェクト\r\n * @param {Number} [fromIndex=0] 検索を始める位置。負数を指定した場合は末尾からのオフセットと見なします。\r\n * @return {Boolean} チェックの結果\r\n */\r\nfunction contains(item, fromIndex) {\r\n// Array.prototype.$method(\"contains\", function(item, fromIndex) {\r\n  return this.indexOf(item, fromIndex) != -1;\r\n}\r\n\r\n/**\r\n * @method clone\r\n * 自身のコピーを生成して返します。\r\n *\r\n * ### Example\r\n *     arr1 = [1, 2, [3, 4]];\r\n *     arr2 = arr1.clone();      // => [1, 2, [3, 4]]\r\n *     arr1[2] === arr2[2];      // => true\r\n *     arr1[2][0] = 9;\r\n *     arr2;                     // => [1, 2, [9, 4]]\r\n *     arr1 = [1, 2, [3, 4]];\r\n *     arr2 = arr1.clone(true);  // => [1, 2, [3, 4]]\r\n *     arr1[2] === arr2[2];      // => false\r\n *     arr1[2][0] = 9;\r\n *     arr2;                     // => [1, 2, [3, 4]]\r\n *\r\n * @param {Boolean} [deep=false] 配列のネストをたどって複製するかどうか\r\n * @return {Object} 新しい配列\r\n */\r\nfunction clone(deep) {\r\n// Array.prototype.$method(\"clone\", function(deep) {\r\n  if (deep === true) ;\r\n  else {\r\n    return Array.prototype.slice.apply(this);\r\n  }\r\n}\r\n\r\n/**\r\n * @method range\r\n * @chainable\r\n * 自身を等差数列（一定間隔の整数値の列）とします。\r\n *\r\n * - 引数が1つの場合、0～end（end含まず）の整数の配列です。  \r\n * - 引数が2つの場合、start～end（end含まず）の整数の配列です。  \r\n * - 引数が3つの場合、start～end（end含まず）かつ start + n * step (nは整数)を満たす整数の配列です。\r\n *\r\n * ### Example\r\n *     arr = [];\r\n *     arr.range(4);        // => [0, 1, 2, 3]\r\n *     arr.range(2, 5);     // => [2, 3, 4]\r\n *     arr.range(2, 14, 5); // => [2, 7, 12]\r\n *     arr.range(2, -3);    // => [2, 1, 0, -1, -2]\r\n *\r\n * @param {Number} start 最初の値（デフォルトは 0）\r\n * @param {Number} end 最後の値（省略不可）\r\n * @param {Number} [step=1または-1] 間隔\r\n */\r\nfunction range(start, end, step) {\r\n// Array.prototype.$method(\"range\", function(start, end, step) {\r\n  clear.call(this);\r\n  // this.clear();\r\n  \r\n  if (arguments.length == 1) {\r\n    for (var i=0; i<start; ++i) this[i] = i;\r\n  }\r\n  else if (start < end) {\r\n    step = step || 1;\r\n    if (step > 0) {\r\n      for (var i=start, index=0; i<end; i+=step, ++index) {\r\n        this[index] = i;\r\n      }\r\n    }\r\n  }\r\n  else {\r\n    step = step || -1;\r\n    if (step < 0) {\r\n      for (var i=start, index=0; i>end; i+=step, ++index) {\r\n        this[index] = i;\r\n      }\r\n    }\r\n  }\r\n  \r\n  return this;\r\n}\r\n\r\n/**\r\n * @method each\r\n * @chainable\r\n * 要素を順番に渡しながら関数を繰り返し実行します。\r\n *\r\n * メソッドチェーンに対応していますが、このメソッドによって自分自身は変化しません。\r\n *\r\n * ###Reference\r\n * - [Array.prototype.forEach() - JavaScript | MDN](https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach)\r\n *\r\n * ### Example\r\n *     arr = [1, 2, 3];\r\n *     arr.each( function(elm) {\r\n *       console.log(elm * elm)\r\n *     });\r\n *     // => 1\r\n *     //    4\r\n *     //    9\r\n *\r\n * @param {Function} callback 各要素に対して実行するコールバック関数\r\n * @param {Object} [self=this] callback 内で this として参照される値\r\n */\r\nfunction each() {\r\n// Array.prototype.$method(\"each\", function() {\r\n  this.forEach.apply(this, arguments);\r\n  return this;\r\n}\r\n\r\n\r\n// ==========\r\n// 以下はes2015以降に存在するため、保留\r\n// ==========\r\n\r\n\r\n// /**\r\n//  * @method find\r\n//  * 各要素を引数にして関数を実行し、その値が真となる（＝条件にマッチする）最初の要素を返します。\r\n//  *\r\n//  * どの要素もマッチしなければ undefined を返します。\r\n//  *\r\n//  * ### Example\r\n//  *     arr = ['foo', 'bar', 'hoge', 'fuga'];\r\n//  *     arr.find( function(elm) {\r\n//  *       return elm.indexOf('a') >= 0;\r\n//  *     });\r\n//  *     // => 'bar'\r\n//  *\r\n//  * @param {Function} callback 各要素に対して実行するコールバック関数\r\n//  * @param {Object} [self=this] callback 内で this として参照される値。デフォルトは呼び出し時の this。\r\n//  * @return {Object} 条件にマッチした最初の要素、または undefined\r\n//  */\r\n// Array.prototype.$method(\"find\", function(fn, self) {\r\n//   var target = null;\r\n\r\n//   this.some(function(elm, i) {\r\n//     if (fn.call(self, elm, i, this)) {\r\n//       target = elm;\r\n//       return true;\r\n//     }\r\n//   });\r\n\r\n//   return target;\r\n// });\r\n\r\n// /**\r\n//  * @method findIndex\r\n//  * 各要素を引数にして関数を実行し、その値が真となる（＝条件にマッチする）最初のインデックスを返します。\r\n//  *\r\n//  * どの要素もマッチしなければ -1 を返します。\r\n//  *\r\n//  * ### Example\r\n//  *     arr = ['foo', 'bar', 'hoge', 'fuga'];\r\n//  *     arr.findIndex( function(elm) {\r\n//  *       return elm.indexOf('a') >= 0;\r\n//  *     });\r\n//  *     // => 1\r\n//  *\r\n//  * @param {Function} callback 各要素に対して実行するコールバック関数\r\n//  * @param {Object} [self=this] callback 内で this として参照される値。デフォルトは呼び出し時の this。\r\n//  * @return {Object} 条件にマッチした最初のインデックス、または -1\r\n//  */\r\n// Array.prototype.$method(\"findIndex\", function(fn, self) {\r\n//   var target = -1;\r\n\r\n//   this.some(function(elm, i) {\r\n//     if (fn.call(self, elm, i, this)) {\r\n//       target = i;\r\n//       return true;\r\n//     }\r\n//   });\r\n\r\n//   return target;\r\n// });\r\n\r\n/**\r\n * @method of\r\n * @static\r\n * ES6 準拠の of 関数です。可変長引数をとって Array オブジェクトにして返します。\r\n *\r\n * ### Example\r\n *     Array.of();        // => []\r\n *     Array.of(1, 2, 3); // => [1, 2, 3]\r\n *\r\n * @param {Object} elementN 生成する配列の要素\r\n * @return {Array} 生成した配列\r\n */\r\n// Array.$method(\"of\", function() {\r\n//   return Array.prototype.slice.call(arguments);\r\n// });\r\n\r\n/**\r\n * @method from\r\n * @static\r\n * ES6 準拠の from 関数です。array-like オブジェクトかiterable オブジェクトから新しい配列を生成します。\r\n *\r\n * array-like オブジェクトとは、length プロパティを持ち、数字の添字でアクセス可能なオブジェクトのことです。\r\n * 通常の配列のほか、String、arguments、NodeList なども array-like オブジェクトです。\r\n *\r\n * iterable オブジェクトとは、Symbol.iterator プロパティを持つオブジェクトのことです。\r\n * 通常の配列のほか、String、arguments、NodeList なども iterable オブジェクトです。\r\n *\r\n * ### Example\r\n *     Array.from([1, 2, 3], function(elm){ return elm * elm} ); // => [1, 4, 9]\r\n *     Array.from(\"foo\");                                        // => [\"f\", \"o\", \"o\"]\r\n *     Array.from( document.querySelectorAll(\"span\"))            // => [Element, Element, Element,...]\r\n *\r\n * @param {Object} arrayLike 配列に変換する array-like オブジェクト\r\n * @param {Function} [callback] arrayLike のすべての要素に対して実行するマップ関数\r\n * @param {Object} [context] callback 内で this として参照される値\r\n * @return {Array} 生成した配列\r\n */\r\n// Array.$method(\"from\", function(arrayLike, callback, context) {\r\n//   if (!Object(arrayLike).length) return [];\r\n\r\n//   var result = [];\r\n//   if (Symbol && Symbol.iterator && arrayLike[Symbol.iterator]) {\r\n//       var iterator = arrayLike[Symbol.iterator]();\r\n//       while (true) {\r\n//           var iteratorResult = iterator.next();\r\n//           if (iteratorResult.done) break;\r\n\r\n//           var value = typeof callback === 'function' ? callback.bind(context || this)(iteratorResult.value) : iteratorResult.value;\r\n//           result.push(value);\r\n//       }\r\n//       return result;\r\n//   }\r\n\r\n//   for (var i = 0, len = arrayLike.length; i < len; i++) {\r\n//       result.push(arrayLike[i]);\r\n//   }\r\n//   return result.map(typeof callback == 'function' ? callback : function(item) {\r\n//     return item;\r\n//   }, context);\r\n// });\n\n/*\r\n * phina.js namespace\r\n */\r\nvar phina$1 = phina$1 || {};\r\n\r\n// 一旦拡張\r\n// $method.call(phina, \"hoge\", ...)としても良いが、書き換えが大変なため\r\nphina$1.$method = function(...args) {\r\n// phina.prototype.$method = function(...args) { // ng\r\n  return $method.call(this, ...args)\r\n};\r\n\r\n// ;(function() {\r\n\r\n/**\r\n * @class phina\r\n * # phina.js namespace\r\n * phina.js のネームスペースです。phina.js の提供する機能は（コア拡張以外）全てこのオブジェクトに入っています。\r\n *\r\n * ## phina.js のクラス定義について\r\n *\r\n * phina.js では独自のクラスシステムを実装しています。\r\n * phina.js のクラスの特徴としては new 構文を使用しないため、メソッドチェーンがしやすいことや、文字列でクラスを定義したり親クラスを指定したりできる点が挙げられます。\r\n * 文字列を使用できることで、クラスを定義する段階で親クラスが指定されていなくても、クラスを呼び出す段階で親クラスが定義されていればいいというメリットがあります。\r\n *\r\n * クラスの定義には {@link #createClass}, {@link #define} を使用します。詳しい使い方はそれぞれの関数の項を参照してください。\r\n *\r\n * ## クラスについての補足\r\n *\r\n * phina.js のクラスでは superClass を指定すると以下のメソッドが自動で追加されます。\r\n *\r\n * - superInit(): 親クラスのコンストラクタを呼び出す（初期化）\r\n * - superMethod(): 親クラスのメソッドを呼び出す\r\n *\r\n * superInit は引数を変えることで親クラスのコンストラクタを呼ぶときの引数を変えられます。\r\n * superMethod は一つ目の引数に呼び出したい親クラスのメソッド名を文字列で、二つ目以降に呼び出したいメソッドの引数を渡します。\r\n *\r\n * また phina.js のクラスでは以下の特別な役割をもったプロパティ、メソッドが存在します。\r\n *\r\n * - _accessor: アクセッサー（ゲッターとセッター）を定義するためのプロパティ\r\n * - _static: static メンバを定義するためのプロパティ\r\n * - _defined(): クラスが定義されたときに呼ばれるメソッド\r\n *\r\n * ### _accessor の使用例\r\n *     var Class = phina.createClass({\r\n *       init: function() {\r\n *         ...\r\n *       },\r\n *\r\n *       _accessor: function() {\r\n *         value: {\r\n *           get: function() {\r\n *             return this._value;\r\n *           },\r\n *\r\n *           set: function(v) {\r\n *             this._value = v;\r\n *             console.log('valueがセットされました！');\r\n *           }\r\n *         }\r\n *       }\r\n *     });\r\n *\r\n * ### _static の使用例\r\n *     var Class = phina.createClass({\r\n *       init: function() {\r\n *         ...\r\n *       },\r\n *\r\n *       _static: {\r\n *\r\n *         staticProperty1: 1,\r\n *         staticProperty2: 2,\r\n *\r\n *         staticMethod1: function(){},\r\n *         staticMethod2: function(){}\r\n *\r\n *       }\r\n *     });\r\n *\r\n *     console.log(Class.staticProperty1); // => 1\r\n *\r\n * ### _defined の使用例\r\n *     var Class = phina.createClass({\r\n *       init: function() {\r\n *       },\r\n *\r\n *       _defined: function() {\r\n *         console.log('defined!');\r\n *       }\r\n *     }); // => defined!\r\n */\r\n\r\n/**\r\n * @property {String} [VERSION = <%= version %>]\r\n * phina.js のバージョンです。\r\n *\r\n * @member phina\r\n * @static\r\n */\r\nphina$1.VERSION = \"0.2.3\";\r\n\r\n/**\r\n * @method isNode\r\n * Node.js の module かどうかをチェックします。\r\n *\r\n * @member phina\r\n * @static\r\n */\r\nphina$1.$method('isNode', function() {\r\n  return (\"object\" !== 'undefined');\r\n});\r\n\r\n/**\r\n * @method namespace\r\n * 引数は関数で、その関数内での this は phina になります。\r\n *\r\n * @param {Function} fn 関数\r\n * @member phina\r\n * @static\r\n */\r\nphina$1.$method('namespace', function(fn) {\r\n  fn.call(this);\r\n});\r\n\r\nvar ns = phina$1.isNode() ? __webpack_require__.g : window;\r\n\r\n/**\r\n * @property {Object} global\r\n * Node.js なら global ブラウザなら window を返します。\r\n * ゲッターのみ定義されています。\r\n *\r\n * @member phina\r\n * @readonly\r\n * @static\r\n */\r\n// phina.accessor('global', {\r\naccessor.call(phina$1, 'global', {\r\n  get: function() {\r\n    return ns;\r\n  },\r\n});\r\n\r\n\r\n/**\r\n * @method testUA\r\n * 引数の RegExp オブジェクトとユーザーエージェントを比較して返します。\r\n *\r\n * @param {RegExp}\r\n * @return {Boolean}\r\n * @member phina\r\n * @static\r\n */\r\nphina$1.$method('testUA', function(regExp) {\r\n  if (!phina$1.global.navigator) return false;\r\n  var ua = phina$1.global.navigator.userAgent;\r\n  return regExp.test(ua);\r\n});\r\n\r\n/**\r\n * @method isAndroid\r\n * Android かどうかを返します。\r\n *\r\n * @return {Boolean} Android かどうか\r\n * @member phina\r\n * @static\r\n */\r\nphina$1.$method('isAndroid', function() {\r\n  return phina$1.testUA(/Android/);\r\n});\r\n\r\n/**\r\n * @method isIPhone\r\n * iPhone かどうかを返します。\r\n *\r\n * @return {Boolean} iPhone かどうか\r\n * @member phina\r\n * @static\r\n */\r\nphina$1.$method('isIPhone', function() {\r\n  return phina$1.testUA(/iPhone/);\r\n});\r\n\r\n/**\r\n * @method isIPad\r\n * iPad かどうかを返します。\r\n *\r\n * @return {Boolean} iPad かどうか\r\n * @member phina\r\n * @static\r\n */\r\nphina$1.$method('isIPad', function() {\r\n  return phina$1.testUA(/iPad/);\r\n});\r\n\r\n/**\r\n * @method isIOS\r\n * iOS かどうかを返します。\r\n *\r\n * @return {Boolean} iOS かどうか\r\n * @member phina\r\n * @static\r\n */\r\nphina$1.$method('isIOS', function() {\r\n  return phina$1.testUA(/iPhone|iPad/);\r\n});\r\n\r\n/**\r\n * @method isMobile\r\n * モバイルかどうかを返します。具体的には Android, iPhone, iPad のいずれかだと true になります。\r\n *\r\n * @return {Boolean} モバイルかどうか\r\n * @member phina\r\n * @static\r\n */\r\nphina$1.$method('isMobile', function() {\r\n  return phina$1.testUA(/iPhone|iPad|Android/);\r\n});\r\n\r\n// // support node.js\r\n// if (phina.isNode()) {\r\n//   module.exports = phina;\r\n// }\r\n\r\n// ns.phina = phina;\r\n\r\n// })(this);\r\n\r\n\r\nphina$1.namespace(function() {\r\n\r\n  /**\r\n   * @method createClass\r\n   * クラスを作成する関数です。\r\n   * 親クラスの指定は文字列でも可能です。\r\n   * 何も継承しない場合 superClass の指定は不要です。また、親クラスを継承している場合、コンストラクタ内で this.superInit() を実行して親クラスを初期化することが必須です。\r\n   *\r\n   * ### Example\r\n   *     var Class = phina.createClass({\r\n   * 　　  superClass: 'namespace.Super',//親クラス継承\r\n   *\r\n   * 　　  //メンバ変数\r\n   * 　　  member1: 100,\r\n   * 　　  member2: 'test',\r\n   * 　　  member3: null,\r\n   *\r\n   *\r\n   * 　　  //コンストラクタ\r\n   * 　　  //Class()を呼び出したとき実行される\r\n   * 　　  init: function(a, b){\r\n   * 　　    //スーパークラス(継承したクラス)のinit\r\n   * 　　    this.superInit(a, b);\r\n   * 　　    this.a = a;\r\n   * 　　    this.b = b;\r\n   * 　　  },\r\n   * 　　\r\n   * 　　  //メソッド\r\n   * 　　  method1: function(){},\r\n   * 　　  method2: function(){},\r\n   * 　　\r\n   * 　　});\r\n   *\r\n   * @param {Object}\r\n   * @return {Function} クラス\r\n   * @member phina\r\n   * @static\r\n   */\r\n  phina$1.$method('createClass', function(params) {\r\n\r\n    var _class = function() {\r\n      var instance = new _class.prototype._creator();\r\n      _class.prototype.init.apply(instance, arguments);\r\n      return instance;\r\n    };\r\n\r\n    if (params.superClass) {\r\n      _class.prototype = Object.create(params.superClass.prototype);\r\n      params.init.owner = _class;\r\n      _class.prototype.superInit = function() {\r\n        this.__counter = this.__counter || 0;\r\n\r\n        var superClass = this._hierarchies[this.__counter++];\r\n        var superInit = superClass.prototype.init;\r\n        superInit.apply(this, arguments);\r\n\r\n        this.__counter = 0;\r\n      };\r\n      _class.prototype.superMethod = function() {\r\n        var args = Array.prototype.slice.call(arguments, 0);\r\n        var name = args.shift();\r\n        this.__counters = this.__counters || {};\r\n        this.__counters[name] = this.__counters[name] || 0;\r\n\r\n        var superClass = this._hierarchies[ this.__counters[name]++ ];\r\n        var superMethod = superClass.prototype[name];\r\n        var rst = superMethod.apply(this, args);\r\n\r\n        this.__counters[name] = 0;\r\n\r\n        return rst;\r\n      };\r\n      _class.prototype.constructor = _class;\r\n    }\r\n\r\n\r\n    // //\r\n    // params.forIn(function(key, value) {\r\n    //   if (typeof value === 'function') {\r\n    //     _class.$method(key, value);\r\n    //   }\r\n    //   else {\r\n    //     _class.prototype[key] = value;\r\n    //   }\r\n    // });\r\n    // 継承\r\n    $extend.call(_class.prototype, params);\r\n    // _class.prototype.$extend(params);\r\n\r\n    // 継承用\r\n    _class.prototype._hierarchies = [];\r\n    var _super = _class.prototype.superClass;\r\n    while(_super) {\r\n      _class.prototype._hierarchies.push(_super);\r\n      _super = _super.prototype.superClass;\r\n    }\r\n\r\n    // accessor\r\n    if (params._accessor) {\r\n      forIn.call(params._accessor, function(key, value) {\r\n      // params._accessor.forIn(function(key, value) {\r\n        accessor.call(_class.prototype, key, value);\r\n        // _class.prototype.accessor(key, value);\r\n      });\r\n      // _class.prototype = Object.create(_class.prototype, params._accessor);\r\n    }\r\n\r\n    _class.prototype._creator = function() { return this; };\r\n    _class.prototype._creator.prototype = _class.prototype;\r\n\r\n    // static property/method\r\n    if (params._static) {\r\n      $extend.call(_class, params._static);\r\n      // _class.$extend(params._static);\r\n    }\r\n\r\n    if (params._defined) {\r\n      params._defined.call(_class, _class);\r\n    }\r\n\r\n    return _class;\r\n  });\r\n\r\n  /**\r\n   * @method using\r\n   * 文字列で定義したパスを使ってオブジェクトを取り出します。パスは , . / \\ :: で区切ることができます。\r\n   * {@link #phina.register} で登録したオブジェクトを取り出すときなどに使うと便利な関数です。\r\n   *\r\n   * ### Example\r\n   *     hoge = {\r\n   *       foo: {\r\n   *         bar: {\r\n   *           num: 100\r\n   *         }\r\n   *       }\r\n   *     };\r\n   *     var bar = phina.using('hoge.foo.bar');\r\n   *     console.log(bar.num); // => 100\r\n   *\r\n   * @param {String} path オブジェクトへのパス\r\n   * @return {Object} 取り出したオブジェクト\r\n   * @member phina\r\n   * @static\r\n   */\r\n  phina$1.$method('using', function(path) {\r\n    if (!path) {\r\n      return phina$1.global;\r\n    }\r\n\r\n    var pathes = path.split(/[,.\\/ ]|::/);\r\n    var current = phina$1.global;\r\n\r\n    pathes.forEach(function(p) {\r\n      current = current[p] || (current[p]={});\r\n    });\r\n\r\n    return current;\r\n  });\r\n\r\n  /**\r\n   * @method register\r\n   * パス指定でオブジェクトを登録する関数です。パスは , . / \\ :: で区切ることができます。\r\n   *\r\n   * ### Example\r\n   *     phina.register('hoge.foo.bar', {\r\n   *       num: 100,\r\n   *     });\r\n   *     console.log(hoge.foo.bar.num); // => 100\r\n   *\r\n   * @param {String} path 登録するオブジェクトのパス\r\n   * @param {Object} _class 登録するオブジェクト\r\n   * @return {Object} 登録したオブジェクト\r\n   * @member phina\r\n   * @static\r\n   */\r\n  phina$1.$method('register', function(path, _class) {\r\n    var pathes = path.split(/[,.\\/ ]|::/);\r\n    // var className = pathes.last;\r\n    var className = last.get.call(pathes);\r\n    var parentPath = path.substring(0, path.lastIndexOf('.')); // ここを直さないとピリオド区切り以外は無効？\r\n    var parent = phina$1.using(parentPath);\r\n\r\n    parent[className] = _class;\r\n\r\n    return _class;\r\n  });\r\n\r\n  var _classDefinedCallback = {};\r\n\r\n  /**\r\n   * @method define\r\n   * クラスを定義する関数です。使い方は {@link #createClass} とほとんど同じです。\r\n   * ただし、引数は2つあり、第一引数は定義するクラスのパスを文字列で渡します。第二引数のオブジェクトは {@link #createClass} の引数と同じようにします。\r\n   * {@link #createClass} と違い、変数に代入する必用がなく、パス指定でクラスを定義できます。\r\n   * 内部的には {@link #register}, {@link #using} を使用しているため、パスは , . / \\ :: で区切ることができます。\r\n   *\r\n   * ### Example\r\n   *     phina.define('namespace.Class', {\r\n   *       superClass: 'namespace.Super',//親クラス継承\r\n   *\r\n   *       //メンバ変数\r\n   *       member1: 100,\r\n   *       member2: 'test',\r\n   *       member3: null,\r\n   *\r\n   *\r\n   *       //コンストラクタ\r\n   *       //Class()を呼び出したとき実行される\r\n   *       init: function(a, b){\r\n   *         //スーパークラス(継承したクラス)のinit\r\n   *         this.superInit(a, b);\r\n   *         this.a = a;\r\n   *         this.b = b;\r\n   *       },\r\n   *\r\n   *       //メソッド\r\n   *       method1: function(){},\r\n   *       method2: function(){},\r\n   *\r\n   *     });\r\n   *\r\n   * @param {String} path パス\r\n   * @param {Object} params オブジェクト\r\n   * @return {Function} 定義したクラス\r\n   * @member phina\r\n   * @static\r\n   */\r\n  phina$1.$method('define', function(path, params) {\r\n    if (params.superClass) {\r\n      if (typeof params.superClass === 'string') {\r\n        var _superClass = phina$1.using(params.superClass);\r\n        if (typeof _superClass != 'function') {\r\n          if (!_classDefinedCallback[params.superClass]) {\r\n            _classDefinedCallback[params.superClass] = [];\r\n          }\r\n          _classDefinedCallback[params.superClass].push(function() {\r\n            phina$1.define(path, params);\r\n          });\r\n\r\n          return ;\r\n        }\r\n        else {\r\n          params.superClass = _superClass;\r\n        }\r\n      }\r\n      else {\r\n        params.superClass = params.superClass;\r\n      }\r\n    }\r\n\r\n    var _class = phina$1.createClass(params);\r\n    accessor.call(_class.prototype, 'className', {\r\n    // _class.prototype.accessor('className', {\r\n      get: function() {\r\n        return path;\r\n      },\r\n    });\r\n\r\n    phina$1.register(path, _class);\r\n\r\n    if (_classDefinedCallback[path]) {\r\n      _classDefinedCallback[path].forEach(function(callback) {\r\n        callback();\r\n      });\r\n      _classDefinedCallback[path] = null;\r\n    }\r\n\r\n    return _class;\r\n  });\r\n\r\n  /**\r\n   * @method globalize\r\n   * phina.js が用意している全てのクラスをグローバルに展開します。（具体的には phina が持つオブジェクトが一通りグローバルに展開されます。）\r\n   * この関数を実行することで、いちいち global からたどっていかなくても phina.js の用意しているクラスをクラス名だけで呼び出すことができます。\r\n   *\r\n   * ### Example\r\n   *     phina.globalize();\r\n   *\r\n   * @member phina\r\n   * @static\r\n   */\r\n  phina$1.$method('globalize', function() {\r\n    forIn.call(phina$1, function(key, value) {\r\n\r\n      if (typeof value !== 'object') return ;\r\n\r\n      forIn.call(value, function(key, value) {\r\n      // value.forIn(function(key, value) {\r\n        // if (phina.global[key]) {\r\n        //   console.log(ns, key);\r\n        //   phina.global['_' + key] = value;\r\n        // }\r\n        // else {\r\n        //   phina.global[key] = value;\r\n        // }\r\n        phina$1.global[key] = value;\r\n      });\r\n    });\r\n  });\r\n\r\n  phina$1._mainListeners = [];\r\n  phina$1._mainLoaded = false;\r\n\r\n  /**\r\n   * @method main\r\n   * phina.js でプログラミングする際、メインの処理を記述するための関数です。基本的に phina.js でのプログラミングではこの中にプログラムを書いていくことになります。\r\n   *\r\n   * ### Example\r\n   *     phina.main(function() {\r\n   *       //ここにメインの処理を書く\r\n   *     });\r\n   *\r\n   * @param {Function} func メインの処理\r\n   * @member phina\r\n   * @static\r\n   */\r\n  phina$1.$method('main', function(func) {\r\n    if (phina$1._mainLoaded) {\r\n      func();\r\n    }\r\n    else {\r\n      phina$1._mainListeners.push(func);\r\n    }\r\n  });\r\n\r\n  var doc = phina$1.global.document;\r\n  if (phina$1.global.addEventListener && doc && doc.readyState !== 'complete') {\r\n    phina$1.global.addEventListener('load', function() {\r\n      var run = function() {\r\n        var listeners = clone.call(phina$1._mainListeners);\r\n        // var listeners = phina._mainListeners.clone();\r\n        clear.call(phina$1._mainListeners);\r\n        // phina._mainListeners.clear();\r\n        listeners.forEach(function(func) {\r\n        // listeners.each(function(func) {\r\n          func();\r\n        });\r\n\r\n        // main 内で main を追加している場合があるのでそのチェック\r\n        if (phina$1._mainListeners.length > 0) {\r\n          run();\r\n        }\r\n        else {\r\n          phina$1._mainLoaded = true;\r\n        }\r\n      };\r\n      // ちょっと遅延させる(画面サイズ問題)\r\n      setTimeout(run);\r\n    });\r\n  }\r\n  else {\r\n    phina$1._mainLoaded = true;\r\n  }\r\n});\n\n/**\r\n * @class phina.util.EventDispatcher\r\n * # イベントを扱うためのクラス\r\n * イベントを扱うためのメソッドやプロパティを定義しているクラスです。\r\n * phina.js が提供するクラスの多くはこの EventDispatcher クラスの子孫となっているため、\r\n * ほとんどのオブジェクトで容易にイベントを扱うことができます。\r\n *\r\n * # 少し説明\r\n * this.onxxx = function(){}; でもイベントリスナを設定できるが、あまり推奨しない。\r\n * 呼び出される順序は、まず this.onxxxx が呼び出され、あとは on() で登録した順番。\r\n * @memberof phina\r\n */\r\nclass EventDispatcher {\r\n\r\n  constructor() {\r\n    this._listeners = {};\r\n  }\r\n\r\n  /**\r\n   * @method on\r\n   * @chainable\r\n   * イベントリスナを登録します。\r\n   *\r\n   * １つのイベントに対するイベントリスナはいくつでも登録することができます。\r\n   *\r\n   * 標準のイベントを検知するには、オブジェクトの {@link Object2D#interactive} プロパティが true である必要があります。\r\n   * {@link Object2D#interactive} プロパティを設定するには {@link Object2D#setInteractive} メソッドを呼び出してください。\r\n   *\r\n   * また、{@link #flare} や {@link #fire} によって定義したカスタムイベントに対するイベントリスナも登録することが\r\n   * できます。カスタムイベントのイベントリスナは {@link Object2D#interactive} プロパティによらず呼び出されます。\r\n   * なおカスタムイベントのオブジェクトは Event オブジェクトとは異なります。\r\n   *\r\n   * ###Reference\r\n   * 標準のイベントの種類は以下を参照してください。\r\n   * - [Event reference | MDN]( https://developer.mozilla.org/en-US/docs/Web/Events )\r\n   *\r\n   * ### Example\r\n   *     var shape = CircleShape().addChildTo(this).setInteractive(true).setPosition(50, 50);\r\n   *     shape.on(\"touchstart\", function(e){\r\n   *       this.color = \"blue\";\r\n   *     });\r\n   *\r\n   * @param {String} type イベントの種類\r\n   * @param {Function} listener イベントリスナとなる関数\r\n   * @param {Object} listener.event Event オブジェクト、またはカスタムイベントのオブジェクト\r\n   */\r\n  on(type, listener) {\r\n    if (this._listeners[type] === undefined) {\r\n      this._listeners[type] = [];\r\n    }\r\n\r\n    this._listeners[type].push(listener);\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @method off\r\n   * @chainable\r\n   * イベントリスナを削除します。\r\n   *\r\n   * ある種類のイベントに対するイベントリスナをすべて削除するには {@link #clear} を使用してください。\r\n   *\r\n   * @param {String} type イベントの種類\r\n   * @param {Function} listener イベントリスナ関数\r\n   */\r\n  off(type, listener) {\r\n    var listeners = this._listeners[type];\r\n    var index = listeners.indexOf(listener);\r\n    if (index != -1) {\r\n      listeners.splice(index,1);\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @method fire\r\n   * @chainable\r\n   * カスタムイベントを表すオブジェクトを指定してカスタムイベントを発火します。\r\n   *\r\n   * @param {Object} event カスタムイベントを表すオブジェクト\r\n   * @param {String} event.type カスタムイベントの名前\r\n   */\r\n   fire(e) {\r\n    e.target = this;\r\n    var oldEventName = 'on' + e.type;\r\n    if (this[oldEventName]) this[oldEventName](e);\r\n\r\n    var listeners = this._listeners[e.type];\r\n    if (listeners) {\r\n      // var temp = listeners.clone();\r\n      var temp = listeners.slice(0);\r\n      for (var i=0,len=temp.length; i<len; ++i) {\r\n          temp[i].call(this, e);\r\n      }\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @method flare\r\n   * @chainable\r\n   * イベント名を指定してカスタムイベントを発火します。\r\n   *\r\n   * param 引数を指定することによりカスタムイベントに任意のプロパティを設定することができます。\r\n   * これにより、呼び出し元がイベントリスナに任意の値を渡すことができます。\r\n   * （ただし target プロパティには必ず自分自身が格納されます。）\r\n   *\r\n   * ### Example\r\n   *     //\r\n   *\r\n   * @param {String} type カスタムイベントの名前\r\n   * @param {Object} [param] カスタムイベントにプロパティを設定するためのオブジェクト\r\n  */\r\n  flare(type, param) {\r\n    var e = {type:type};\r\n    if (param) {\r\n      forIn.call(param, function(key, val) {\r\n      // param.forIn(function(key, val) {\r\n        e[key] = val;\r\n      });\r\n    }\r\n    this.fire(e);\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @method one\r\n   * @chainable\r\n   * 一度だけ実行されるイベントリスナを登録します。\r\n   *\r\n   * 指定したイベントリスナが一度実行されると、そのイベントリスナは削除されます。それ以外の挙動は {@link #on} と同じです。\r\n   *\r\n   * @param {String} type イベントの種類\r\n   * @param {Function} listener イベントリスナとなる関数\r\n   * @param {Object} listener.event Event オブジェクト、またはカスタムイベントのオブジェクト\r\n   */\r\n  one(type, listener) {\r\n    var self = this;\r\n\r\n    var func = function() {\r\n      var result = listener.apply(self, arguments);\r\n      self.off(type, func);\r\n      return result;\r\n    };\r\n\r\n    this.on(type, func);\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @method has\r\n   * イベントリスナが登録されているかどうかを調べます。\r\n   *\r\n   * 指定したイベントの種類に対するイベントリスナが登録されている場合は true、そうでない場合は false を返します。\r\n   *\r\n   * @param {String} type イベントの種類\r\n   * @return {Boolean} 指定したイベントのイベントリスナが登録されているかどうか\r\n   */\r\n  has(type) {\r\n    return (this._listeners[type] !== undefined && this._listeners[type].length !== 0) || !!this['on' + type];\r\n  }\r\n\r\n  /**\r\n   * @method clear\r\n   * @chainable\r\n   * ある種類のイベントに対するイベントリスナをすべて削除します。\r\n   *\r\n   * 特定のイベントリスナのみを削除するには {@link #off} を使用してください。\r\n   *\r\n   * @param {String} type イベントの種類\r\n   */\r\n  clear(type) {\r\n    var oldEventName = 'on' + type;\r\n    if (this[oldEventName]) delete this[oldEventName];\r\n    this._listeners[type] = [];\r\n    return this;\r\n  }\r\n}\r\n\r\n/**\r\n * @method addEventListener\r\n * {@link #on} のエイリアスです。\r\n */\r\n/**\r\n * @method removeEventListener\r\n * {@link #off} のエイリアスです。\r\n */\r\n/**\r\n * @method clearEventListener\r\n * {@link #clear} のエイリアスです。\r\n */\r\n/**\r\n * @method hasEventListener\r\n * {@link #has} のエイリアスです。\r\n */\r\n/**\r\n * @method dispatchEvent\r\n * {@link #fire} のエイリアスです。\r\n */\r\n/**\r\n * @method dispatchEventByType\r\n * {@link #flare} のエイリアスです。\r\n */\r\nconst methodMap = {\r\n  addEventListener: 'on',\r\n  removeEventListener: 'off',\r\n  clearEventListener: 'clear',\r\n  hasEventListener: 'has',\r\n  dispatchEvent: 'fire',\r\n  dispatchEventByType: 'flare',\r\n};\r\n// methodMap.forIn(function(old, name) {\r\nforIn.call(methodMap, function(old, name) {\r\n  // EventDispatcher.prototype.$method(old, phina.util.EventDispatcher.prototype[name]);\r\n  $method.call(EventDispatcher.prototype, old, EventDispatcher.prototype[name]);\r\n});\n\n/**\r\n * @class phina.util.Flow\r\n * tick management class\r\n * @extends phina.util.EventDispatcher\r\n */\r\nclass Flow extends EventDispatcher {\r\n\r\n  /**\r\n   * @constructor\r\n   */\r\n  constructor(func, wait) {\r\n    super();\r\n\r\n    this.status = 'pending';\r\n    this.resultValue = null;\r\n    this._queue = [];\r\n    this.func = func;\r\n\r\n    if (wait !== true) {\r\n      var self = this;\r\n      var resolve = function() {\r\n        self.resolve.apply(self, arguments);\r\n        self.status = 'resolved';\r\n      };\r\n      var reject = function() {\r\n        self.reject.apply(self, arguments);\r\n        self.status = 'rejected';\r\n      };\r\n\r\n      this.func(resolve, reject);\r\n    }\r\n  }\r\n\r\n  /*\r\n   * 成功\r\n   */\r\n  resolve(arg) {\r\n    this.resultValue = arg;\r\n\r\n    // キューに積まれた関数を実行\r\n    this._queue.forEach(function(func) {\r\n      func(this.resultValue);\r\n    }, this);\r\n    // this._queue.clear();\r\n    clear.call(this._queue);\r\n  }\r\n\r\n  /*\r\n   * 失敗\r\n   */\r\n  reject() {\r\n\r\n  }\r\n\r\n  /*\r\n   * 非同期終了時の処理を登録\r\n   */\r\n  then(func) {\r\n    // 成功ステータスだった場合は即実行\r\n    if (this.status === 'resolved') {\r\n      var value = func(this.resultValue);\r\n      return Flow.resolve(value);\r\n    }\r\n    else {\r\n      var flow = new Flow(function(resolve) {\r\n        resolve();\r\n      }, true);\r\n\r\n      this._queue.push(function(arg) {\r\n        var resultValue = func(arg);\r\n\r\n        if (resultValue instanceof Flow) {\r\n          resultValue.then(function(value) {\r\n            flow.resolve(value);\r\n          });\r\n        }\r\n        else {\r\n          flow.resolve(resultValue);\r\n        }\r\n      });\r\n\r\n      return flow;\r\n    }\r\n  }\r\n\r\n  static resolve(value) {\r\n    if (value instanceof Flow) {\r\n      return value;\r\n    }\r\n    else {\r\n      var flow = new Flow(function(resolve) {\r\n        resolve(value);\r\n      });\r\n      return flow;\r\n    }\r\n  }\r\n\r\n  static all(flows) {\r\n    return new Flow(function(resolve) {\r\n      var count = 0;\r\n\r\n      var args = [];\r\n\r\n      flows.forEach(function(flow) {\r\n        flow.then(function(d) {\r\n          ++count;\r\n          args.push(d);\r\n\r\n          if (count >= flows.length) {\r\n            resolve(args);\r\n          }\r\n        });\r\n      });\r\n    });\r\n  }\r\n\r\n}\n\n/**\r\n * @class phina.util.Ticker\r\n * tick management class\r\n * @extends phina.util.EventDispatcher\r\n */\r\nclass Ticker extends EventDispatcher {\r\n\r\n  // /** 経過フレーム数 */\r\n  // frame = null\r\n\r\n  // /** 1フレームの経過時間 */\r\n  // deltaTime = null\r\n  \r\n  // /** 全体の経過時間 */\r\n  // elapsedTime = null\r\n\r\n  /**\r\n   * @constructor\r\n   */\r\n  constructor() {\r\n    super();\r\n\r\n    this.fps = 30;\r\n    this.frame = 0;\r\n    this.deltaTime = 0;\r\n    this.elapsedTime = 0;\r\n    this.isPlaying = true;\r\n    this.runner = Ticker.runner;\r\n  }\r\n\r\n  tick(func) {\r\n    this.on('tick', func);\r\n  }\r\n\r\n  untick(func) {\r\n    this.off('tick', func);\r\n  }\r\n\r\n  run() {\r\n    var now = (new Date()).getTime();\r\n    // 1フレームに掛かった時間\r\n    this.deltaTime = now - this.currentTime;\r\n    // 全体の経過時間\r\n    this.elapsedTime = now - this.startTime;\r\n\r\n    var start = this.currentTime = now;\r\n    this.flare('tick');\r\n    var end = (new Date()).getTime();\r\n\r\n    // フレームを更新\r\n    this.frame += 1;\r\n\r\n    // calculate elapsed time\r\n    var elapsed = end-start;\r\n\r\n    // calculate next waiting time\r\n    var delay = Math.max(this.frameTime-elapsed, 0);\r\n\r\n    return delay;\r\n  }\r\n\r\n  start() {\r\n    var self = this;\r\n    this.isPlaying = true;\r\n    this.startTime = this.currentTime = (new Date()).getTime();\r\n    var fn = function() {\r\n      if (self.isPlaying) {\r\n        var delay = self.run();\r\n        self.runner(fn, delay);\r\n      }\r\n    };\r\n    fn();\r\n\r\n    return this;\r\n  }\r\n\r\n  resume() {\r\n    // TODO: \r\n  }\r\n\r\n  stop() {\r\n    this.isPlaying = false;\r\n    return this;\r\n  }\r\n\r\n  rewind() {\r\n    // TODO: \r\n  }\r\n\r\n  get fps() { return this._fps; }\r\n  set fps(v) {\r\n    this._fps = v;\r\n    this.frameTime = 1000/this._fps;\r\n  }\r\n\r\n  static runner(run, delay) {\r\n    setTimeout(run, delay);\r\n  }\r\n  \r\n}\n\n/**\r\n * @class phina.util.Random\r\n * # 乱数を扱うためのクラス\r\n * 乱数を扱うためのメソッドやプロパティを定義しているクラスです。\r\n */\r\nclass Random {\r\n\r\n  /**\r\n   * @property {Number} [seed = 1]\r\n   * 乱数のシードです。\r\n   */\r\n  // seed = 1\r\n\r\n  /**\r\n   * @constructor\r\n   * コンストラクタです。引数で {@link #seed} を設定できます。\r\n   * \r\n   * @param {Number} [seed = (Date.now()) || 1] シード\r\n   */\r\n  constructor(seed) {\r\n    this.seed = seed || (Date.now()) || 1;\r\n  }\r\n\r\n  /**\r\n   * @method random\r\n   * 0~1の乱数を返します。実行すると {@link #seed} は変わってしまいます。\r\n   * \r\n   * @return {Number} 0~1 の乱数\r\n   */\r\n  random() {\r\n    var seed = this.seed;\r\n    seed = seed ^ (seed << 13);\r\n    seed = seed ^ (seed >>> 17);\r\n    seed = (seed ^ (seed << 5));\r\n\r\n    this.seed = seed;\r\n\r\n    return (seed >>> 0) / phina.util.Random.MAX;\r\n  }\r\n\r\n  /**\r\n   * @method randint\r\n   * 指定された範囲内でランダムな整数値を返します。実行すると {@link #seed} は変わってしまいます。\r\n   * \r\n   * @param {Number} min 範囲の最小値\r\n   * @param {Number} max 範囲の最大値\r\n   * @return {Number} ランダムな整数値\r\n   */\r\n  randint(min, max) {\r\n    return Math.floor( this.random()*(max-min+1) ) + min;\r\n  }\r\n\r\n  /**\r\n   * @method randfloat\r\n   * 指定された範囲内でランダムな数値を返します。実行すると {@link #seed} は変わってしまいます。\r\n   * \r\n   * @param {Number} min 範囲の最小値\r\n   * @param {Number} max 範囲の最大値\r\n   * @return {Number} ランダムな数値\r\n   */\r\n  randfloat(min, max) {\r\n    return this.random()*(max-min)+min;\r\n  }\r\n\r\n  /**\r\n   * @method randbool\r\n   * ランダムな真偽値を返します。引数で百分率を指定できます。実行すると {@link #seed} は変わってしまいます。\r\n   * \r\n   * @param {Number} [perecent = 50] 真になる百分率\r\n   * @return {Boolean} ランダムな真偽値\r\n   */\r\n  randbool(percent) {\r\n    return this.random() < (percent === undefined ? 50 : percent) / 100;\r\n  }\r\n\r\n  /**\r\n   * @method randarray\r\n   * 任意の範囲でランダムな整数値を格納した任意の長さの配列を返します。実行すると {@link #seed} は変わってしまいます。\r\n   * \r\n   * @param {Number} [len = 100] 配列の長さ\r\n   * @param {Number} [min = 0] 範囲の最小値\r\n   * @param {Number} [max = 100] 範囲の最大値\r\n   * @return {Number} ランダムな整数値の入った配列\r\n   */\r\n  randarray(len, min, max) {\r\n    len = len || 100;\r\n    min = min || 0;\r\n    max = max || 100;\r\n\r\n    return (len).map(function() {\r\n      return this.randint(min, max);\r\n    }, this);\r\n  }\r\n\r\n  get seed() { return this._seed; }\r\n  set seed(v) { this._seed = (v >>> 0) || 1; }\r\n\r\n  /**\r\n   * @method getSeed \r\n   * {@link #seed} の値を取得します。\r\n   * \r\n   * @return {Number} シード\r\n   * @static\r\n   */\r\n  static getSeed() {\r\n    return this.seed;\r\n  }\r\n\r\n  /**\r\n   * @method setSeed\r\n   * {@link #seed} の値をセットします。\r\n   * \r\n   * @param {Number} [seed = 1] シード\r\n   * @static\r\n   * @chainable\r\n   */\r\n  static setSeed(seed) {\r\n    this.seed = (seed >>> 0) || 1;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @method random\r\n   * 0~1の乱数を返します。実行すると {@link #seed} は変わってしまいます。\r\n   * インスタンスメソッドの {@link #random} と同じです。\r\n   * \r\n   * @return {Number} 0~1 の乱数\r\n   * @static\r\n   */\r\n  static random() {\r\n    this.seed = this.xor32(this.seed);\r\n    return (this.seed >>> 0) / phina.util.Random.MAX;\r\n  }\r\n\r\n  /**\r\n   * @method randint\r\n   * 指定された範囲内でランダムな整数値を返します。実行すると {@link #seed} は変わってしまいます。\r\n   * インスタンスメソッドの {@link #randint} と同じです。\r\n   * \r\n   * @param {Number} min 範囲の最小値\r\n   * @param {Number} max 範囲の最大値\r\n   * @return {Number} ランダムな整数値\r\n   * @static\r\n   */\r\n  static randint(min, max) {\r\n    return phina.global.Math.floor( this.random()*(max-min+1) ) + min;\r\n  }\r\n\r\n  /**\r\n   * @method randfloat\r\n   * 指定された範囲内でランダムな数値を返します。実行すると {@link #seed} は変わってしまいます。\r\n   * インスタンスメソッドの {@link #randfloat} と同じです。\r\n   * \r\n   * @param {Number} min 範囲の最小値\r\n   * @param {Number} max 範囲の最大値\r\n   * @return {Number} ランダムな数値\r\n   * @static\r\n   */\r\n  static randfloat(min, max) {\r\n    return this.random()*(max-min)+min;\r\n  }\r\n\r\n  /**\r\n   * @method randbool\r\n   * ランダムな真偽値を返します。引数で百分率を指定できます。実行すると {@link #seed} は変わってしまいます。\r\n   * インスタンスメソッドの {@link #randbool} と同じです。\r\n   * \r\n   * @param {Number} [perecent = 50] 真になる百分率\r\n   * @return {Number} ランダムな真偽値\r\n   * @static\r\n   */\r\n  static randbool(perecent) {\r\n    return this.randint(0, 99) < (perecent || 50);\r\n  }\r\n\r\n  /**\r\n   * @method randarray\r\n   * 任意の範囲でランダムな整数値を格納した任意の長さの配列を返します。実行すると {@link #seed} は変わってしまいます。\r\n   * インスタンスメソッドの {@link #randarray} と同じです。\r\n   * \r\n   * @param {Number} [len = 100] 配列の長さ\r\n   * @param {Number} [min = 0] 範囲の最小値\r\n   * @param {Number} [max = 100] 範囲の最大値\r\n   * @return {Number} ランダムな整数値の入った配列\r\n   * @static\r\n   */\r\n  static randarray(len, min, max) {\r\n    len = len || 100;\r\n    min = min || 0;\r\n    max = max || 100;\r\n\r\n    return (len).map(function() {\r\n      return this.randint(min, max);\r\n    }, this);\r\n  }\r\n\r\n\r\n  /**\r\n   * @method xor32\r\n   * xorshift を用いて疑似乱数列を生成します。\r\n   * \r\n   * @param {Number} seed\r\n   * @return {Number} 疑似乱数列\r\n   * @static\r\n   */\r\n  static xor32(seed) {\r\n    seed = seed ^ (seed << 13);\r\n    seed = seed ^ (seed >>> 17);\r\n    seed = (seed ^ (seed << 5));\r\n\r\n    return seed;\r\n  }\r\n\r\n  /**\r\n   * @method uuid\r\n   * uuid を生成して返します。\r\n   * \r\n   * @return {String} uuid\r\n   * @static\r\n   */\r\n  //http://stackoverflow.com/questions/105034/create-guid-uuid-in-javascript\r\n  static uuid() {\r\n    var d = new Date().getTime();\r\n    if(phina.global.performance && typeof phina.global.performance.now === 'function'){\r\n      d += performance.now(); //use high-precision timer if available\r\n    }\r\n    var uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\r\n      var r = (d + Math.random()*16)%16 | 0;\r\n      d = Math.floor(d/16);\r\n      return (c=='x' ? r : (r&0x3|0x8)).toString(16);\r\n    });\r\n    return uuid;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @property {Number} MAX\r\n * 内部的に使用される定数です。\r\n * \r\n * @static\r\n */\r\nRandom.MAX = 4294967295;\r\n\r\n/**\r\n * @property {Number} [seed = (Date.now())] シード\r\n * static メソッドの乱数のシードです。\r\n * \r\n * @static\r\n */\r\nRandom.seed = (Date.now());\r\n\r\n\r\n// prototype拡張はしない\r\n// Math.$method(\"randint\", function(min, max) {\r\n//   return phina.util.Random.randint(min, max);\r\n// });\r\n\r\n// Math.$method(\"randfloat\", function(min, max) {\r\n//   return phina.util.Random.randfloat(min, max);\r\n// });\n\n/**\r\n * @class phina.util.Support\r\n * \r\n */\r\nclass Support {}Support.canvas = !!phina$1.global.CanvasRenderingContext2D;\r\nSupport.webGL = (function() {\r\n  return !!phina$1.global.CanvasRenderingContext2D && !!document.createElement('canvas').getContext('webgl');\r\n})();\r\nSupport.webAudio = !!phina$1.global.AudioContext || !!phina$1.global.webkitAudioContext || !!phina$1.global.mozAudioContext;\n\n/**\r\n * @class phina.util.Grid\r\n */\r\nclass Grid {\r\n\r\n  // /** 幅 */\r\n  // width: 640,\r\n  // /** 列数 */\r\n  // columns: 12,\r\n  // /** ループ */\r\n  // loop: false,\r\n  // /** オフセット値 */\r\n  // offset: 0,\r\n\r\n  /**\r\n   * @constructor\r\n   */\r\n  constructor() {\r\n    if (typeof arguments[0] === 'object') {\r\n      var param = arguments[0];\r\n      var width = param.width || 640;\r\n      var columns = param.columns || 12;\r\n      var loop = param.loop || false;\r\n      var offset = param.offset || 0;\r\n    }\r\n    else {\r\n      var width   = arguments[0] || 640;\r\n      var columns = arguments[1] || 12;\r\n      var loop    = arguments[2] || false;\r\n      var offset = arguments[3] || 0;\r\n    }\r\n\r\n    this.width = width;\r\n    this.columns = columns;\r\n    this.loop = loop;\r\n    this.offset = offset;\r\n    this.unitWidth = this.width/this.columns;\r\n  }\r\n\r\n  // スパン指定で値を取得(負数もok)\r\n  span(index) {\r\n    if (this.loop) {\r\n      index += this.columns;\r\n      index %= this.columns;\r\n    }\r\n    return this.unitWidth * index + this.offset;\r\n  }\r\n\r\n  //\r\n  unit() {\r\n    return this.unitWidth;\r\n  }\r\n\r\n  center(offset) {\r\n    var index = offset || 0;\r\n    return (this.width/2) + (this.unitWidth * index);\r\n  }\r\n\r\n}\n\n/**\r\n * @class global.Math\r\n * # 拡張した Math クラス\r\n * 数学的な処理を扱う Math クラスを拡張しています。\r\n * \r\n * 全てstaticメンバーです。\r\n */\r\n\r\n/**\r\n * @static\r\n * @method clamp\r\n * 指定した値を指定した範囲に収めた結果を返します。\r\n *\r\n * ### Example\r\n *     Math.clamp(120, 0, 640); // => 120\r\n *     Math.clamp(980, 0, 640); // => 640\r\n *     Math.clamp(-80, 0, 640); // => 0\r\n *\r\n * @param {Number} value 値\r\n * @param {Number} min  範囲の下限\r\n * @param {Number} max  範囲の上限\r\n * @return {Number} 丸めた結果の値\r\n */\r\nfunction clamp(value, min, max) {\r\n  return (value < min) ? min : ( (value > max) ? max : value );\r\n}\r\n\r\n/**\r\n * @property DEG_TO_RAD\r\n * 度をラジアンに変換するための定数です。\r\n */\r\nvar DEG_TO_RAD = Math.PI/180;\n\n/**\r\n * @class phina.util.Tween\r\n * @extends phina.util.EventDispatcher\r\n * \r\n */\r\nclass Tween extends EventDispatcher {\r\n\r\n  /**\r\n   * @constructor\r\n   */\r\n  constructor(target) {\r\n    super();\r\n\r\n    this.time = 0;\r\n  }\r\n\r\n  fromTo(target, beginProps, finishProps, duration, easing) {\r\n    this.target = target;\r\n    this.beginProps = beginProps;\r\n    this.finishProps = finishProps;\r\n    this.duration = duration || 1000;\r\n    this.easing = easing;\r\n\r\n    // setup\r\n    this.changeProps = {};\r\n    for (var key in beginProps) {\r\n        this.changeProps[key] = finishProps[key] - beginProps[key];\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  to(target, finishProps, duration, easing) {\r\n    var beginProps = {};\r\n\r\n    for (var key in finishProps) {\r\n      beginProps[key] = target[key];\r\n    }\r\n\r\n    this.fromTo(target, beginProps, finishProps, duration, easing);\r\n\r\n    return this;\r\n  }\r\n\r\n  from(target, beginProps, duration, easing) {\r\n      var finishProps = {};\r\n\r\n      for (var key in beginProps) {\r\n        finishProps[key] = target[key];\r\n        target[key] = beginProps[key];\r\n      }\r\n\r\n      this.fromTo(target, beginProps, finishProps, duration, easing);\r\n\r\n      return this;\r\n  }\r\n\r\n  by(target, props, duration, easing) {\r\n    var beginProps = {};\r\n    var finishProps = {};\r\n\r\n    for (var key in props) {\r\n      beginProps[key] = target[key];\r\n      finishProps[key] = target[key] + props[key];\r\n    }\r\n\r\n    this.fromTo(target, beginProps, finishProps, duration, easing);\r\n\r\n    return this;\r\n  }\r\n\r\n  yoyo() {\r\n    var temp = this.beginProps;\r\n    this.beginProps = this.finishProps;\r\n    this.finishProps = temp;\r\n    // this.changeProps.forIn(function(key, value, index) {\r\n    forIn.call(this.changeProps, function(key, value, index) {\r\n      this.changeProps[key] = -value;\r\n      this.target[key] = this.beginProps[key];\r\n    }, this);\r\n    // TODO: easing も反転させる\r\n    // this.easing = easing;\r\n    return this;\r\n  }\r\n\r\n  gain(time) {\r\n    this.seek(this.time + time);\r\n  }\r\n\r\n  forward(time) {\r\n    this.seek(this.time + time);\r\n  }\r\n\r\n  backward(time) {\r\n    this.seek(this.time - time);\r\n  }\r\n\r\n  seek(time) {\r\n    // this.time = Math.clamp(time, 0, this.duration);\r\n    this.time = clamp(time, 0, this.duration);\r\n\r\n    // this.beginProps.forIn(function(key, value) {\r\n    forIn.call(this.beginProps, function(key, value) {\r\n      var v = this.easing(this.time, value, this.changeProps[key], this.duration);\r\n      this.target[key] = v;\r\n    }, this);\r\n\r\n    return this;\r\n  }\r\n\r\n  get easing() { return this._easing; }\r\n  set easing(v) {\r\n    this._easing = Tween.EASING[v] || Tween.EASING.default;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @static\r\n * イージング\r\n * ### Reference\r\n * - <http://coderepos.org/share/wiki/JSTweener>\r\n * - <http://coderepos.org/share/browser/lang/javascript/jstweener/trunk/src/JSTweener.js>\r\n * - <http://gsgd.co.uk/sandbox/jquery/easing/jquery.easing.1.3.js>\r\n * - <http://hosted.zeh.com.br/tweener/docs/en-us/misc/transitions.html>\r\n */\r\nTween.EASING = {\r\n\r\n  /** default */\r\n  \"default\": function(t, b, c, d) {\r\n    return c*t/d + b;\r\n  },\r\n  /** linear */\r\n  linear: function(t, b, c, d) {\r\n    return c*t/d + b;\r\n  },\r\n  /** swing */\r\n  swing: function(t, b, c, d) {\r\n    return -c *(t/=d)*(t-2) + b;\r\n  },\r\n  /** easeInQuad */\r\n  easeInQuad: function(t, b, c, d) {\r\n    return c*(t/=d)*t + b;\r\n  },\r\n  /** easeOutQuad */\r\n  easeOutQuad: function(t, b, c, d) {\r\n    return -c *(t/=d)*(t-2) + b;\r\n  },\r\n  /** easeInOutQuad */\r\n  easeInOutQuad: function(t, b, c, d) {\r\n    if((t/=d/2) < 1) return c/2*t*t + b;\r\n    return -c/2 *((--t)*(t-2) - 1) + b;\r\n  },\r\n  /** defeInCubic */\r\n  easeInCubic: function(t, b, c, d) {\r\n    return c*(t/=d)*t*t + b;\r\n  },\r\n  /** easeOutCubic */\r\n  easeOutCubic: function(t, b, c, d) {\r\n    return c*((t=t/d-1)*t*t + 1) + b;\r\n  },\r\n  /** easeInOutCubic */\r\n  easeInOutCubic: function(t, b, c, d) {\r\n    if((t/=d/2) < 1) return c/2*t*t*t + b;\r\n    return c/2*((t-=2)*t*t + 2) + b;\r\n  },\r\n  /** easeOutInCubic */\r\n  easeOutInCubic: function(t, b, c, d) {\r\n    if(t < d/2) return Tween.EASING.easeOutCubic(t*2, b, c/2, d);\r\n    return Tween.EASING.easeInCubic((t*2)-d, b+c/2, c/2, d);\r\n  },\r\n  /** easeInQuart */\r\n  easeInQuart: function(t, b, c, d) {\r\n    return c*(t/=d)*t*t*t + b;\r\n  },\r\n  /** easeOutQuart */\r\n  easeOutQuart: function(t, b, c, d) {\r\n    return -c *((t=t/d-1)*t*t*t - 1) + b;\r\n  },\r\n  /** easeInOutQuart */\r\n  easeInOutQuart: function(t, b, c, d) {\r\n    if((t/=d/2) < 1) return c/2*t*t*t*t + b;\r\n    return -c/2 *((t-=2)*t*t*t - 2) + b;\r\n  },\r\n  /** easeOutInQuart */\r\n  easeOutInQuart: function(t, b, c, d) {\r\n    if(t < d/2) return Tween.EASING.easeOutQuart(t*2, b, c/2, d);\r\n    return Tween.EASING.easeInQuart((t*2)-d, b+c/2, c/2, d);\r\n  },\r\n  /** easeInQuint */\r\n  easeInQuint: function(t, b, c, d) {\r\n    return c*(t/=d)*t*t*t*t + b;\r\n  },\r\n  /** easeOutQuint */\r\n  easeOutQuint: function(t, b, c, d) {\r\n    return c*((t=t/d-1)*t*t*t*t + 1) + b;\r\n  },\r\n  /** easeInOutQuint */\r\n  easeInOutQuint: function(t, b, c, d) {\r\n    if((t/=d/2) < 1) return c/2*t*t*t*t*t + b;\r\n    return c/2*((t-=2)*t*t*t*t + 2) + b;\r\n  },\r\n  /** easeOutInQuint */\r\n  easeOutInQuint: function(t, b, c, d) {\r\n    if(t < d/2) return Tween.EASING.easeOutQuint(t*2, b, c/2, d);\r\n    return Tween.EASING.easeInQuint((t*2)-d, b+c/2, c/2, d);\r\n  },\r\n  /** easeInSine */\r\n  easeInSine: function(t, b, c, d) {\r\n    return -c * Math.cos(t/d *(Math.PI/2)) + c + b;\r\n  },\r\n  /** easeOutSine */\r\n  easeOutSine: function(t, b, c, d) {\r\n    return c * Math.sin(t/d *(Math.PI/2)) + b;\r\n  },\r\n  /** easeInOutSine */\r\n  easeInOutSine: function(t, b, c, d) {\r\n    return -c/2 *(Math.cos(Math.PI*t/d) - 1) + b;\r\n  },\r\n  /** easeOutInSine */\r\n  easeOutInSine: function(t, b, c, d) {\r\n    if(t < d/2) return Tween.EASING.easeOutSine(t*2, b, c/2, d);\r\n    return Tween.EASING.easeInSine((t*2)-d, b+c/2, c/2, d);\r\n  },\r\n  /** easeInExpo */\r\n  easeInExpo: function(t, b, c, d) {\r\n    return (t==0) ? b : c * Math.pow(2, 10 *(t/d - 1)) + b - c * 0.001;\r\n  },\r\n  /** easeOutExpo */\r\n  easeOutExpo: function(t, b, c, d) {\r\n    return (t==d) ? b+c : c * 1.001 *(-Math.pow(2, -10 * t/d) + 1) + b;\r\n  },\r\n  /** easeInOutExpo */\r\n  easeInOutExpo: function(t, b, c, d) {\r\n    if(t==0) return b;\r\n    if(t==d) return b+c;\r\n    if((t/=d/2) < 1) return c/2 * Math.pow(2, 10 *(t - 1)) + b - c * 0.0005;\r\n    return c/2 * 1.0005 *(-Math.pow(2, -10 * --t) + 2) + b;\r\n  },\r\n  /** easeOutInExpo */\r\n  easeOutInExpo: function(t, b, c, d) {\r\n    if(t < d/2) return Tween.EASING.easeOutExpo(t*2, b, c/2, d);\r\n    return Tween.EASING.easeInExpo((t*2)-d, b+c/2, c/2, d);\r\n  },\r\n  /** easeInCirc */\r\n  easeInCirc: function(t, b, c, d) {\r\n    return -c *(Math.sqrt(1 -(t/=d)*t) - 1) + b;\r\n  },\r\n  /** easeOutCirc */\r\n  easeOutCirc: function(t, b, c, d) {\r\n    return c * Math.sqrt(1 -(t=t/d-1)*t) + b;\r\n  },\r\n  /** easeInOutCirc */\r\n  easeInOutCirc: function(t, b, c, d) {\r\n    if((t/=d/2) < 1) return -c/2 *(Math.sqrt(1 - t*t) - 1) + b;\r\n    return c/2 *(Math.sqrt(1 -(t-=2)*t) + 1) + b;\r\n  },\r\n  /** easeOutInCirc */\r\n  easeOutInCirc: function(t, b, c, d) {\r\n    if(t < d/2) return Tween.EASING.easeOutCirc(t*2, b, c/2, d);\r\n    return Tween.EASING.easeInCirc((t*2)-d, b+c/2, c/2, d);\r\n  },\r\n  /** easeInElastic */\r\n  easeInElastic: function(t, b, c, d, a, p) {\r\n    var s;\r\n    if(t==0) return b;  if((t/=d)==1) return b+c;  if(!p) p=d*.3;\r\n    if(!a || a < Math.abs(c)) { a=c; s=p/4; } else s = p/(2*Math.PI) * Math.asin(c/a);\r\n    return -(a*Math.pow(2,10*(t-=1)) * Math.sin((t*d-s)*(2*Math.PI)/p )) + b;\r\n  },\r\n  /** easeOutElastic */\r\n  easeOutElastic: function(t, b, c, d, a, p) {\r\n    var s;\r\n    if(t==0) return b;  if((t/=d)==1) return b+c;  if(!p) p=d*.3;\r\n    if(!a || a < Math.abs(c)) { a=c; s=p/4; } else s = p/(2*Math.PI) * Math.asin(c/a);\r\n    return(a*Math.pow(2,-10*t) * Math.sin((t*d-s)*(2*Math.PI)/p ) + c + b);\r\n  },\r\n  /** easeInOutElastic */\r\n  easeInOutElastic: function(t, b, c, d, a, p) {\r\n    var s;\r\n    if(t==0) return b;  if((t/=d/2)==2) return b+c;  if(!p) p=d*(.3*1.5);\r\n    if(!a || a < Math.abs(c)) { a=c; s=p/4; }       else s = p/(2*Math.PI) * Math.asin(c/a);\r\n    if(t < 1) return -.5*(a*Math.pow(2,10*(t-=1)) * Math.sin((t*d-s)*(2*Math.PI)/p )) + b;\r\n    return a*Math.pow(2,-10*(t-=1)) * Math.sin((t*d-s)*(2*Math.PI)/p )*.5 + c + b;\r\n  },\r\n  /** easeOutInElastic */\r\n  easeOutInElastic: function(t, b, c, d, a, p) {\r\n    if(t < d/2) return Tween.EASING.easeOutElastic(t*2, b, c/2, d, a, p);\r\n    return Tween.EASING.easeInElastic((t*2)-d, b+c/2, c/2, d, a, p);\r\n  },\r\n  /** easeInBack */\r\n  easeInBack: function(t, b, c, d, s) {\r\n    if(s == undefined) s = 1.70158;\r\n    return c*(t/=d)*t*((s+1)*t - s) + b;\r\n  },\r\n  /** easeOutBack */\r\n  easeOutBack: function(t, b, c, d, s) {\r\n    if(s == undefined) s = 1.70158;\r\n    return c*((t=t/d-1)*t*((s+1)*t + s) + 1) + b;\r\n  },\r\n  /** easeInOutBack */\r\n  easeInOutBack: function(t, b, c, d, s) {\r\n    if(s == undefined) s = 1.70158;\r\n    if((t/=d/2) < 1) return c/2*(t*t*(((s*=(1.525))+1)*t - s)) + b;\r\n    return c/2*((t-=2)*t*(((s*=(1.525))+1)*t + s) + 2) + b;\r\n  },\r\n  /** easeOutInBack */\r\n  easeOutInBack: function(t, b, c, d, s) {\r\n    if(t < d/2) return Tween.EASING.easeOutBack(t*2, b, c/2, d, s);\r\n    return Tween.EASING.easeInBack((t*2)-d, b+c/2, c/2, d, s);\r\n  },\r\n  /** easeInBounce */\r\n  easeInBounce: function(t, b, c, d) {\r\n    return c - Tween.EASING.easeOutBounce(d-t, 0, c, d) + b;\r\n  },\r\n  /** easeOutBounce */\r\n  easeOutBounce: function(t, b, c, d) {\r\n    if((t/=d) <(1/2.75)) {\r\n      return c*(7.5625*t*t) + b;\r\n    } else if(t <(2/2.75)) {\r\n      return c*(7.5625*(t-=(1.5/2.75))*t + .75) + b;\r\n    } else if(t <(2.5/2.75)) {\r\n      return c*(7.5625*(t-=(2.25/2.75))*t + .9375) + b;\r\n    } else {\r\n      return c*(7.5625*(t-=(2.625/2.75))*t + .984375) + b;\r\n    }\r\n  },\r\n  /** easeInOutBounce */\r\n  easeInOutBounce: function(t, b, c, d) {\r\n    if(t < d/2) return Tween.EASING.easeInBounce(t*2, 0, c, d) * .5 + b;\r\n    else return Tween.EASING.easeOutBounce(t*2-d, 0, c, d) * .5 + c*.5 + b;\r\n  },\r\n  /** easeOutInBounce */\r\n  easeOutInBounce: function(t, b, c, d) {\r\n    if(t < d/2) return Tween.EASING.easeOutBounce(t*2, b, c/2, d);\r\n    return Tween.EASING.easeInBounce((t*2)-d, b+c/2, c/2, d);\r\n  }\r\n\r\n};\n\n/**\r\n * @class phina.util.QueryString\r\n * \r\n */\r\nclass QueryString {\r\n\r\n  static parse(text, sep, eq, isDecode) {\r\n    text = text || location.search.substr(1);\r\n    sep = sep || '&';\r\n    eq = eq || '=';\r\n    var decode = (isDecode) ? decodeURIComponent : function(a) { return a; };\r\n    return text.split(sep).reduce(function(obj, v) {\r\n      var pair = v.split(eq);\r\n      obj[pair[0]] = decode(pair[1]);\r\n      return obj;\r\n    }, {});\r\n  }\r\n\r\n  static stringify(value, sep, eq, isEncode) {\r\n    sep = sep || '&';\r\n    eq = eq || '=';\r\n    var encode = (isEncode) ? encodeURIComponent : function(a) { return a; };\r\n    return Object.keys(value).map(function(key) {\r\n      return key + eq + encode(value[key]);\r\n    }).join(sep);\r\n  }\r\n  \r\n}\n\n/**\r\n * @class global.String\r\n * # 拡張した String クラス\r\n */\r\n\r\n/**\r\n * @method format\r\n * フォーマットに引数を適用した文字列を返します。\r\n *\r\n * 引数がオブジェクトの場合、\"{プロパティ名}\" がオブジェクトのプロパティの値に置き換わります。\r\n * 指定したプロパティがオブジェクトにない場合は空文字列になります。\r\n *\r\n * 第1引数がオブジェクトでなかった場合、\"{整数}\" が各引数に置き換わります。\r\n * 指定した値の引数がなかった場合は空文字列になります。\r\n *\r\n * ### Example\r\n *     obj = {r: 128, g: 0, b: 255};\r\n *     \"color: rgb({r}, {g}, {b});\".format(obj); // => \"color: rgb(128, 0, 255);\"\r\n *\r\n *     \"{0} + {1} = {2}\".format(5, 8, (5+8)); // => \"5 + 8 = 13\"\r\n *\r\n * @param {Object} obj パラメータとなるオブジェクト\r\n * @return {String} 生成した文字列\r\n */\r\nfunction format(arg) {\r\n// String.prototype.$method(\"format\", function(arg) {\r\n  // 置換ファンク\r\n  var rep_fn = undefined;\r\n  \r\n  // オブジェクトの場合\r\n  if (typeof arg == \"object\") {\r\n    /** @ignore */\r\n    rep_fn = function(m, k) {\r\n      if (arg[k] === undefined) {\r\n        return '';\r\n      }\r\n      else {\r\n        return arg[k];\r\n      }\r\n    };\r\n  }\r\n  // 複数引数だった場合\r\n  else {\r\n    var args = arguments;\r\n    /** @ignore */\r\n    rep_fn = function(m, k) {\r\n      var v = args[ parseInt(k) ];\r\n      if (v !== undefined && v !== null) {\r\n        return v;\r\n      }\r\n      else {\r\n        return '';\r\n      }\r\n    };\r\n  }\r\n  \r\n  return this.replace( /\\{(\\w+)\\}/g, rep_fn );\r\n}\r\n\r\n\r\n/**\r\n * @method each\r\n * 各文字を順番に渡しながら関数を繰り返し実行します。\r\n *\r\n * ### Example\r\n *     str = 'abc';\r\n *     str.each(function(ch) {\r\n *       console.log(ch);\r\n *     });\r\n *     // => 'a'\r\n *     //    'b'\r\n *     //    'c'\r\n *\r\n * @param {Function} callback 各要素に対して実行するコールバック関数\r\n * @param {Object} [self=this] callback 内で this として参照される値\r\n */\r\nfunction each$1() {\r\n// String.prototype.$method(\"each\", function() {\r\n  Array.prototype.forEach.apply(this, arguments);\r\n  return this;\r\n}\n\n/**\r\n * @class phina.util.Color\r\n * カラークラス\r\n */\r\nclass Color {\r\n\r\n  // /** R値 */\r\n  // r: 255,\r\n  // /** G値 */\r\n  // g: 255,\r\n  // /** B値 */\r\n  // b: 255,\r\n  // /** A値 */\r\n  // a: 1.0,\r\n\r\n  /**\r\n   * 初期化\r\n   */\r\n  constructor(r, g, b, a) {\r\n    this.r = 255;\r\n    this.g = 255;\r\n    this.b = 255;\r\n    this.a = 1.0;\r\n    this.set.apply(this, arguments);\r\n  }\r\n\r\n  /**\r\n   * セッター.\r\n   */\r\n  set(r, g, b, a) {\r\n    this.r = r;\r\n    this.g = g;\r\n    this.b = b;\r\n    this.a = (a !== undefined) ? a : 1.0;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * 数値によるセッター.\r\n   */\r\n  setFromNumber(r, g, b, a) {\r\n    this.r = r;\r\n    this.g = g;\r\n    this.b = b;\r\n    this.a = (a !== undefined) ? a : 1.0;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * 配列によるセッター\r\n   */\r\n  setFromArray(arr) {\r\n    return this.set.apply(this, arr);\r\n  }\r\n\r\n  /**\r\n   * オブジェクトによるセッター\r\n   */\r\n  setFromObject(obj) {\r\n    return this.set(obj.r, obj.g, obj.b, obj.a);\r\n  }\r\n\r\n  /**\r\n   * 文字列によるセッター\r\n   */\r\n  setFromString(str) {\r\n    var color = Color.stringToNumber(str);\r\n    return this.set(color[0], color[1], color[2], color[3]);\r\n  }\r\n\r\n  /**\r\n   * 賢いセッター\r\n   */\r\n  setSmart() {\r\n    var arg = arguments[0];\r\n    if (arguments.length >= 3) {\r\n      this.set(arguments.r, arguments.g, arguments.b, arguments.a);\r\n    } else if (arg instanceof Array) {\r\n      this.setFromArray(arg);\r\n    } else if (arg instanceof Object) {\r\n      this.setFromObject(arg);\r\n    } else if (typeof(arg) == \"string\") {\r\n      this.setFromString(arg);\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * CSS 用 16進数文字列に変換\r\n   */\r\n  toStyleAsHex() {\r\n    return format.call(\"#{0}{1}{2}\",\r\n    // return \"#{0}{1}{2}\".format(\r\n      this.r.toString(16).padding(2, '0'),\r\n      this.g.toString(16).padding(2, '0'),\r\n      this.b.toString(16).padding(2, '0')\r\n    );\r\n  }\r\n\r\n  /**\r\n   * CSS 用 RGB文字列に変換\r\n   */\r\n  toStyleAsRGB() {\r\n    return format.call(\"rgb({r},{g},{b})\", {\r\n    // return \"rgb({r},{g},{b})\".format({\r\n      r: ~~this.r,\r\n      g: ~~this.g,\r\n      b: ~~this.b\r\n    });\r\n  }\r\n\r\n\r\n  /**\r\n   * CSS 用 RGBA文字列に変換\r\n   */\r\n  toStyleAsRGBA() {\r\n    return format.call(\"rgba({r},{g},{b},{a})\", {\r\n    // return \"rgba({r},{g},{b},{a})\".format({\r\n      r: ~~this.r,\r\n      g: ~~this.g,\r\n      b: ~~this.b,\r\n      a: this.a\r\n    });\r\n  }\r\n\r\n  /**\r\n   * CSS 用 RGBA 文字列に変換\r\n   */\r\n  toStyle() {\r\n    return format.call(\"rgba({r},{g},{b},{a})\", {\r\n    // return \"rgba({r},{g},{b},{a})\".format({\r\n      r: ~~this.r,\r\n      g: ~~this.g,\r\n      b: ~~this.b,\r\n      a: this.a\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @static\r\n   * @member phina.util.Color\r\n   * @method strToNum\r\n   */\r\n  static strToNum(str) {\r\n    return this.stringToNumber(str);\r\n  }\r\n\r\n  static stringToNumber(str) {\r\n    var value = null;\r\n    var type = null;\r\n\r\n    if (str[0] === '#') {\r\n      type = (str.length == 4) ? \"hex111\" : \"hex222\";\r\n    } else if (str[0] === 'r' && str[1] === 'g' && str[2] === 'b') {\r\n      type = (str[3] == 'a') ? \"rgba\" : \"rgb\";\r\n    } else if (str[0] === 'h' && str[1] === 's' && str[2] === 'l') {\r\n      type = (str[3] == 'a') ? \"hsla\" : \"hsl\";\r\n    }\r\n\r\n    if (type) {\r\n      var match_set = MATCH_SET_LIST[type];\r\n      var m = str.match(match_set.reg);\r\n      value = match_set.exec(m);\r\n    } else if (Color.COLOR_LIST[str]) {\r\n      value = Color.COLOR_LIST[str];\r\n    }\r\n\r\n    return value;\r\n  }\r\n\r\n  /**\r\n   * @static\r\n   * @method\r\n   * hsl を rgb に変換\r\n   */\r\n  static HSLtoRGB(h, s, l) {\r\n    var r, g, b;\r\n\r\n    h %= 360;\r\n    h += 360;\r\n    h %= 360;\r\n    s *= 0.01;\r\n    l *= 0.01;\r\n\r\n    if (s === 0) {\r\n      var l = Math.round(l * 255);\r\n      return [l, l, l];\r\n    }\r\n    var m2 = (l < 0.5) ? l * (1 + s) : l + s - l * s;\r\n    var m1 = l * 2 - m2;\r\n\r\n    // red\r\n    var temp = (h + 120) % 360;\r\n    if (temp < 60) {\r\n      r = m1 + (m2 - m1) * temp / 60;\r\n    } else if (temp < 180) {\r\n      r = m2;\r\n    } else {\r\n      r = m1;\r\n    }\r\n\r\n    // green\r\n    temp = h;\r\n    if (temp < 60) {\r\n      g = m1 + (m2 - m1) * temp / 60;\r\n    } else if (temp < 180) {\r\n      g = m2;\r\n    } else if (temp < 240) {\r\n      g = m1 + (m2 - m1) * (240 - temp) / 60;\r\n    } else {\r\n      g = m1;\r\n    }\r\n\r\n    // blue\r\n    temp = ((h - 120) + 360) % 360;\r\n    if (temp < 60) {\r\n      b = m1 + (m2 - m1) * temp / 60;\r\n    } else if (temp < 180) {\r\n      b = m2;\r\n    } else if (temp < 240) {\r\n      b = m1 + (m2 - m1) * (240 - temp) / 60;\r\n    } else {\r\n      b = m1;\r\n    }\r\n\r\n    return [\r\n      parseInt(r * 255),\r\n      parseInt(g * 255),\r\n      parseInt(b * 255)\r\n    ];\r\n  }\r\n\r\n  /**\r\n   * @static\r\n   * @method\r\n   * hsla を rgba に変換\r\n   */\r\n  static HSLAtoRGBA(h, s, l, a) {\r\n    var temp = Color.HSLtoRGB(h, s, l);\r\n    temp[3] = a;\r\n    return temp;\r\n  }\r\n\r\n  /**\r\n   * @static\r\n   * @method\r\n   * rgb 値を作成\r\n   */\r\n  static createStyleRGB(r, g, b) {\r\n    return \"rgba(\" + r + \",\" + g + \",\" + b + \")\";\r\n  }\r\n\r\n  /**\r\n   * @static\r\n   * @method\r\n   * rgba 値を作成\r\n   */\r\n  static createStyleRGBA(r, g, b, a) {\r\n    return \"rgba(\" + r + \",\" + g + \",\" + b + \",\" + a + \")\";\r\n  }\r\n\r\n  /**\r\n   * @static\r\n   * @method\r\n   * hsl 値を作成\r\n   */\r\n  static createStyleHSL(h, s, l) {\r\n    return \"hsl(\" + h + \",\" + s + \"%,\" + l + \"%)\";\r\n  }\r\n\r\n  /**\r\n   * @static\r\n   * @method\r\n   * hsla 値を作成\r\n   */\r\n  static createStyleHSLA(h, s, l, a) {\r\n    return \"hsla(\" + h + \",\" + s + \"%,\" + l + \"%,\" + a + \")\";\r\n  }\r\n\r\n}\r\n\r\n// static props\r\n/**\r\n * @static\r\n * カラーリスト\r\n */\r\nColor.COLOR_LIST = {\r\n  /** @property black */\r\n  \"black\": [0x00, 0x00, 0x00],\r\n  /** @property silver */\r\n  \"silver\": [0xc0, 0xc0, 0xc0],\r\n  /** @property gray */\r\n  \"gray\": [0x80, 0x80, 0x80],\r\n  /** @property white */\r\n  \"white\": [0xff, 0xff, 0xff],\r\n  /** @property maroon */\r\n  \"maroon\": [0x80, 0x00, 0x00],\r\n  /** @property red */\r\n  \"red\": [0xff, 0x00, 0x00],\r\n  /** @property purple */\r\n  \"purple\": [0x80, 0x00, 0x80],\r\n  /** @property fuchsia */\r\n  \"fuchsia\": [0xff, 0x00, 0xff],\r\n  /** @property green */\r\n  \"green\": [0x00, 0x80, 0x00],\r\n  /** @property lime */\r\n  \"lime\": [0x00, 0xff, 0x00],\r\n  /** @property olive */\r\n  \"olive\": [0x80, 0x80, 0x00],\r\n  /** @property yellow */\r\n  \"yellow\": [0xff, 0xff, 0x00],\r\n  /** @property navy */\r\n  \"navy\": [0x00, 0x00, 0x80],\r\n  /** @property blue */\r\n  \"blue\": [0x00, 0x00, 0xff],\r\n  /** @property teal */\r\n  \"teal\": [0x00, 0x80, 0x80],\r\n  /** @property aqua */\r\n  \"aqua\": [0x00, 0xff, 0xff],\r\n};\r\n\r\n\r\nvar MATCH_SET_LIST = {\r\n  \"hex111\": {\r\n    reg: /^#(\\w{1})(\\w{1})(\\w{1})$/,\r\n    exec: function(m) {\r\n      return [\r\n        parseInt(m[1] + m[1], 16),\r\n        parseInt(m[2] + m[2], 16),\r\n        parseInt(m[3] + m[3], 16)\r\n      ];\r\n    }\r\n  },\r\n  \"hex222\": {\r\n    reg: /^#(\\w{2})(\\w{2})(\\w{2})$/,\r\n    exec: function(m) {\r\n      return [\r\n        parseInt(m[1], 16),\r\n        parseInt(m[2], 16),\r\n        parseInt(m[3], 16)\r\n      ];\r\n    }\r\n  },\r\n  \"rgb\": {\r\n    reg: /^rgb\\((\\d{1,3}),\\s*(\\d{1,3}),\\s*(\\d{1,3})\\)$/,\r\n    exec: function(m) {\r\n      return [\r\n        parseInt(m[1]),\r\n        parseInt(m[2]),\r\n        parseInt(m[3])\r\n      ];\r\n    }\r\n  },\r\n  \"rgba\": {\r\n    reg: /^rgba\\((\\d{1,3}),\\s*(\\d{1,3}),\\s*(\\d{1,3}),\\s*(\\d{1}(\\.{1}\\d+)?)\\)$/,\r\n    exec: function(m) {\r\n      return [\r\n        parseInt(m[1]),\r\n        parseInt(m[2]),\r\n        parseInt(m[3]),\r\n        parseFloat(m[4])\r\n      ];\r\n    }\r\n  },\r\n  \"hsl\": {\r\n    reg: /^hsl\\((\\d{1,3}),\\s*(\\d{1,3})%,\\s*(\\d{1,3})%\\)$/,\r\n    exec: function(m) {\r\n      return Color.HSLtoRGB(m[1], m[2], m[3]);\r\n    }\r\n  },\r\n  \"hsla\": {\r\n    reg: /^rgba\\((\\d{1,3}),\\s*(\\d{1,3}),\\s*(\\d{1,3}),\\s*(\\d{1}(\\.{1}\\d+)?)\\)$/,\r\n    exec: function(m) {\r\n      return Color.HSLAtoRGBA(m[1], m[2], m[3], m[4]);\r\n    }\r\n  }\r\n};\n\n// 監視オブジェクト\r\n// register で key を登録 (デフォルト値も一緒に？)\r\n// event dispatcher を継承\r\n// event dispatcher って util じゃね？\r\n// register で登録した値を変更したら change イベントが走る\r\n\r\n\r\n// 名前候補\r\n//  middleman(仲立人)\r\n\r\n\r\n/**\r\n * @class phina.util.ChangeDispatcher\r\n * @extends phina.util.EventDispatcher\r\n */\r\nclass ChangeDispatcher extends EventDispatcher {\r\n\r\n  constructor() {\r\n    super();\r\n\r\n    this._observe = true;\r\n  }\r\n\r\n  register(key, defaultValue) {\r\n    if (arguments.length === 1) {\r\n      var obj = arguments[0];\r\n      forIn.call(obj, function(key, value) {\r\n      // obj.forIn(function(key, value) {\r\n        this.register(key, value);\r\n      }, this);\r\n    }\r\n    else {\r\n      var tempKey = '__' + key;\r\n      this[tempKey] = defaultValue;\r\n      accessor.call(this, key, {\r\n      // this.accessor(key, {\r\n        get: function() {\r\n          return this[tempKey];\r\n        },\r\n        set: function(v) {\r\n          this[tempKey] = v;\r\n          if (this._observe) {\r\n            this.flare('change');\r\n          }\r\n        },\r\n      });\r\n    }\r\n    return this;\r\n  }\r\n\r\n  observe() {\r\n    this._observe = true;\r\n  }\r\n  unobserve() {\r\n    this._observe = false;\r\n  }\r\n}\n\n/**\r\n * @class phina.util.Ajax\r\n * \r\n */\r\nclass Ajax {\r\n\r\n  static request(options) {\r\n    var data = $safe.call({}, options, Ajax.defaults);\r\n    // var data = ({}).$safe(options, this.defaults);\r\n\r\n    var xhr = new XMLHttpRequest();\r\n    var flow = new Flow(function(resolve) {\r\n      xhr.onreadystatechange = function() {\r\n        if (xhr.readyState === 4) {\r\n          if ([200, 201, 0].indexOf(xhr.status) !== -1) {\r\n            resolve(xhr.response);\r\n          }\r\n        }\r\n      };\r\n\r\n      xhr.open(data.type, data.url);\r\n      xhr.responseType = data.responseType;\r\n      xhr.send(null);\r\n    });\r\n\r\n    return flow;\r\n  }\r\n  static get(url) {\r\n    return Ajax.request({\r\n      type: 'GET',\r\n      url: url,\r\n    });\r\n  }\r\n  static post(url) {\r\n    return Ajax.request({\r\n      type: 'POST',\r\n      url: url,\r\n    });\r\n  }\r\n  static put(url) {\r\n    return Ajax.request({\r\n      type: 'PUT',\r\n      url: url,\r\n    });\r\n  }\r\n  static del(url) {\r\n    return Ajax.request({\r\n      type: 'DELETE',\r\n      url: url,\r\n    });\r\n  }\r\n\r\n}\r\n\r\n/** \r\n * @static\r\n * @memberof Ajax\r\n * @type {Object}\r\n */\r\nAjax.defaults = {\r\n  type: 'GET',\r\n  contentType: 'application/x-www-form-urlencoded',\r\n  responseType: 'json',\r\n  data: null,\r\n  url: '',\r\n};\n\n/**\r\n * @class global.Number\r\n * # 拡張した Number クラス\r\n * 数値を扱う Number クラスを拡張しています。\r\n */\r\n\r\n/**\r\n * @method times\r\n * 0 から自分自身の数-1まで、カウンタをインクリメントしながら関数を繰り返し実行します。\r\n *\r\n * ### Example\r\n *     arr = [];\r\n *     (5).times(function(i){\r\n *       arr.push(i);\r\n *     }); // => [0, 1, 2, 3, 4]\r\n *\r\n * @param {Function} fn コールバック関数\r\n * @param {Object} [self=this] 関数内で this として参照される値。デフォルトは自分自身。\r\n */\r\nfunction times(fn, self) {\r\n// Number.prototype.$method(\"times\",  function(fn, self) {\r\n  self = self || this;\r\n  for (var i=0; i<this; ++i) {\r\n    fn.call(self, i, this);\r\n  }\r\n  return this;\r\n}\r\n\r\n/**\r\n * @method step\r\n * 自分自身の値から指定した数まで、カウンタを増分させながら関数を繰り返し実行します。\r\n *\r\n * 上限値や増分値は float 型を指定することができます。\r\n *\r\n * ### Example\r\n *     var arr = [];\r\n *     (2.4).step(5.3, 0.8, function(n) {\r\n *       arr.push(n);\r\n *      }); // => [2.4, 3.2, 4.0, 4.8]\r\n *\r\n * @param {Number} limit カウンタの上限値\r\n * @param {Number} step カウンタを増分する量\r\n * @param {Function} fn コールバック関数。引数にカウンタが渡される。\r\n * @param {Object} [self=this] 関数内で this として参照される値。デフォルトは自分自身。\r\n */\r\nfunction step(limit, step, fn, self) {\r\n// Number.prototype.$method(\"step\",  function(limit, step, fn, self) {\r\n  self = self || this;\r\n  for (var i=+this; i<=limit; i+=step) {\r\n    fn.call(self, i, this);\r\n  }\r\n  return this;\r\n}\r\n// Number.prototype.$method(\"toDegree\", function() { return (this*Math.RAD_TO_DEG); });\r\n\r\n/**\r\n * @method toRadian\r\n * 度をラジアンに変換します。\r\n *\r\n * ### Example\r\n *     (180).toRadian(); // => 3.141592653589793\r\n *\r\n * @return {Number} ラジアン\r\n */\r\nfunction toRadian() { return this * DEG_TO_RAD; }\r\n// Number.prototype.$method(\"toRadian\", function() { return this*Math.DEG_TO_RAD; });\n\n/**\r\n * @class phina.geom.Vector2\r\n * # 2次元ベクトルクラス\r\n * 2次元のベクトルや座標を表すクラスです。\r\n */\r\nclass Vector2 {\r\n\r\n  // /**\r\n  //  * x座標\r\n  //  * @type {Number}\r\n  //  */\r\n  // x = 0\r\n\r\n  // /**\r\n  //  * y座標\r\n  //  * @type {Number}\r\n  //  */\r\n  // y = 0\r\n\r\n  /**\r\n   * 2次元ベクトルのコンストラクタです。\r\n   *\r\n   * ### Example\r\n   *     v = phina.geom.Vector2(3, 4);\r\n   *\r\n   * @param {Number} [x=0] ベクトルの x 座標\r\n   * @param {Number} [y=0] ベクトルの y 座標\r\n   * @return {phina.geom.Vector2} 2次元ベクトルオブジェクト\r\n   */\r\n  constructor(x=0, y=0) {\r\n    this.x = x;\r\n    this.y = y;\r\n  }\r\n\r\n  /**\r\n   * @method clone\r\n   * this のコピーを生成して返します。\r\n   *\r\n   * ### Example\r\n   *     v = phina.geom.Vector2(3, 4);\r\n   *     v2 = v.clone();\r\n   *     v2.x == v.x; // => true\r\n   *\r\n   * @return {Object} 生成したベクトル\r\n   */\r\n  clone() {\r\n    return new Vector2(this.x, this.y);\r\n  }\r\n\r\n  /**\r\n   * @method equals\r\n   * this の各要素がすべて other と等しいかどうかを返します。\r\n   *\r\n   * ### Example\r\n   *     v1 = phina.geom.Vector2(3, 4);\r\n   *     v2 = phina.geom.Vector2(5, 6);\r\n   *     v1.equals(v2); // => false\r\n   *\r\n   * @param {phina.geom.Vector2} other 比較する対象のベクトル\r\n   * @return {Boolean} 等しいかどうか\r\n   */\r\n  equals(v) {\r\n    return (this.x === v.x && this.y === v.y);\r\n  }\r\n\r\n  /**\r\n   * @method set\r\n   * @chainable\r\n   * this の各要素の値を再設定します。\r\n   *\r\n   * ### Example\r\n   *     v = phina.geom.Vector2(3, 4);\r\n   *     v.set(5, 6);\r\n   *\r\n   * @param {Number} x ベクトルの x 座標\r\n   * @param {Number} y ベクトルの y 座標\r\n   * @return {phina.geom.Vector2} 再設定後のベクトル\r\n   */\r\n  set(x, y) {\r\n    this.x = x;\r\n    this.y = y;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @method add\r\n   * @chainable\r\n   * this に other を加えます。\r\n   *\r\n   * ### Example\r\n   *     v1 = phina.geom.Vector2(3, 4);\r\n   *     v2 = phina.geom.Vector2(5, 6);\r\n   *     v1.add(v2); // => phina.geom.Vector(8, 10)\r\n   *\r\n   * @param {phina.geom.Vector2} other ベクトル\r\n   * @return {phina.geom.Vector2} 加算した結果のベクトル\r\n   */\r\n  add(v) {\r\n    this.x += v.x;\r\n    this.y += v.y;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @method sub\r\n   * @chainable\r\n   * this から other を減じます。\r\n   *\r\n   * ベクトルが座標を表す場合は、指定した座標から自分自身へと向かうベクトルが得られます。\r\n   * \r\n   * ### Example\r\n   *     v1 = phina.geom.Vector2(3, 4);\r\n   *     v2 = phina.geom.Vector2(1, 5);\r\n   *     v1.sub(v2); // => phina.geom.Vector(2, -1)\r\n   *\r\n   * @param {phina.geom.Vector2} other ベクトル\r\n   * @return {phina.geom.Vector2} 減算した結果のベクトル\r\n   */\r\n  sub(v) {\r\n    this.x -= v.x;\r\n    this.y -= v.y;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @method mul\r\n   * @chainable\r\n   * this の各要素に数値 n を乗じます。\r\n   *\r\n   * ### Example\r\n   *     v1 = phina.geom.Vector2(3, 4);\r\n   *     v1.mul(3) // => phina.geom.Vector(9, 12)\r\n   *\r\n   * @param {Number} n 乗じる値\r\n   * @return {phina.geom.Vector2} 乗算した結果のベクトル\r\n   */\r\n  mul(n) {\r\n    this.x *= n;\r\n    this.y *= n;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @method div\r\n   * @chainable\r\n   * this の各要素を数値 n で割ります。\r\n   *\r\n   * ### Example\r\n   *     v1 = phina.geom.Vector2(8, 16);\r\n   *     v1.div(2) // => phina.geom.Vector(4, 8)\r\n   *\r\n   * @param {Number} n 割る値\r\n   * @return {phina.geom.Vector2} 除算した結果のベクトル\r\n   */\r\n  div(n) {\r\n    //console.assert(n != 0, \"0 division!!\");\r\n    n = n || 0.01;\r\n    this.x /= n;\r\n    this.y /= n;\r\n    return this;\r\n  }\r\n  /**\r\n   * @method negate\r\n   * @chainable\r\n   * this の各要素の正負を反転します。\r\n   *\r\n   * this と同じ大きさで方向が逆のベクトルが得られます。\r\n   *\r\n   * ### Example\r\n   *     v1 = phina.geom.Vector2(3, -4);\r\n   *     v1.negate() // => phina.geom.Vector(-3, 4)\r\n   *\r\n   * @return {phina.geom.Vector2} 反転後のベクトル\r\n   */\r\n  negate() {\r\n    this.x = -this.x;\r\n    this.y = -this.y;\r\n    \r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @method dot\r\n   * other との内積を返します。\r\n   *\r\n   * 投影ベクトルを求めたり、類似度の計算に利用することができます。\r\n   *\r\n   * ### Example\r\n   *     v1 = phina.geom.Vector2(3, 4);\r\n   *     v2 = phina.geom.Vector2(-2, 2);\r\n   *     v1.dot(v2) // => 2\r\n   *\r\n   * @param {phina.geom.Vector2} other ベクトル\r\n   * @return {Number} 内積\r\n   */\r\n  dot(v) {\r\n    return this.x * v.x + this.y * v.y;\r\n  }\r\n\r\n  /**\r\n   * @method cross\r\n   * other との外積（クロス積）を返します。\r\n   *\r\n   * 2次元ベクトルでの外積はベクトルでなく数値を返すことに注意してください。\r\n   * other より this 時計回りにあるときは正の値になり、反時計回りにあるときは負の値になります。\r\n   *\r\n   * ### Example\r\n   *     v1 = phina.geom.Vector2(3, 4);\r\n   *     v2 = phina.geom.Vector2(3, 1);\r\n   *     v1.cross(v2) // => -8\r\n   *\r\n   * @param {phina.geom.Vector2} other ベクトル\r\n   * @return {Number} 外積\r\n   */\r\n  cross(v) {\r\n    return (this.x*v.y) - (this.y*v.x);\r\n  }\r\n\r\n  /**\r\n   * @method length\r\n   * this の大きさを返します。\r\n   *\r\n   * (memo) magnitude って名前の方が良いかも. 検討中.\r\n   *\r\n   * ### Example\r\n   *     v1 = phina.geom.Vector2(3, 4);\r\n   *     v1.length(); // => 5\r\n   *\r\n   * @return {Number} ベクトルの大きさ\r\n   */\r\n  length() {\r\n    return Math.sqrt(this.x*this.x + this.y*this.y);\r\n  }\r\n  \r\n  /**\r\n   * @method lengthSquared\r\n   * this の大きさの自乗を返します。\r\n   *\r\n   * C# の名前を引用（or lengthSquare or lengthSqrt）\r\n   *\r\n   * ### Example\r\n   *     v1 = phina.geom.Vector2(3, 4);\r\n   *     v1.lengthSquared(); // => 25\r\n   *\r\n   * @return {Number} ベクトルの大きさの自乗\r\n   */\r\n  lengthSquared() {\r\n    return this.x*this.x + this.y*this.y;\r\n  }\r\n  \r\n  /**\r\n   * @method distance\r\n   * this と other を座標とみなしたときの2点間の距離を返します。\r\n   *\r\n   * ### Example\r\n   *     v1 = phina.geom.Vector2(1, 2);\r\n   *     v2 = phina.geom.Vector2(4, 6);\r\n   *     v1.distance(v2); // => 5\r\n   *\r\n   * @param {phina.geom.Vector2} other 座標を表すベクトル\r\n   * @return {Number} 2点間の距離\r\n   */\r\n  distance(v) {\r\n    return Math.sqrt( Math.pow(this.x-v.x, 2) + Math.pow(this.y-v.y, 2) );\r\n  }\r\n  \r\n  /**\r\n   * @method distanceSquared\r\n   * this と other を座標とみなしたときの2点間の距離の自乗を返します。\r\n   *\r\n   * ### Example\r\n   *     v1 = phina.geom.Vector2(1, 2);\r\n   *     v2 = phina.geom.Vector2(4, 6);\r\n   *     v1.distanceSquared(v2); // => 25\r\n   *\r\n   * @param {phina.geom.Vector2} other 座標を表すベクトル\r\n   * @return {Number} 2点間の距離の自乗\r\n   */\r\n  distanceSquared(v) {\r\n    return Math.pow(this.x-v.x, 2) + Math.pow(this.y-v.y, 2);\r\n  }\r\n\r\n  /**\r\n   * @method random\r\n   * @chainable\r\n   * 角度が min から max の範囲（度単位）で大きさが len のランダムなベクトルを返します。\r\n   *\r\n   * ### Example\r\n   *     phina.geom.Vector2().random(90, 180, 1); // => phina.geom.Vector2(-0.5, 0.866) など\r\n   *\r\n   * @param {Number} [min=0] 角度（度単位）の下限値\r\n   * @param {Number} [max=360] 角度（度単位）の上限値\r\n   * @param {Number} [len=1] 大きさ\r\n   * @return {phina.geom.Vector2} ランダム化したベクトル\r\n   */\r\n  random(min, max, len) {\r\n    var degree = Random.randfloat(min || 0, max || 360);\r\n    var rad = degree*Math.DEG_TO_RAD;\r\n    var len = len || 1;\r\n\r\n    this.x = Math.cos(rad)*len;\r\n    this.y = Math.sin(rad)*len;\r\n\r\n    return this;\r\n  }\r\n  \r\n  /**\r\n   * @method normalize\r\n   * @chainable\r\n   * this を正規化します。すなわち、this と同じ方向で大きさが1のベクトルを返します。\r\n   *\r\n   * ### Example\r\n   *     v1 = phina.geom.Vector2(3, 4);\r\n   *     v1.normalize(); // => phina.geom.Vector2(0.6, 0.8)\r\n   *\r\n   * @return {phina.geom.Vector2} 正規化したベクトル\r\n   */\r\n  normalize() {\r\n    this.div(this.length());\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @method toString\r\n   * this を JSON 形式で表現した文字列を返します。\r\n   *\r\n   * ### Example\r\n   *     v1 = phina.geom.Vector2(3, 4);\r\n   *     v1.toString(); // => \"{x:3, y:4}\"\r\n   *\r\n   * @return {String} JSON 文字列\r\n   */\r\n  toString() {\r\n    return \"{x:{x}, y:{y}}\".format(this);\r\n  }\r\n\r\n  /**\r\n   * @method getDirection\r\n   * this のおおよその方向を示した文字列を返します。\r\n   *\r\n   * ### Example\r\n   *     v1 = phina.geom.Vector2(3, 4);\r\n   *     v1.getDirection(); // => \"up\"\r\n   *\r\n   * @return {String} 方向を表す文字列（\"up\", \"right\", \"down\", \"left\"）\r\n   */\r\n  getDirection() {\r\n    var angle = this.toDegree();\r\n    if (angle < 45) {\r\n      return \"right\";\r\n    } else if (angle < 135) {\r\n      return \"down\";\r\n    } else if (angle < 225) {\r\n      return \"left\"\r\n    } else if (angle < 315) {\r\n      return \"up\";\r\n    } else {\r\n      return \"right\";\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @method toAngle\r\n   * this と x 軸との角度（ラジアン単位）を返します。\r\n   *\r\n   * ### Example\r\n   *     v1 = phina.geom.Vector2(-2, 0);\r\n   *     v1.toAngle(); // => 3.14159\r\n   *\r\n   * @return {Number} ベクトルの角度（ラジアン単位）\r\n   */\r\n  toAngle() {\r\n    var rad = Math.atan2(this.y, this.x);\r\n    return (rad + Math.PI*2)%(Math.PI*2);\r\n  }\r\n  \r\n  /**\r\n   * @method fromAngle\r\n   * @chainable\r\n   * 角度（ラジアン単位）と大きさを指定してベクトルを設定します。\r\n   *\r\n   * ### Example\r\n   *     phina.geom.Vector2().fromAngle(Math.PI/4, 2); // => phina.geom.Vector2(1.4142, 1.4142)\r\n   *\r\n   * @param {Number} rad 角度（ラジアン単位）\r\n   * @param {Number} [len=1] 大きさ\r\n   * @return {phina.geom.Vector2} ベクトル\r\n   */\r\n  fromAngle(rad, len) {\r\n    len = len || 1;\r\n    this.x = Math.cos(rad)*len;\r\n    this.y = Math.sin(rad)*len;\r\n    \r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @method toDegree\r\n   * this と x 軸との角度（度単位）を返します。\r\n   *\r\n   * ### Example\r\n   *     v1 = phina.geom.Vector2(-2, 2);\r\n   *     v1.toAngle(); // => 135\r\n   *\r\n   * @return {Number} ベクトルの角度（度単位）\r\n   */\r\n  toDegree() {\r\n    return this.toAngle().toDegree();\r\n  }\r\n  \r\n  /**\r\n   * @method fromDegree\r\n   * @chainable\r\n   * 角度（度単位）と大きさを指定してベクトルを設定します。\r\n   *\r\n   * ### Example\r\n   *     phina.geom.Vector2().fromDegree(60, 2); // => phina.geom.Vector2(1, 1.732)\r\n   *\r\n   * @param {Number} deg 角度（度単位）\r\n   * @param {Number} [len=1] 大きさ\r\n   * @return {phina.geom.Vector2} ベクトル\r\n   */\r\n  fromDegree(deg, len) {\r\n    // return this.fromAngle(deg.toRadian(), len);\r\n    return this.fromAngle(toRadian.call(deg), len);\r\n  }\r\n\r\n  /**\r\n   * @method rotate\r\n   * @chainable\r\n   * this を回転します。\r\n   *\r\n   * ### Example\r\n   *     v1 = phina.geom.Vector2(3, 1);\r\n   *     v1.rotate(Math.PI/2); // => phina.geom.Vector2(-1, 3);\r\n   *\r\n   * @param {Number} rad 角度（ラジアン単位）\r\n   * @param {Number} [center=(0, 0)] 回転の中心座標\r\n   * @return {Number} 回転後のベクトル\r\n   */\r\n  rotate(rad, center) {\r\n    center = center || new Vector2(0, 0);\r\n\r\n    var x1 = this.x - center.x;\r\n    var y1 = this.y - center.y;\r\n    var x2 = x1 * Math.cos(rad) - y1 * Math.sin(rad);\r\n    var y2 = x1 * Math.sin(rad) + y1 * Math.cos(rad);\r\n    this.set( center.x + x2, center.y + y2 );\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @method min\r\n   * @static\r\n   * v1 と v2 の各要素に対し、より小さい方を要素とする新しいベクトルを生成して返します。\r\n   *\r\n   * ### Example\r\n   *     v1 = phina.geom.Vector2(3, 1);\r\n   *     v2 = phina.geom.Vector2(-3, 2);\r\n   *     phina.geom.Vector2.min(v1, v2); // phina.geom.Vector2(-3, 1);\r\n   *\r\n   * @param {phina.geom.Vector2} v1 ベクトル\r\n   * @param {phina.geom.Vector2} v2 ベクトル\r\n   * @return {phina.geom.Vector2} 生成したベクトル\r\n   */\r\n  static min(a, b) {\r\n    return new Vector2(\r\n      (a.x < b.x) ? a.x : b.x,\r\n      (a.y < b.y) ? a.y : b.y\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @method max\r\n   * @static\r\n   * 2次元ベクトル v1 と v2 の各要素に対し、より大きい方を要素とする新しいベクトルを生成して返します。\r\n   *\r\n   * ### Example\r\n   *     v1 = phina.geom.Vector2(3, 1);\r\n   *     v2 = phina.geom.Vector2(-3, 2);\r\n   *     phina.geom.Vector2.max(v1, v2); // phina.geom.Vector2(3, 2);\r\n   *\r\n   * @param {phina.geom.Vector2} v1 ベクトル\r\n   * @param {phina.geom.Vector2} v2 ベクトル\r\n   * @return {phina.geom.Vector2} 生成したベクトル\r\n   */\r\n  static max(a, b) {\r\n    return new Vector2(\r\n      (a.x > b.x) ? a.x : b.x,\r\n      (a.y > b.y) ? a.y : b.y\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @method add\r\n   * @static\r\n   * v1 に v2 を加算した新しいベクトルを生成して返します。\r\n   *\r\n   * ### Example\r\n   *     v1 = phina.geom.Vector2(3, 1);\r\n   *     v2 = phina.geom.Vector2(-3, 2);\r\n   *     phina.geom.Vector2.add(v1, v2); // phina.geom.Vector2(0, 3);\r\n   *\r\n   * @param {phina.geom.Vector2} v1 ベクトル\r\n   * @param {phina.geom.Vector2} v2 ベクトル\r\n   * @return {phina.geom.Vector2} 加算した結果\r\n   */\r\n  static add(lhs, rhs) {\r\n    return new Vector2(lhs.x+rhs.x, lhs.y+rhs.y);\r\n  }\r\n  \r\n  /**\r\n   * @method sub\r\n   * @static\r\n   * 2次元ベクトル v1 から v2 を減じた新しいベクトルを生成して返します。\r\n   *\r\n   * ベクトルが座標を表す場合、2つ目の座標から1つ目の座標へと向かうベクトルが得られます。\r\n   *\r\n   * ### Example\r\n   *     v1 = phina.geom.Vector2(3, 1);\r\n   *     v2 = phina.geom.Vector2(-3, 2);\r\n   *     phina.geom.Vector2.sub(v1, v2); // phina.geom.Vector2(6, -1);\r\n   *\r\n   * @param {phina.geom.Vector2} v1 ベクトル\r\n   * @param {phina.geom.Vector2} v2 ベクトル\r\n   * @return {phina.geom.Vector2} 減算した結果\r\n   */\r\n  static sub(lhs, rhs) {\r\n    return new Vector2(lhs.x-rhs.x, lhs.y-rhs.y);\r\n  }\r\n  \r\n  /**\r\n   * @method mul\r\n   * @static\r\n   * 2次元ベクトル v の各要素に n を乗じた新しいベクトルを生成して返します。\r\n   *\r\n   * ### Example\r\n   *     v1 = phina.geom.Vector2(3, 1);\r\n   *     phina.geom.Vector2.mul(v1, 2); // phina.geom.Vector2(6, 2)\r\n   *\r\n   * @param {phina.geom.Vector2} v ベクトル\r\n   * @param {phina.geom.Vector2} n 乗じる値\r\n   * @return {phina.geom.Vector2} 乗算した結果\r\n   */\r\n  static mul(v, n) {\r\n    return new Vector2(v.x*n, v.y*n);\r\n  }\r\n  \r\n  /**\r\n   * @method div\r\n   * @static\r\n   * 2次元ベクトル v の各要素を n で割った新しいベクトルを生成して返します。\r\n   *\r\n   * ### Example\r\n   *     v1 = phina.geom.Vector2(3, 1);\r\n   *     phina.geom.Vector2.div(v1, 2); // phina.geom.Vector2(1.5, 0.5)\r\n   *\r\n   * @param {phina.geom.Vector2} v ベクトル\r\n   * @param {phina.geom.Vector2} n 割る値\r\n   * @return {phina.geom.Vector2} 除算した結果\r\n   */\r\n  static div(v, n) {\r\n    return new Vector2(v.x/n, v.y/n);\r\n  }\r\n  \r\n  /**\r\n   * @method negate\r\n   * @static\r\n   * 2次元ベクトル v を反転した新しいベクトルを生成して返します。\r\n   *\r\n   * ### Example\r\n   *     v1 = phina.geom.Vector2(3, 1);\r\n   *     phina.geom.Vector2.negate(); // phina.geom.Vector2(-3, -1)\r\n   *\r\n   * @param {phina.geom.Vector2} v ベクトル\r\n   * @return {phina.geom.Vector2} 反転したベクトル\r\n   */\r\n  static negate(v) {\r\n    return new Vector2(-v.x, -v.y);\r\n  }\r\n  \r\n  /**\r\n   * @method dot\r\n   * @static\r\n   * 2次元ベクトル v1 と v2 の内積を返します。\r\n   *\r\n   * ### Example\r\n   *     v1 = phina.geom.Vector2(3, 4);\r\n   *     v2 = phina.geom.Vector2(-2, 2);\r\n   *     phina.geom.Vector2.dot(v1, v2) // => 2\r\n   *\r\n   * @param {phina.geom.Vector2} v1 ベクトル\r\n   * @param {phina.geom.Vector2} v2 ベクトル\r\n   * @return {phina.geom.Vector2} 内積\r\n   */\r\n  static dot(lhs, rhs) {\r\n    return lhs.x * rhs.x + lhs.y * rhs.y;\r\n  }\r\n  \r\n  /**\r\n   * @method cross\r\n   * @static\r\n   * 2次元ベクトル v1 と v2 の外積（クロス積）を返します。\r\n   *\r\n   * 2次元ベクトルでの外積はベクトルでなく数値を返すことに注意してください。\r\n   * 1つ目のベクトルが2つ目のベクトルより時計回りにあるときは正の値になり、反時計回りにあるときは負の値になります。\r\n   *\r\n   * ### Example\r\n   *     v1 = phina.geom.Vector2(3, 4);\r\n   *     v2 = phina.geom.Vector2(3, 1);\r\n   *     phina.geom.Vector2.cross(v1, v2); // => -8\r\n   *\r\n   * @param {phina.geom.Vector2} v1 ベクトル\r\n   * @param {phina.geom.Vector2} v2 ベクトル\r\n   * @return {Number} 外積\r\n   */\r\n  static cross(lhs, rhs) {\r\n    return (lhs.x*rhs.y) - (lhs.y*rhs.x);\r\n  }\r\n  \r\n  /**\r\n   * @method distance\r\n   * @static\r\n   * v1 と v2 を座標とみなしたときの2点間の距離を返します。\r\n   *\r\n   * ### Example\r\n   *     v1 = phina.geom.Vector2(1, 2);\r\n   *     v2 = phina.geom.Vector2(4, 6);\r\n   *     phina.geom.Vector2.distance(v1, v2); // => 5\r\n   *\r\n   * @param {phina.geom.Vector2} v1 座標を表すベクトル\r\n   * @param {phina.geom.Vector2} v2 座標を表すベクトル\r\n   * @return {Number} 2点間の距離\r\n   */\r\n  static distance(lhs, rhs) {\r\n    return Math.sqrt( Math.pow(lhs.x-rhs.x, 2) + Math.pow(lhs.y-rhs.y, 2) );\r\n  }\r\n\r\n  /**\r\n   * @method distanceSquared\r\n   * @static\r\n   * v1 と v2 を座標とみなしたときの2点間の距離の自乗を返します。\r\n   *\r\n   * ### Example\r\n   *     v1 = phina.geom.Vector2(1, 2);\r\n   *     v2 = phina.geom.Vector2(4, 6);\r\n   *     phina.geom.Vector2.distanceSquared(v1, v2); // => 25\r\n   *\r\n   * @param {phina.geom.Vector2} v1 座標を表すベクトル\r\n   * @param {phina.geom.Vector2} v2 座標を表すベクトル\r\n   * @return {Number} 2点間の距離の自乗\r\n   */\r\n  static distanceSquared(lhs, rhs) {\r\n    return Math.pow(lhs.x-rhs.x, 2) + Math.pow(lhs.y-rhs.y, 2);\r\n  }\r\n\r\n  /**\r\n   * @method manhattanDistance\r\n   * @static\r\n   * v1 と v2 を座標とみなしたときの2点間のマンハッタン距離（軸に平行に進むときの最短距離）を返します。\r\n   *\r\n   * ### Example\r\n   *     v1 = phina.geom.Vector2(1, 2);\r\n   *     v2 = phina.geom.Vector2(4, 6);\r\n   *     phina.geom.Vector2.manhattanDistance(v1, v2); // => 7\r\n   *\r\n   * @param {phina.geom.Vector2} v1 座標を表すベクトル\r\n   * @param {phina.geom.Vector2} v2 座標を表すベクトル\r\n   * @return {Number} 2点間のマンハッタン距離\r\n   */\r\n  static manhattanDistance(lhs, rhs) {\r\n    return Math.abs(lhs.x-rhs.x) + Math.abs(lhs.y-rhs.y);\r\n  }\r\n  \r\n  /**\r\n   * @method normal\r\n   * @static\r\n   * v1 と v2 を座標とみなしたときの、v2 から v1 に向かうベクトルに対する法線ベクトルを返します。\r\n   *\r\n   * ### Example\r\n   *     v1 = phina.geom.Vector2(1, 2);\r\n   *     v2 = phina.geom.Vector2(4, 6);\r\n   *     phina.geom.Vector2.normal(v1, v2); // => phina.geom.Vector2(4, -3)\r\n   *\r\n   * @param {phina.geom.Vector2} v1 座標を表すベクトル\r\n   * @param {phina.geom.Vector2} v2 座標を表すベクトル\r\n   * @return {phina.geom.Vector2} 法線ベクトル\r\n   */\r\n  static normal(a, b) {\r\n    var temp = Vector2.sub(a, b);\r\n\r\n    return new Vector2(-temp.y, temp.x);\r\n  }\r\n\r\n  /**\r\n   * @method reflect\r\n   * @static\r\n   * 2次元ベクトル v を壁への入射ベクトルとして、壁に反射した際のベクトル（反射ベクトル）を返します。\r\n   *\r\n   * 壁の向きは法線ベクトル normal によって表します。\r\n   *\r\n   * ### Example\r\n   *     v1 = phina.geom.Vector2(4, 3);\r\n   *     normal = phina.geom.Vector2(-1, 1);\r\n   *     phina.geom.Vector2.reflect(v1, normal); // => phina.geom.Vector2(2, 5)\r\n   *\r\n   * @param {phina.geom.Vector2} v 入射ベクトル\r\n   * @param {phina.geom.Vector2} normal 壁の法線ベクトル\r\n   * @return {phina.geom.Vector2} 反射ベクトル\r\n   */\r\n  static reflect(v, normal) {\r\n    var len = Vector2.dot(v, normal);\r\n    var temp= Vector2.mul(normal, 2*len);\r\n    \r\n    return Vector2.sub(v, temp);\r\n  }\r\n  \r\n  /**\r\n   * @method wall\r\n   * @static\r\n   * 2次元ベクトル v を壁への入射ベクトルとして、壁に沿ったベクトル（壁ずりクトル）を返します。\r\n   *\r\n   * 壁の向きは法線ベクトル normal によって表します。\r\n   *\r\n   * ### Example\r\n   *     v1 = phina.geom.Vector2(4, 3);\r\n   *     normal = phina.geom.Vector2(-1, 1);\r\n   *     phina.geom.Vector2.wall(v1, normal); // => phina.geom.Vector2(3, 4)\r\n   *\r\n   * @param {phina.geom.Vector2} v 入射ベクトル\r\n   * @param {phina.geom.Vector2} normal 壁の法線ベクトル\r\n   * @return {phina.geom.Vector2} 壁ずりベクトル\r\n   */\r\n  static wall(v, normal) {\r\n    var len = Vector2.dot(v, normal);\r\n    var temp= Vector2.mul(normal, len);\r\n    \r\n    return Vector2.sub(v, temp);\r\n  }\r\n  \r\n  /**\r\n   * @method lerp\r\n   * @static\r\n   * v1 と v2 を媒介変数 t で線形補間します。\r\n   * t=0.5 で v1 と v2 の中間ベクトルを求めることができます。\r\n   *\r\n   * ### Example\r\n   *     v1 = phina.geom.Vector2(1, 2);\r\n   *     v2 = phina.geom.Vector2(4, 6);\r\n   *     phina.geom.Vector2.lerp(v1, v2, 0.5); // => (2.5, 4)\r\n   *     phina.geom.Vector2.lerp(v1, v2, 0); // => (1, 2)\r\n   *     phina.geom.Vector2.lerp(v1, v2, 1); // => (4, 6)\r\n   * \r\n   * @param {phina.geom.Vector2} v1 ベクトル\r\n   * @param {phina.geom.Vector2} v2 ベクトル\r\n   * @param {Number} t 媒介変数\r\n   * @return {phina.geom.Vector2} 線形補間の結果\r\n   */\r\n  static lerp(a, b, t) {\r\n    return new Vector2(\r\n      a.x + (b.x-a.x)*t,\r\n      a.y + (b.y-a.y)*t\r\n    );\r\n  }\r\n  \r\n  /**\r\n   * @method slerp\r\n   * @static\r\n   * 補間（未実装）\r\n   */\r\n  static slerp(lhs, rhs, t) {\r\n      // TODO:\r\n      // cos...\r\n  }\r\n\r\n  /**\r\n   * @method random\r\n   * @static\r\n   * 角度が min から max の範囲（度単位）で大きさが len のランダムなベクトルを生成して返します。\r\n   *\r\n   * ### Example\r\n   *     phina.geom.Vector2.random(90, 180, 1); // => phina.geom.Vector2(-0.5, 0.866) など\r\n   *\r\n   * @param {Number} [min=0] 角度（度単位）の下限値\r\n   * @param {Number} [max=360] 角度（度単位）の上限値\r\n   * @param {Number} [len=1] 大きさ\r\n   * @return {phina.geom.Vector2} 生成したベクトル\r\n   */\r\n static random(min, max, len) {\r\n    return new Vector2().random(min, max).mul(len||1);\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @property {Vector2} ZERO ゼロベクトル\r\n * @readonly\r\n */\r\nVector2.ZERO = new Vector2(0, 0);\r\n/**\r\n * @property {Vector2} LEFT 左方向の単位ベクトル\r\n * @readonly\r\n */\r\nVector2.LEFT = new Vector2(-1, 0);\r\n/**\r\n * @property {Vector2} RIGHT 右方向の単位ベクトル\r\n * @readonly\r\n */\r\nVector2.RIGHT= new Vector2(1, 0);\r\n/**\r\n * @property {Vector2} UP 上方向の単位ベクトル\r\n * @readonly\r\n */\r\nVector2.UP   = new Vector2(0, -1);\r\n/**\r\n * @property {Vector2} DOWN 下方向の単位ベクトル\r\n * @readonly\r\n */\r\nVector2.DOWN = new Vector2(0, 1);\n\n// import { Rect } from \"./rect\";\r\n\r\n/**\r\n * @class phina.geom.Circle\r\n * # 円領域を表すクラス\r\n * キャンバス上の円領域を扱うクラスです。\r\n * \r\n */\r\nclass Circle {\r\n\r\n  /**\r\n   * @property {Number} x\r\n   * 円の中心の x 座標\r\n   */\r\n  // x: 0,\r\n  /**\r\n   * @property {Number} y\r\n   * 円の中心の y 座標\r\n   */\r\n  // y: 0,\r\n  /**\r\n   * @property {Number} radius\r\n   * 円の半径\r\n   */\r\n  // radius: 32,\r\n\r\n  /**\r\n   * @method init\r\n   * 円領域のコンストラクタです。\r\n   *\r\n   * ### Example\r\n   *     circle = phina.geom.Circle(32, 64, 128);\r\n   *\r\n   * @param {Number} x 円の中心の x 座標\r\n   * @param {Number} y 円の中心の y 座標\r\n   * @param {Number} radius 半径\r\n   * @return {phina.geom.Rect} 円領域オブジェクト\r\n   */\r\n  constructor(x, y, radius) {\r\n    this.x = 0;\r\n    this.y = 0;\r\n    this.radius = 32;\r\n    this.set(x, y, radius);\r\n  }\r\n\r\n  /**\r\n   * @method set\r\n   * @chainable\r\n   * this の各値を再設定します。\r\n   *\r\n   * ### Example\r\n   *     circle = phina.geom.Circle(32, 64, 128);\r\n   *     circle.set(100, 200, 32);\r\n   *\r\n   * @param {Number} x 円を囲う矩形の左上頂点の x 座標\r\n   * @param {Number} y 円を囲う矩形の左上頂点の x 座標\r\n   * @param {Number} radius 半径\r\n   * @return {phina.geom.Circle} 円領域オブジェクト\r\n   */\r\n  set(x, y, radius) {\r\n    this.x = x;\r\n    this.y = y;\r\n    this.radius = radius;\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @method moveTo\r\n   * @chainable\r\n   * 円領域を座標 (x, y) に移動します。(x, y) は円の中心を表します。\r\n   *\r\n   * ### Example\r\n   *     circle = phina.geom.Circle(300, 300, 40);\r\n   *     circle.left; // => 260\r\n   *     circle.moveTo(100, 100);\r\n   *     circle.left; // => 60\r\n   *\r\n   * @param {Number} x 移動先の x 座標\r\n   * @param {Number} y 移動先の y 座標\r\n   */\r\n  moveTo(x, y) {\r\n    this.x = x;\r\n    this.y = y;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @method moveBy\r\n   * @chainable\r\n   * 円領域を (x, y) だけ移動します。\r\n   *\r\n   * ### Example\r\n   *     circle = phina.geom.Circle(300, 300, 40);\r\n   *     circle.left; // => 260\r\n   *     circle.moveBy(100, 100);\r\n   *     circle.left; // => 460\r\n   *\r\n   * @param {Number} x 移動量の x 座標\r\n   * @param {Number} y 移動量の y 座標\r\n   */\r\n  moveBy(x, y) {\r\n    this.x += x;\r\n    this.y += y;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @method contains\r\n   * 座標 (x, y) が円領域の中に含まれるかどうかを返します。\r\n   *\r\n   * ### Example\r\n   *     circle = phina.geom.Circle(300, 300, 100);\r\n   *     circle.contains(350, 350); // =>  true\r\n   *     circle.contains(350, 400); // => false\r\n   *\r\n   * @param {Number} x 判定する対象の x 座標\r\n   * @param {Number} y 判定する対象の y 座標\r\n   * @return {Boolean} 指定した座標が円領域の中に含まれるかどうか\r\n   */\r\n  contains(x, y) {\r\n    var lenX = this.x-x;\r\n    var lenY = this.y-y;\r\n    var lenSquared = (lenX*lenX)+(lenY*lenY);\r\n\r\n    return lenSquared <= this.radius*this.radius;\r\n  }\r\n\r\n  /**\r\n   * @method clone\r\n   * this のコピーを生成して返します。\r\n   *\r\n   * ### Example\r\n   *     circle = phina.geom.Circle(50, 100, 40);\r\n   *     circle2 = circle.clone();\r\n   *     circle2.x == circle.x; // => true\r\n   *\r\n   * @return {Object} 生成した円領域\r\n   */\r\n  clone() {\r\n    return new Circle(this.x, this.y, this.radius);\r\n  }\r\n\r\n  /**\r\n   * @method toRect\r\n   * 円に外接する正方形を表す矩形領域を生成して返します。\r\n   *\r\n   * ### Example\r\n   *     circle = phina.geom.Circle(50, 100, 40);\r\n   *     rect = circle.toRect();\r\n   *     rect.x; // => 10\r\n   *     rect.y; // => 60\r\n   *     rect.width; // => 80\r\n   *\r\n   * @return {Object} 生成した矩形領域\r\n   */\r\n  toRect() {\r\n    // 循環参照回避のため、Rect側で定義\r\n    // var size = this.size;\r\n    // return new Rect(this.x - this.radius, this.y - this.radius, size, size);\r\n  }\r\n\r\n  /**\r\n   * @method toArray\r\n   * this の各値を要素とする配列を生成して返します。\r\n   *\r\n   * ### Example\r\n   *     circle = phina.geom.Circle(50, 100, 40);\r\n   *     rect.toArray(); // => [50, 100, 40]\r\n   *\r\n   * @return {Number[]} 生成した配列\r\n   */\r\n  toArray() {\r\n    return [this.x, this.y, this.radius];\r\n  }\r\n\r\n  /**\r\n   * @property {Number} left\r\n   * @readonly\r\n   * キャンバス左端から円の左端までの距離\r\n   *\r\n   * 現時点では読み取り専用です。\r\n   *\r\n   * ### Example\r\n   *     circle = phina.geom.Circle(200, 300, 100);\r\n   *     circle.left; // => 100\r\n   *     circle.top; // => 200\r\n   *     circle.right; // => 300\r\n   *     circle.bottom; // => 400\r\n   */\r\n  get left()   { return this.x - this.radius; }\r\n  set left(v)  {\r\n    // TODO: \r\n  }\r\n\r\n  /**\r\n   * @property {Number} top\r\n   * @readonly\r\n   * キャンバス上端から円の上端までの距離\r\n   *\r\n   * 現時点では読み取り専用です。\r\n   */\r\n  get top()   { return this.y - this.radius; }\r\n  set top(v)  {\r\n    // TODO: \r\n  }\r\n\r\n  /**\r\n   * @property {Number} right\r\n   * @readonly\r\n   * キャンバス右端から円の右端までの距離\r\n   *\r\n   * 現時点では読み取り専用です。\r\n   */\r\n  get right()   { return this.x + this.radius; }\r\n  set right(v)  {\r\n    // TODO: \r\n  }\r\n\r\n  /**\r\n   * @property {Number} bottom\r\n   * @readonly\r\n   * キャンバス下端から円の下端までの距離\r\n   *\r\n   * 現時点では読み取り専用です。\r\n   */\r\n  get bottom()   { return this.y + this.radius; }\r\n  set bottom(v)  {\r\n    // TODO: \r\n  }\r\n    \r\n  /**\r\n   * @property {Number} size\r\n   * @readonly\r\n   * 円の直径\r\n   *\r\n   * 現時点では読み取り専用です。\r\n   */\r\n  get size()   { return this.radius*2; }\r\n  set size(v)  {\r\n    // TODO: 検討中\r\n  }\r\n}\n\n/**\r\n * @class phina.geom.Rect\r\n * # 矩形領域を表すクラス\r\n * キャンバス上の矩形領域を扱うクラスです。\r\n * \r\n */\r\nclass Rect {\r\n\r\n  // /**\r\n  //  * @property {Number} x\r\n  //  * 矩形の左上頂点の x 座標\r\n  //  */\r\n  // x: 0,\r\n  // /**\r\n  //  * @property {Number} y\r\n  //  * 矩形の左上頂点の y 座標\r\n  //  */\r\n  // y: 0,\r\n  // /**\r\n  //  * @property {Number} width\r\n  //  * 矩形の幅\r\n  //  */\r\n  // width: 32,\r\n  // /**\r\n  //  * @property {Number} hight\r\n  //  * 矩形の高さ\r\n  //  */\r\n  // height: 32,\r\n\r\n  /**\r\n   * @method init\r\n   * 矩形領域のコンストラクタです。\r\n   *\r\n   * ### Example\r\n   *     rect = phina.geom.Rect(8, 16, 32, 64);\r\n   *\r\n   * @param {Number} x 矩形の左上頂点の x 座標\r\n   * @param {Number} y 矩形の左上頂点の y 座標\r\n   * @param {Number} width 幅\r\n   * @param {Number} height 高さ\r\n   * @return {phina.geom.Rect} 矩形領域オブジェクト\r\n   */\r\n  constructor(x, y, width, height) {\r\n    this.x = 0;\r\n    this.y = 0;\r\n    this.width = 32;\r\n    this.height = 32;\r\n    this.set(x, y, width, height);\r\n  }\r\n\r\n  /**\r\n   * @method set\r\n   * @chainable\r\n   * this の各値を再設定します。\r\n   *\r\n   * ### Example\r\n   *     rect = phina.geom.Rect(8, 16, 32, 64);\r\n   *     rect.set(0, 16, 32, 64);\r\n   *\r\n   * @param {Number} x 矩形の左上頂点の x 座標\r\n   * @param {Number} y 矩形の左上頂点の y 座標\r\n   * @param {Number} width 幅\r\n   * @param {Number} height 高さ\r\n   */\r\n  set(x, y, width, height) {\r\n    this.x = x;\r\n    this.y = y;\r\n    this.width = width;\r\n    this.height = height;\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @method moveTo\r\n   * @chainable\r\n   * 矩形領域を座標 (x, y) に移動します。\r\n   *\r\n   * ### Example\r\n   *     rect = phina.geom.Rect(8, 16, 32, 64);\r\n   *     rect.centerX; // => 24\r\n   *     rect.moveTo(0, 0);\r\n   *     rect.centerX; // => 16\r\n   *\r\n   * @param {Number} x 移動先の x 座標\r\n   * @param {Number} y 移動先の y 座標\r\n   */\r\n  moveTo(x, y) {\r\n    this.x = x;\r\n    this.y = y;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @method moveBy\r\n   * @chainable\r\n   * 矩形領域を (x, y) だけ移動します。\r\n   *\r\n   * ### Example\r\n   *     rect = phina.geom.Rect(8, 16, 32, 64);\r\n   *     rect.moveBy(10, -10);\r\n   *     rect.x; // => 18\r\n   *     rect.y; // => 6\r\n   *\r\n   * @param {Number} x 移動量の x 座標\r\n   * @param {Number} y 移動量の y 座標\r\n   */\r\n  moveBy(x, y) {\r\n    this.x += x;\r\n    this.y += y;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @method setSizse\r\n   * @chainable\r\n   * 矩形領域の幅と高さを変更します。\r\n   *\r\n   * ### Example\r\n   *     rect = phina.geom.Rect(8, 16, 32, 64);\r\n   *     rect.setSize(10, 20);\r\n   *     rect.width; // => 10\r\n   *     rect.height; // => 20\r\n   *\r\n   * @param {Number} width 幅\r\n   * @param {Number} height 高さ\r\n   */\r\n  setSize(w, h) {\r\n    this.width = w;\r\n    this.height = h;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @method padding\r\n   * @chainable\r\n   * 矩形領域の中にパディング領域を設定します。\r\n   *\r\n   * 矩形領域自体のサイズはパディング領域の分だけ小さくなります。  \r\n   * 幅の指定方法は CSS の padding 指定と同じように時計回りです。  \r\n   * 引数が1つの場合は上下左右の値、引数が2つの場合は上下と左右の値、引数が３つの場合は上、左右、下の値と解釈します。\r\n   *\r\n   * ### Example\r\n   *     rect = phina.geom.Rect(50, 100, 150, 200);\r\n   *     rect.padding(10);\r\n   *     rect.x; // => 60\r\n   *     rect.y; // => 110\r\n   *     rect.width; // => 130\r\n   *     rect.height; // => 180\r\n   *\r\n   * @param {Number} top 上辺のパディング幅\r\n   * @param {Number} right 右辺のパディング幅\r\n   * @param {Number} bottom 下辺のパディング幅\r\n   * @param {Number} left 左辺のパディング幅\r\n   */\r\n  padding(top, right, bottom, left) {\r\n    // css の padding に合わせて時計回りにパラメータ調整\r\n    switch (arguments.length) {\r\n      case 1:\r\n        top = right = bottom = left = arguments[0];\r\n        break;\r\n      case 2:\r\n        top     = bottom = arguments[0];\r\n        right   = left   = arguments[1];\r\n        break;\r\n      case 3:\r\n        top     = arguments[0];\r\n        right   = left = arguments[1];\r\n        bottom  = arguments[2];\r\n        break;\r\n    }\r\n    \r\n    this.x += left;\r\n    this.y += top;\r\n    this.width -= left+right;\r\n    this.height-= top +bottom;\r\n    \r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @method contains\r\n   * 座標 (x, y) が 矩形領域の中に含まれるかどうかを返します。\r\n   *\r\n   * ### Example\r\n   *     rect = phina.geom.Rect(50, 100, 150, 200);\r\n   *     rect.contains(35, 68); // =>  true\r\n   *     rect.contains(200, 68); // => false\r\n   *\r\n   * @param {Number} x 判定する対象の x 座標\r\n   * @param {Number} y 判定する対象の y 座標\r\n   * @return {Boolean} 指定した座標が矩形領域の中に含まれるかどうか\r\n   */\r\n  contains(x, y) {\r\n    return this.left <= x && x <= this.right && this.top <= y && y <= this.bottom;\r\n  }\r\n\r\n  /**\r\n   * @method clone\r\n   * this のコピーを生成して返します。\r\n   *\r\n   * ### Example\r\n   *     rect = phina.geom.Rect(50, 100, 150, 200);\r\n   *     rect2 = rect.clone();\r\n   *     rect2.x == rect.x; // => true\r\n   *\r\n   * @return {Object} 生成した矩形領域\r\n   */\r\n  clone() {\r\n    return new Rect(this.x, this.y, this.width, this.height);\r\n  }\r\n\r\n  /**\r\n   * @method toCircle\r\n   * 矩形領域内に収まる最大の円領域を生成して返します。\r\n   *\r\n   * ### Example\r\n   *     rect = phina.geom.Rect(32, 64, 100, 200);\r\n   *     circle = rect.toCircle();\r\n   *     circle.x; // => 82\r\n   *     circle.y; // => 164\r\n   *     circle.radius; // => 50\r\n   *\r\n   * @return {Object} 生成した円領域\r\n   */\r\n  toCircle() {\r\n    var radius = ((this.width < this.height) ? this.width : this.height)/2;\r\n    return new Circle(this.centerX, this.centerY, radius);\r\n  }\r\n\r\n  /**\r\n   * @method toArray\r\n   * this の各値を要素とする配列を生成して返します。\r\n   *\r\n   * ### Example\r\n   *     rect = phina.geom.Rect(32, 64, 100, 200);\r\n   *     rect.toArray(); // => [32, 64, 100, 200]\r\n   *\r\n   * @return {Number[]} 生成した配列\r\n   */\r\n  toArray() {\r\n    return [this.x, this.y, this.width, this.height];\r\n  }\r\n\r\n  /**\r\n   * @property {Number} left\r\n   * キャンバス左端から矩形領域の左辺までの距離\r\n   *\r\n   * left を変更すると矩形領域の幅（width）が自動的に調整されます。\r\n   *\r\n   * ### Example\r\n   *     rect = phina.geom.Rect(32, 64, 100, 200);\r\n   *     rect.left; // => 32\r\n   *     rect.width; // => 100\r\n   *     rect.right; // => 132\r\n   *     \r\n   *     rect.left = 42;\r\n   *     rect.width; // => 90\r\n   */\r\n  get left()   { return this.x; }\r\n  set left(v)  { this.width -= v-this.x; this.x = v; }\r\n\r\n  /**\r\n   * @property {Number} top\r\n   * キャンバス上端から矩形領域の上辺までの位置\r\n   *\r\n   * top を変更すると矩形領域の高さ（height）が自動的に調整されます。\r\n   */\r\n  get top()   { return this.y; }\r\n  set top(v)  { this.height -= v-this.y; this.y = v; }\r\n\r\n  /**\r\n   * @property {Number} right\r\n   * キャンバス左端から矩形領域の右辺までの距離\r\n   *\r\n   * right を変更すると矩形領域の幅（width）が自動的に調整されます。\r\n   */\r\n  get right()   { return this.x + this.width; }\r\n  set right(v)  { this.width += v-this.right; }\r\n\r\n  /**\r\n   * @property {Number} bottom\r\n   * キャンバス上端から矩形領域の下辺までの位置\r\n   *\r\n   * bottom を変更すると矩形領域の高さ（height）が自動的に調整されます。\r\n   */\r\n  get bottom()   { return this.y + this.height; }\r\n  set bottom(v)  { this.height += v-this.bottom; }\r\n  \r\n  /**\r\n   * @property {Number} centerX\r\n   * 矩形領域の x 座標\r\n   *\r\n   * 現時点では読み取り専用です。\r\n   */\r\n  get centerX()   { return this.x + this.width/2; }\r\n  set centerX(v)  {\r\n    // TODO: 検討中\r\n  }\r\n  /**\r\n   * @property {Number} centerY\r\n   * 矩形領域の y 座標\r\n   *\r\n   * 現時点では読み取り専用です。\r\n   */\r\n  get centerY()   { return this.y + this.height/2; }\r\n  set centerY(v)  {\r\n    // TODO: 検討中\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * Circle.toRect\r\n * 循環参照を回避するため、ここで定義\r\n */\r\nCircle.prototype.toRect = function() {\r\n  var size = this.size;\r\n  return new Rect(this.x - this.radius, this.y - this.radius, size, size);\r\n};\n\n/**\r\n * @class phina.geom.Matrix33\r\n * # 行列クラス\r\n * 3x3の行列を表すクラスです。\r\n * \r\n * <pre>\r\n * | m00 m01 m02 |\r\n * | m10 m11 m12 |\r\n * | m20 m21 m22 |\r\n * </pre>\r\n */\r\nclass Matrix33 {\r\n\r\n  /**\r\n   * @method init\r\n   * マトリックスクラスのコンストラクタです。\r\n   *\r\n   * 引数は m00, m01, m02, m10, m11, m12, m20, m21, m22 の順に指定します。\r\n   * 引数が9個に満たない場合は単位行列を生成します。\r\n   *\r\n   * ### Example\r\n   *     mat1 = phina.geom.Matrix33(1, 2, 3, 4, 5, 6, 7, 8, 9);\r\n   *     mat2 = phina.geom.Matrix33();\r\n   *     mat1.m00 + mat2.m00; // => 2\r\n   *     mat1.m01 - mat2.m01; // => 2\r\n   *\r\n   * @param {Number...} m00, m01,... 各要素の値\r\n   * @return {phina.geom.Matrix33} 行列オブジェクト\r\n   */\r\n  constructor() {\r\n    if (arguments.length >= 9) {\r\n      this.set.apply(this, arguments);\r\n    }\r\n    else {\r\n      this.identity();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @method set\r\n   * @chainable\r\n   * this の各要素の値を再設定します。\r\n   *\r\n   * ### Example\r\n   *     mat1 = phina.geom.Matrix33(1, 2, 3, 4, 5, 6, 7, 8, 9);\r\n   *     mat2 = phina.geom.Matrix33();\r\n   *     mat2.set(1, 2, 3, 4, 5, 6, 7, 8, 9);\r\n   *     mat1.toString() == mat2.toString(); // => true\r\n   *\r\n   * @param {Number...} m00, m01,... 各要素の値\r\n   * @return {phina.geom.Matrix33} 行列オブジェクト\r\n   */\r\n  set(m00, m01, m02, m10, m11, m12, m20, m21, m22) {\r\n    this.m00 = m00; this.m01 = m01; this.m02 = m02;\r\n    this.m10 = m10; this.m11 = m11; this.m12 = m12;\r\n    this.m20 = m20; this.m21 = m21; this.m22 = m22;\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @method identity\r\n   * @chainable\r\n   * this を単位行列にします。\r\n   *\r\n   * ### Example\r\n   *     mat1 = phina.geom.Matrix33(1, 2, 3, 4, 5, 6, 7, 8, 9);\r\n   *     mat2 = phina.geom.Matrix33();\r\n   *     mat1.identity().toString() == mat2.toString(); // => true\r\n   *\r\n   * @return {phina.geom.Matrix33} 単位行列\r\n   */\r\n  identity() {\r\n    this.m00 = 1; this.m01 = 0; this.m02 = 0;\r\n    this.m10 = 0; this.m11 = 1; this.m12 = 0;\r\n    this.m20 = 0; this.m21 = 0; this.m22 = 1;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @method clone\r\n   * this のコピーを生成して返します。\r\n   *\r\n   * ### Example\r\n   *     mat1 = phina.geom.Matrix33(1, 2, 3, 4, 5, 6, 7, 8, 9);\r\n   *     mat2 = mat1.clone();\r\n   *     mat1.toString() == mat2.toString(); // => true\r\n   *     mat1 == mat2; // => false\r\n   *\r\n   * @return {phina.geom.Matrix33} 行列オブジェクト\r\n   */\r\n  clone() {\r\n    return new Matrix33(\r\n      this.m00, this.m01, this.m02,\r\n      this.m10, this.m11, this.m12,\r\n      this.m20, this.m21, this.m22\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @method determinant\r\n   * 行列式を返します\r\n   *\r\n   * ### Example\r\n   *     mat1 = phina.geom.Matrix33(0, -2, 0, -1, 3, 1, 4, 2, 1);\r\n   *     mat1.determinant(); // => -10\r\n   *     mat1.identity().determinant(); // => 1\r\n   *\r\n   * @return {Number} 行列式\r\n   */\r\n  determinant() {\r\n    var m00 = this.m00; var m01 = this.m01; var m02 = this.m02;\r\n    var m10 = this.m10; var m11 = this.m11; var m12 = this.m12;\r\n    var m20 = this.m20; var m21 = this.m21; var m22 = this.m22;\r\n    \r\n    return m00*m11*m22 + m10*m21*m02 + m01*m12*m20 - m02*m11*m20 - m01*m10*m22 - m12*m21*m00;\r\n  }\r\n\r\n  /**\r\n   * @method transpose\r\n   * @chainable\r\n   * 転置行列を返します。\r\n   *\r\n   * ### Example\r\n   *     mat1 = phina.geom.Matrix33(1, 2, 3, 4, 5, 6, 7, 8, 9);\r\n   *     mat2 = phina.geom.Matrix33(1, 4, 7, 2, 5, 8, 3, 6, 9);\r\n   *     mat1.transpose().toString() == mat2.toString(); // => true\r\n   *\r\n   * @return {phina.geom.Matrix33} 転置行列\r\n   */\r\n  transpose() {\r\n    var swap = function(a, b) {\r\n      var temp = this[a];\r\n      this[a] = this[b];\r\n      this[b] = temp;\r\n    }.bind(this);\r\n\r\n    swap('m01', 'm10');\r\n    swap('m02', 'm20');\r\n    swap('m12', 'm21');\r\n    \r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @method invert\r\n   * @chainable\r\n   * 逆行列を返します。\r\n   *\r\n   * ### Example\r\n   *     mat1 = phina.geom.Matrix33(0, -1, 1, -1, 4, -2, 1, 1, 1);\r\n   *     mat2 = mat1.clone().invert();\r\n   *     mat3 = mat1.clone().multiply(mat2);\r\n   *     mat3.toString() == phina.geom.Matrix33.IDENTITY.toString(); // => true\r\n   *\r\n   * @return {phina.geom.Matrix33} 逆行列\r\n   */\r\n  invert() {\r\n    var m00 = this.m00; var m01 = this.m01; var m02 = this.m02;\r\n    var m10 = this.m10; var m11 = this.m11; var m12 = this.m12;\r\n    var m20 = this.m20; var m21 = this.m21; var m22 = this.m22;\r\n\r\n    var det = this.determinant();\r\n\r\n    // |m00, m01, m02|\r\n    // |m10, m11, m12|\r\n    // |m20, m21, m22|\r\n    this.m00 = (m11*m22-m12*m21)/det;\r\n    this.m01 = (m10*m22-m12*m20)/det*-1;\r\n    this.m02 = (m10*m21-m11*m20)/det;\r\n    \r\n    this.m10 = (m01*m22-m02*m21)/det*-1;\r\n    this.m11 = (m00*m22-m02*m20)/det;\r\n    this.m12 = (m00*m21-m01*m20)/det*-1;\r\n    \r\n    this.m20 = (m01*m12-m02*m11)/det;\r\n    this.m21 = (m00*m12-m02*m10)/det*-1;\r\n    this.m22 = (m00*m11-m01*m10)/det;\r\n    \r\n    this.transpose();\r\n    \r\n    return this;\r\n\r\n  }\r\n\r\n  /**\r\n   * @method multiply\r\n   * this に other を乗じます。\r\n   *\r\n   * ### Example\r\n   *     mat1 = phina.geom.Matrix33(0, -1, 1, -1, 4, -2, 1, 1, 1);\r\n   *     mat2 = mat1.clone().invert();\r\n   *     mat3 = mat1.clone().multiply(mat2);\r\n   *     mat3.toString() == phina.geom.Matrix33.IDENTITY.toString(); // => true\r\n   *\r\n   * @param {phina.geom.Matrix33} other 乗じる行列\r\n   * @return {phina.geom.Matrix33} 乗算結果の行列\r\n   */\r\n  multiply(mat) {\r\n    var tm = this.m;\r\n    var om = mat.m;\r\n\r\n    var a00 = this.m00, a01 = this.m01, a02 = this.m02;\r\n    var a10 = this.m10, a11 = this.m11, a12 = this.m12;\r\n    var a20 = this.m20, a21 = this.m21, a22 = this.m22;\r\n    var b00 = mat.m00, b01 = mat.m01, b02 = mat.m02;\r\n    var b10 = mat.m10, b11 = mat.m11, b12 = mat.m12;\r\n    var b20 = mat.m20, b21 = mat.m21, b22 = mat.m22;\r\n\r\n    this.m00 = a00*b00 + a01*b10 + a02*b20;\r\n    this.m01 = a00*b01 + a01*b11 + a02*b21;\r\n    this.m02 = a00*b02 + a01*b12 + a02*b22;\r\n\r\n    this.m10 = a10*b00 + a11*b10 + a12*b20;\r\n    this.m11 = a10*b01 + a11*b11 + a12*b21;\r\n    this.m12 = a10*b02 + a11*b12 + a12*b22;\r\n\r\n    this.m20 = a20*b00 + a21*b10 + a22*b20;\r\n    this.m21 = a20*b01 + a21*b11 + a22*b21;\r\n    this.m22 = a20*b02 + a21*b12 + a22*b22;\r\n    \r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @method multiplyVector2\r\n   * this に2次元ベクトル v を乗じます。\r\n   * 2次元ベクトルは (x, y, 1) として乗算します。\r\n   *\r\n   * ### Example\r\n   *     mat = phina.geom.Matrix33(0, -1, 1, -1, 4, -2, 1, 1, 1);\r\n   *     v = phina.geom.Vector2(2, 4)\r\n   *     mat.multiplyVector2(v) // => {x: -3, y: 12}\r\n   *\r\n   * @param {phina.geom.Vector2} v 乗じるベクトル\r\n   * @return {phina.geom.Vector2} 乗算結果のベクトル\r\n   */\r\n  multiplyVector2(v) {\r\n    var vx = this.m00*v.x + this.m01*v.y + this.m02;\r\n    var vy = this.m10*v.x + this.m11*v.y + this.m12;\r\n    \r\n    // return phina.geom.Vector2(vx, vy);\r\n    return new Vector2(vx, vy);\r\n  }\r\n\r\n  // 行\r\n  /**\r\n   * @method getRow\r\n   * row 番目の行を配列で返します。row が 0、1、2 のいずれかでなければ null を返します。\r\n   *\r\n   * ### Example\r\n   *     mat1 = phina.geom.Matrix33(1, 2, 3, 4, 5, 6, 7, 8, 9);\r\n   *     mat1.getRow(0); // [1, 2, 3]\r\n   *     mat1.getRow(1); // [4, 5, 6]\r\n   *     mat1.getRow(9); // null\r\n   *\r\n   * @param {0/1/2} row 行番号\r\n   * @return {Number[]} 行を表す配列\r\n   */\r\n  getRow(row) {\r\n    if ( row === 0 ) {\r\n      return [ this.m00, this.m01, this.m02 ];\r\n    }\r\n    else if ( row === 1 ) {\r\n      return [ this.m10, this.m11, this.m12 ];\r\n    }\r\n    else if ( row === 2 ) {\r\n      return [ this.m20, this.m21, this.m22 ];\r\n    }\r\n    else {\r\n      return null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @method getCol\r\n   * col 番目の列を配列で返します。col が 0、1、2 のいずれかでなければ null を返します。\r\n   *\r\n   * ### Example\r\n   *     mat1 = phina.geom.Matrix33(1, 2, 3, 4, 5, 6, 7, 8, 9);\r\n   *     mat1.getCol(0); // [1, 4, 7]\r\n   *     mat1.getCol(1); // [2, 5, 8]\r\n   *     mat1.getRow(-1); // null\r\n   *\r\n   * @param {0/1/2} col 列番号\r\n   * @return {Number[]} 列を表す配列\r\n   */\r\n  getCol(col) {\r\n    if ( col === 0 ) {\r\n      return [ this.m00, this.m10, this.m20 ];\r\n    }\r\n    else if ( col === 1 ) {\r\n      return [ this.m01, this.m11, this.m21 ];\r\n    }\r\n    else if ( col === 2 ) {\r\n      return [ this.m02, this.m12, this.m22 ];\r\n    }\r\n    else {\r\n      return null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @method toString\r\n   * 行列を JSON 形式で表現した文字列を返します。\r\n   *\r\n   * ### Example\r\n   *     v = phina.geom.Vector2(3, 4);\r\n   *     v2 = v.clone();\r\n   *     v2.x == v.x; // => true\r\n   *\r\n   * @return {String} JSON 文字列\r\n   */\r\n  toString() {\r\n    return \"|{m00}, {m01}, {m02}|\\n|{m10}, {m11}, {m12}|\\n|{m20}, {m21}, {m22}|\".format(this);\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @property {phina.geom.Matrix33} IDENTITY 単位行列\r\n * @readonly\r\n */\r\nMatrix33.IDENTITY = new Matrix33().identity();\n\n/**\r\n* @class phina.geom.Collision\r\n* # 衝突判定用クラス\r\n* 衝突判定のためのクラスです。すべてのメソッドがスタティックメソッドです。\r\n* \r\n*/\r\nclass Collision {\r\n\r\n  /**\r\n   * @method testCircleCircle\r\n   * @static\r\n   * 2つの円領域が重なっているかどうかを判定します\r\n   *\r\n   * ### Example\r\n   *     circle1 = phina.geom.Circle(100, 100, 30);\r\n   *     circle2 = phina.geom.Circle(130, 140, 30);\r\n   * phina.geom.Collision.testCircleCircle(circle1, circle2); // => true\r\n   *\r\n   * @param {phina.geom.Circle} circle1 円領域オブジェクト\r\n   * @param {phina.geom.Circle} circle2 円領域オブジェクト\r\n   * @return {Boolean} 領域が重なっているかどうか\r\n   */\r\n  static testCircleCircle(circle0, circle1) {\r\n    var distanceSquared = phina.geom.Vector2.distanceSquared(circle0, circle1);\r\n    return distanceSquared <= Math.pow(circle0.radius + circle1.radius, 2);\r\n  }\r\n  /**\r\n   * @method testRectRect\r\n   * @static\r\n   * 2つの矩形領域が重なっているかどうかを判定します\r\n   *\r\n   * ### Example\r\n   *     rect1 = phina.geom.Rect(100, 100, 30, 40);\r\n   *     rect2 = phina.geom.Rect(200, 200, 10, 10);\r\n   *     phina.geom.Collision.testRectRect(rect1, rect2); // => false\r\n   *\r\n   * @param {phina.geom.Rect} rect1 矩形領域オブジェクト\r\n   * @param {phina.geom.Rect} rect2 矩形領域オブジェクト\r\n   * @return {Boolean} 領域が重なっているかどうか\r\n   */\r\n  static testRectRect(rect0, rect1) {\r\n    return (rect0.left < rect1.right) && (rect0.right > rect1.left) &&\r\n      (rect0.top < rect1.bottom) && (rect0.bottom > rect1.top);\r\n  }\r\n  /**\r\n   * @method testCircleRect\r\n   * @static\r\n   * 円領域と矩形領域が重なっているかどうかかを判定します\r\n   *\r\n   * ### Example\r\n   *     circle = phina.geom.Circle(100, 100, 30);\r\n   *     rect = phina.geom.Rect(100, 100, 30, 40);\r\n   *     phina.geom.Collision.testCircleRect(circle, rect); // => true\r\n   *\r\n   * @param {phina.geom.Circle} circle 円領域オブジェクト\r\n   * @param {phina.geom.Rect} rect 矩形領域オブジェクト\r\n   * @return {Boolean} 領域が重なっているかどうか\r\n   */\r\n  static testCircleRect(circle, rect) {\r\n    // まずは大きな矩形で判定(高速化)\r\n    var bigRect = phina.geom.Rect(rect.left-circle.radius, rect.top-circle.radius, rect.width+circle.radius*2, rect.height+circle.radius*2);\r\n    if (bigRect.contains(circle.x, circle.y) === false) {\r\n      return false;\r\n    }\r\n    \r\n    // 2種類の矩形と衝突判定\r\n    var r = phina.geom.Rect(rect.left-circle.radius, rect.top, rect.width+circle.radius*2, rect.height);\r\n    if (r.contains(circle.x, circle.y)) {\r\n      return true;\r\n    }\r\n    r.set(rect.left, rect.top-circle.radius, rect.width, rect.height+circle.radius*2);\r\n    if (r.contains(circle.x, circle.y)) {\r\n      return true;\r\n    }\r\n    \r\n    // 円と矩形の４点の判定\r\n    var c = phina.geom.Circle(circle.x, circle.y, circle.radius);\r\n    // left top\r\n    if (c.contains(rect.left, rect.top)) {\r\n      return true;\r\n    }\r\n    // right top\r\n    if (c.contains(rect.right, rect.top)) {\r\n      return true;\r\n    }\r\n    // right bottom\r\n    if (c.contains(rect.right, rect.bottom)) {\r\n      return true;\r\n    }\r\n    // left bottom\r\n    if (c.contains(rect.left, rect.bottom)) {\r\n      return true;\r\n    }\r\n    \r\n    return false;\r\n  }\r\n  /**\r\n   * @method testCircleLine\r\n   * @static\r\n   * 円領域と線分が重なっているかどうかを判定します\r\n   *\r\n   * ### Example\r\n   *     circle = phina.geom.Circle(100, 100, 20);\r\n   *     p1 = phina.geom.Vector2(0, 0);\r\n   *     p2 = phina.geom.Vector2(300, 400);\r\n   *     phina.geom.Collision.testCircleLine(circle, p1, p2); // => true\r\n   *\r\n   * @param {phina.geom.Circle} circle 円領域オブジェクト\r\n   * @param {phina.geom.Vector2} p1 線分の端の座標\r\n   * @param {phina.geom.Vector2} p2 線分の端の座標\r\n   * @return {Boolean} 円領域と線分が重なっているかどうか\r\n   */\r\n  static testCircleLine (circle, p1, p2) {\r\n    // 先に線分端との判定\r\n    if (circle.contains(p1.x, p1.y) || circle.contains(p2.x, p2.y)) return true;\r\n    // 半径の2乗\r\n    var r2 = circle.radius * circle.radius;\r\n    // 円の中心座標\r\n    var p3 = phina.geom.Vector2(circle.x, circle.y);\r\n    // 各ベクトル\r\n    var p1p2 = phina.geom.Vector2.sub(p1, p2);\r\n    var p1p3 = phina.geom.Vector2.sub(p1, p3);\r\n    var p2p3 = phina.geom.Vector2.sub(p2, p3);\r\n    // 外積\r\n    var cross = phina.geom.Vector2.cross(p1p2, p1p3);\r\n    // 外積の絶対値の2乗\r\n    var cross2 = cross * cross;\r\n    // p1p2の長さの2乗\r\n    var length2 = p1p2.lengthSquared();\r\n    // 円の中心から線分までの垂線の距離の2乗\r\n    var d2 = cross2 / length2;\r\n    // 円の半径の2乗より小さいなら重複\r\n    if (d2 <= r2) {\r\n      var dot1 = phina.geom.Vector2.dot(p1p3, p1p2);\r\n      var dot2 = phina.geom.Vector2.dot(p2p3, p1p2);\r\n      // 通常は内積の乗算\r\n      if (dot1 * dot2 <= 0) return true;\r\n    }\r\n    return false;\r\n  }\r\n  /**\r\n   * @method testLineLine\r\n   * @static\r\n   * 2つの線分が重なっているかどうかを判定します\r\n   * 参考：http://www5d.biglobe.ne.jp/~tomoya03/shtml/algorithm/Intersection.htm\r\n   *\r\n   * ### Example\r\n   *     p1 = phina.geom.Vector2(100, 100);\r\n   *     p2 = phina.geom.Vector2(200, 200);\r\n   *     p3 = phina.geom.Vector2(150, 240);\r\n   *     p4 = phina.geom.Vector2(200, 100);\r\n   * phina.geom.Collision.testLineLine(p1, p2, p3, p4); // => true\r\n   *\r\n   * @param {phina.geom.Vector2} p1 線分1の端の座標\r\n   * @param {phina.geom.Vector2} p2 線分1の端の座標\r\n   * @param {phina.geom.Vector2} p3 線分2の端の座標\r\n   * @param {phina.geom.Vector2} p4 線分2の端の座標\r\n   * @return {Boolean} 線分1と線分2が重なっているかどうか\r\n   */\r\n  static testLineLine (p1, p2, p3, p4) {\r\n    //同一ＸＹ軸上に乗ってる場合の誤判定回避\r\n    if (p1.x == p2.x && p1.x == p3.x && p1.x == p4.x) {\r\n      var min = Math.min(p1.y, p2.y);\r\n      var max = Math.max(p1.y, p2.y);\r\n      if (min <= p3.y && p3.y <= max || min <= p4.y && p4.y <= max) return true;\r\n      return false;\r\n    }\r\n    if (p1.y == p2.y && p1.y == p3.y && p1.y == p4.y) {\r\n      var min = Math.min(p1.x, p2.x);\r\n      var max = Math.max(p1.x, p2.x);\r\n      if (min <= p3.x && p3.x <= max || min <= p4.x && p4.x <= max) return true;\r\n      return false;\r\n    }\r\n    //通常判定\r\n    var a = (p1.x - p2.x) * (p3.y - p1.y) + (p1.y - p2.y) * (p1.x - p3.x);\r\n    var b = (p1.x - p2.x) * (p4.y - p1.y) + (p1.y - p2.y) * (p1.x - p4.x);\r\n    var c = (p3.x - p4.x) * (p1.y - p3.y) + (p3.y - p4.y) * (p3.x - p1.x);\r\n    var d = (p3.x - p4.x) * (p2.y - p3.y) + (p3.y - p4.y) * (p3.x - p2.x);\r\n    return a * b <= 0 && c * d <= 0;\r\n  }\r\n  /**\r\n   * @method testRectLine\r\n   * @static\r\n   * 矩形と線分が重なっているかどうかを判定します\r\n   *\r\n   * ### Example\r\n   *     rect = phina.geom.Rect(120, 130, 40, 50);\r\n   *     p1 = phina.geom.Vector2(100, 100);\r\n   *     p2 = phina.geom.Vector2(200, 200);\r\n   * phina.geom.Collision.testRectLine(rect, p1, p2); // => true\r\n   *\r\n   * @param {phina.geom.Rect} rect 矩形領域オブジェクト\r\n   * @param {phina.geom.Vector2} p1 線分の端の座標\r\n   * @param {phina.geom.Vector2} p2 線分の端の座標\r\n   * @return {Boolean} 矩形と線分が重なっているかどうか\r\n   */\r\n  static testRectLine (rect, p1, p2) {\r\n      //包含判定(p1が含まれてれば良いのでp2の判定はしない）\r\n      if (rect.left <= p1.x && p1.x <= rect.right && rect.top <= p1.y && p1.y <= rect.bottom ) return true;\r\n\r\n      //矩形の４点\r\n      var r1 = phina.geom.Vector2(rect.left, rect.top);     //左上\r\n      var r2 = phina.geom.Vector2(rect.right, rect.top);    //右上\r\n      var r3 = phina.geom.Vector2(rect.right, rect.bottom); //右下\r\n      var r4 = phina.geom.Vector2(rect.left, rect.bottom);  //左下\r\n\r\n      //矩形の４辺をなす線分との接触判定\r\n      if (phina.geom.Collision.testLineLine(p1, p2, r1, r2)) return true;\r\n      if (phina.geom.Collision.testLineLine(p1, p2, r2, r3)) return true;\r\n      if (phina.geom.Collision.testLineLine(p1, p2, r3, r4)) return true;\r\n      if (phina.geom.Collision.testLineLine(p1, p2, r1, r4)) return true;\r\n      return false;\r\n  }\r\n\r\n}\n\n/**\r\n * @class phina.geom.Vector3\r\n * # 3次元ベクトルクラス（未実装）\r\n * 3次元のベクトルや座標を表すクラスです。\r\n */\r\nclass Vector3 {\r\n\r\n  /** x座標 */\r\n  // x: 0,\r\n  /** y座標 */\r\n  // y: 0,\r\n  /** z座標 */\r\n  // z: 0,\r\n\r\n  /**\r\n   * @constructor\r\n   */\r\n  constructor(x, y, z) {\r\n    this.x = x || 0;\r\n    this.y = y || 0;\r\n    this.z = z || 0;\r\n  }\r\n\r\n}\n\n/**\r\n * @class phina.graphics.Canvas\r\n * キャンバス拡張クラス\r\n */\r\nclass Canvas {\r\n  // domElement: null,\r\n  // canvas: null,\r\n  // context: null,\r\n\r\n  /**\r\n   * 初期化\r\n   */\r\n  constructor(canvas) {\r\n    if (typeof canvas === 'string') {\r\n      this.canvas = document.querySelector(canvas);\r\n    } else {\r\n      this.canvas = canvas || document.createElement('canvas');\r\n    }\r\n\r\n    this.domElement = this.canvas;\r\n    this.context = this.canvas.getContext('2d');\r\n    this.context.lineCap = 'round';\r\n    this.context.lineJoin = 'round';\r\n  }\r\n\r\n  /**\r\n   * サイズをセット\r\n   */\r\n  setSize(width, height) {\r\n    this.canvas.width   = width;\r\n    this.canvas.height  = height;\r\n    return this;\r\n  }\r\n\r\n  setSizeToScreen() {\r\n    this.canvas.style.position  = \"fixed\";\r\n    this.canvas.style.margin    = \"0px\";\r\n    this.canvas.style.padding   = \"0px\";\r\n    this.canvas.style.left      = \"0px\";\r\n    this.canvas.style.top       = \"0px\";\r\n    return this.setSize(window.innerWidth, window.innerHeight);\r\n  }\r\n\r\n  fitScreen(isEver) {\r\n    isEver = isEver === undefined ? true : isEver;\r\n\r\n    var _fitFunc = function() {\r\n      var e = this.domElement;\r\n      var s = e.style;\r\n      \r\n      s.position = \"absolute\";\r\n      s.margin = \"auto\";\r\n      s.left = \"0px\";\r\n      s.top  = \"0px\";\r\n      s.bottom = \"0px\";\r\n      s.right = \"0px\";\r\n\r\n      var rateWidth = e.width/window.innerWidth;\r\n      var rateHeight= e.height/window.innerHeight;\r\n      var rate = e.height/e.width;\r\n      \r\n      if (rateWidth > rateHeight) {\r\n        s.width  = Math.floor(innerWidth)+\"px\";\r\n        s.height = Math.floor(innerWidth*rate)+\"px\";\r\n      }\r\n      else {\r\n        s.width  = Math.floor(innerHeight/rate)+\"px\";\r\n        s.height = Math.floor(innerHeight)+\"px\";\r\n      }\r\n    }.bind(this);\r\n    \r\n    // 一度実行しておく\r\n    _fitFunc();\r\n\r\n    // リサイズ時のリスナとして登録しておく\r\n    if (isEver) {\r\n      phina$1.global.addEventListener(\"resize\", _fitFunc, false);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * クリア\r\n   */\r\n  clear(x, y, width, height) {\r\n    x = x || 0;\r\n    y = y || 0;\r\n    width = width || this.width;\r\n    height= height|| this.height;\r\n    this.context.clearRect(x, y, width, height);\r\n    return this;\r\n  }\r\n\r\n  clearColor(fillStyle, x, y, width, height) {\r\n    x = x || 0;\r\n    y = y || 0;\r\n    width = width || this.width;\r\n    height= height|| this.height;\r\n\r\n    var context = this.context;\r\n\r\n    context.save();\r\n    context.setTransform(1.0, 0.0, 0.0, 1.0, 0.0, 0.0); // 行列初期化\r\n    context.fillStyle = fillStyle;     // 塗りつぶしスタイルセット\r\n    context.fillRect(x, y, width, height);\r\n    context.restore();\r\n\r\n    return this;\r\n  }\r\n\r\n\r\n  /**\r\n   * パスを開始(リセット)\r\n   */\r\n  beginPath() {\r\n    this.context.beginPath();\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   *  パスを閉じる\r\n   */\r\n  closePath() {\r\n    this.context.closePath();\r\n    return this;\r\n  }\r\n\r\n\r\n  /**\r\n   *  新規パス生成\r\n   */\r\n  moveTo(x, y) {\r\n    this.context.moveTo(x, y);\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * パスに追加\r\n   */\r\n  lineTo(x, y) {\r\n    this.context.lineTo(x, y);\r\n    return this;\r\n  }\r\n\r\n  quadraticCurveTo() {\r\n    this.context.quadraticCurveTo.apply(this.context, arguments);\r\n    return this;\r\n  }\r\n\r\n  bezierCurveTo() {\r\n    this.context.bezierCurveTo.apply(this.context, arguments);\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * パス内を塗りつぶす\r\n   */\r\n  fill() {\r\n    this.context.fill();\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * パス上にラインを引く\r\n   */\r\n  stroke() {\r\n    this.context.stroke();\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * クリップ\r\n   */\r\n  clip() {\r\n    this.context.clip();\r\n    return this;\r\n  }\r\n\r\n      \r\n  /**\r\n   * 点描画\r\n   */\r\n  drawPoint(x, y) {\r\n    return this.strokeRect(x, y, 1, 1);\r\n  }\r\n\r\n  /**\r\n   * ラインパスを作成\r\n   */\r\n  line(x0, y0, x1, y1) {\r\n    return this.moveTo(x0, y0).lineTo(x1, y1);\r\n  }\r\n  \r\n  /**\r\n   * ラインを描画\r\n   */\r\n  drawLine(x0, y0, x1, y1) {\r\n    return this.beginPath().line(x0, y0, x1, y1).stroke();\r\n  }\r\n\r\n  /**\r\n   * ダッシュラインを描画\r\n   */\r\n  drawDashLine(x0, y0, x1, y1, pattern) {\r\n    var patternTable = null;\r\n    if (typeof(pattern) == \"string\") {\r\n      patternTable = pattern;\r\n    }\r\n    else {\r\n      pattern = pattern || 0xf0f0;\r\n      patternTable = pattern.toString(2);\r\n    }\r\n    patternTable = patternTable.padding(16, '1');\r\n    \r\n    var vx = x1-x0;\r\n    var vy = y1-y0;\r\n    var len = Math.sqrt(vx*vx + vy*vy);\r\n    vx/=len; vy/=len;\r\n    \r\n    var x = x0;\r\n    var y = y0;\r\n    for (var i=0; i<len; ++i) {\r\n      if (patternTable[i%16] == '1') {\r\n        this.drawPoint(x, y);\r\n        // this.fillRect(x, y, this.context.lineWidth, this.context.lineWidth);\r\n      }\r\n      x += vx;\r\n      y += vy;\r\n    }\r\n    \r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * v0(x0, y0), v1(x1, y1) から角度を求めて矢印を描画\r\n   * http://hakuhin.jp/as/rotation.html\r\n   */\r\n  drawArrow(x0, y0, x1, y1, arrowRadius) {\r\n    var vx = x1-x0;\r\n    var vy = y1-y0;\r\n    var angle = Math.atan2(vy, vx)*180/Math.PI;\r\n    \r\n    this.drawLine(x0, y0, x1, y1);\r\n    this.fillPolygon(x1, y1, arrowRadius || 5, 3, angle);\r\n    \r\n    return this;\r\n  }\r\n\r\n\r\n  /**\r\n   * lines\r\n   */\r\n  lines() {\r\n    this.moveTo(arguments[0], arguments[1]);\r\n    for (var i=1,len=arguments.length/2; i<len; ++i) {\r\n      this.lineTo(arguments[i*2], arguments[i*2+1]);\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * ラインストローク描画\r\n   */\r\n  strokeLines() {\r\n    this.beginPath();\r\n    this.lines.apply(this, arguments);\r\n    this.stroke();\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * ライン塗りつぶし描画\r\n   */\r\n  fillLines() {\r\n    this.beginPath();\r\n    this.lines.apply(this, arguments);\r\n    this.fill();\r\n    return this;\r\n  }\r\n  \r\n  /**\r\n   * 四角形パスを作成する\r\n   */\r\n  rect(x, y, width, height) {\r\n    this.context.rect.apply(this.context, arguments);\r\n    return this;\r\n  }\r\n  \r\n  /**\r\n   * 四角形塗りつぶし描画\r\n   */\r\n  fillRect() {\r\n    this.context.fillRect.apply(this.context, arguments);\r\n    return this;\r\n  }\r\n  \r\n  /**\r\n   * 四角形ライン描画\r\n   */\r\n  strokeRect() {\r\n    this.context.strokeRect.apply(this.context, arguments);\r\n    return this;\r\n  }\r\n  \r\n  /**\r\n   * 角丸四角形パス\r\n   */\r\n  roundRect(x, y, width, height, radius) {\r\n    var l = x + radius;\r\n    var r = x + width - radius;\r\n    var t = y + radius;\r\n    var b = y + height - radius;\r\n    \r\n    /*\r\n    var ctx = this.context;\r\n    ctx.moveTo(l, y);\r\n    ctx.lineTo(r, y);\r\n    ctx.quadraticCurveTo(x+width, y, x+width, t);\r\n    ctx.lineTo(x+width, b);\r\n    ctx.quadraticCurveTo(x+width, y+height, r, y+height);\r\n    ctx.lineTo(l, y+height);\r\n    ctx.quadraticCurveTo(x, y+height, x, b);\r\n    ctx.lineTo(x, t);\r\n    ctx.quadraticCurveTo(x, y, l, y);\r\n    /**/\r\n    \r\n    this.context.arc(l, t, radius,     -Math.PI, -Math.PI*0.5, false);  // 左上\r\n    this.context.arc(r, t, radius, -Math.PI*0.5,            0, false);  // 右上\r\n    this.context.arc(r, b, radius,            0,  Math.PI*0.5, false);  // 右下\r\n    this.context.arc(l, b, radius,  Math.PI*0.5,      Math.PI, false);  // 左下\r\n    this.closePath();\r\n    \r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * 角丸四角形塗りつぶし\r\n   */\r\n  fillRoundRect(x, y, width, height, radius) {\r\n    return this.beginPath().roundRect(x, y, width, height, radius).fill();\r\n  }\r\n\r\n  /**\r\n   * 角丸四角形ストローク描画\r\n   */\r\n  strokeRoundRect(x, y, width, height, radius) {\r\n    return this.beginPath().roundRect(x, y, width, height, radius).stroke();\r\n  }\r\n\r\n  /**\r\n   * 円のパスを設定\r\n   */\r\n  circle(x, y, radius) {\r\n    this.context.arc(x, y, radius, 0, Math.PI*2, false);\r\n    return this;\r\n  }\r\n  \r\n  /**\r\n   * 塗りつぶし円を描画\r\n   */\r\n  fillCircle(x, y, radius) {\r\n    var c = this.context;\r\n    c.beginPath();\r\n    c.arc(x, y, radius, 0, Math.PI*2, false);\r\n    c.closePath();\r\n    c.fill();\r\n    return this;\r\n  }\r\n  \r\n  /**\r\n   * ストローク円を描画\r\n   */\r\n  strokeCircle(x, y, radius) {\r\n    var c = this.context;\r\n    c.beginPath();\r\n    c.arc(x, y, radius, 0, Math.PI*2, false);\r\n    c.closePath();\r\n    c.stroke();\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * 円弧のパスを設定\r\n   */\r\n  arc(x, y, radius, startAngle, endAngle, anticlockwise) {\r\n    this.context.arc(x, y, radius, startAngle, endAngle, anticlockwise);\r\n    return this;\r\n  }\r\n  \r\n  /**\r\n   * 塗りつぶし円弧を描画\r\n   */\r\n  fillArc(x, y, radius, startAngle, endAngle, anticlockwise) {\r\n    return this.beginPath().arc(x, y, radius, startAngle, endAngle, anticlockwise).fill();\r\n  }\r\n  \r\n  /**\r\n   * ストローク円弧を描画\r\n   */\r\n  strokeArc(x, y, radius, startAngle, endAngle, anticlockwise) {\r\n    return this.beginPath().arc(x, y, radius, startAngle, endAngle, anticlockwise).stroke();\r\n  }\r\n\r\n\r\n  pie(x, y, radius, startAngle, endAngle, anticlockwise) {\r\n    var context = this.context;\r\n    context.beginPath();\r\n    context.moveTo(0, 0);\r\n    context.arc(x, y, radius, startAngle, endAngle, anticlockwise);\r\n    context.closePath();\r\n    return this;\r\n  }\r\n  fillPie(x, y, radius, startAngle, endAngle, anticlockwise) {\r\n    return this.beginPath().pie(x, y, radius, startAngle, endAngle, anticlockwise).fill();\r\n  }\r\n  strokePie(x, y, radius, startAngle, endAngle, anticlockwise) {\r\n    return this.beginPath().pie(x, y, radius, startAngle, endAngle, anticlockwise).stroke();\r\n  }\r\n\r\n  \r\n  /**\r\n   * ポリゴンパス\r\n   */\r\n  polygon(x, y, size, sides, offsetAngle) {\r\n    var radDiv = (Math.PI*2)/sides;\r\n    var radOffset = (offsetAngle!==undefined) ? offsetAngle*Math.PI/180 : -Math.PI/2;\r\n    \r\n    this.moveTo(x + Math.cos(radOffset)*size, y + Math.sin(radOffset)*size);\r\n    for (var i=1; i<sides; ++i) {\r\n      var rad = radDiv*i+radOffset;\r\n      this.lineTo(\r\n        x + Math.cos(rad)*size,\r\n        y + Math.sin(rad)*size\r\n      );\r\n    }\r\n    this.closePath();\r\n    return this;\r\n  }\r\n  /**\r\n   * ポリゴン塗りつぶし\r\n   */\r\n  fillPolygon(x, y, radius, sides, offsetAngle) {\r\n    return this.beginPath().polygon(x, y, radius, sides, offsetAngle).fill();\r\n  }\r\n  /**\r\n   * ポリゴンストローク描画\r\n   */\r\n  strokePolygon(x, y, radius, sides, offsetAngle) {\r\n    return this.beginPath().polygon(x, y, radius, sides, offsetAngle).stroke();\r\n  }\r\n  \r\n  /**\r\n   * star\r\n   */\r\n  star(x, y, radius, sides, sideIndent, offsetAngle) {\r\n    var x = x || 0;\r\n    var y = y || 0;\r\n    var radius = radius || 64;\r\n    var sides = sides || 5;\r\n    var sideIndentRadius = radius * (sideIndent || 0.38);\r\n    var radOffset = (offsetAngle) ? offsetAngle*Math.PI/180 : -Math.PI/2;\r\n    var radDiv = (Math.PI*2)/sides/2;\r\n\r\n    this.moveTo(\r\n      x + Math.cos(radOffset)*radius,\r\n      y + Math.sin(radOffset)*radius\r\n    );\r\n    for (var i=1; i<sides*2; ++i) {\r\n      var rad = radDiv*i + radOffset;\r\n      var len = (i%2) ? sideIndentRadius : radius;\r\n      this.lineTo(\r\n        x + Math.cos(rad)*len,\r\n        y + Math.sin(rad)*len\r\n      );\r\n    }\r\n    this.closePath();\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * 星を塗りつぶし描画\r\n   */\r\n  fillStar(x, y, radius, sides, sideIndent, offsetAngle) {\r\n    this.beginPath().star(x, y, radius, sides, sideIndent, offsetAngle).fill();\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * 星をストローク描画\r\n   */\r\n  strokeStar(x, y, radius, sides, sideIndent, offsetAngle) {\r\n    this.beginPath().star(x, y, radius, sides, sideIndent, offsetAngle).stroke();\r\n    return this;\r\n  }\r\n\r\n  /*\r\n   * heart\r\n   */\r\n  heart(x, y, radius, angle) {\r\n    var half_radius = radius*0.5;\r\n    var rad = (angle === undefined) ? Math.PI/4 : Math.degToRad(angle);\r\n\r\n    // 半径 half_radius の角度 angle 上の点との接線を求める\r\n    var p = Math.cos(rad)*half_radius;\r\n    var q = Math.sin(rad)*half_radius;\r\n\r\n    // 円の接線の方程式 px + qy = r^2 より y = (r^2-px)/q\r\n    var x2 = -half_radius;\r\n    var y2 = (half_radius*half_radius-p*x2)/q;\r\n\r\n    // 中心位置調整\r\n    var height = y2 + half_radius;\r\n    var offsetY = half_radius-height/2;\r\n\r\n    // パスをセット\r\n    this.moveTo(0+x, y2+y+offsetY);\r\n\r\n    this.arc(-half_radius+x, 0+y+offsetY, half_radius, Math.PI-rad, Math.PI*2);\r\n    this.arc(half_radius+x, 0+y+offsetY, half_radius, Math.PI, rad);\r\n    this.closePath();\r\n\r\n    return this;\r\n  }\r\n\r\n  /*\r\n   * fill heart\r\n   */\r\n  fillHeart(x, y, radius, angle) {\r\n    return this.beginPath().heart(x, y, radius, angle).fill();\r\n  }\r\n\r\n  /*\r\n   * stroke heart\r\n   */\r\n  strokeHeart(x, y, radius, angle) {\r\n    return this.beginPath().heart(x, y, radius, angle).stroke();\r\n  }\r\n\r\n  /*\r\n   * http://stackoverflow.com/questions/14169234/the-relation-of-the-bezier-curve-and-ellipse\r\n   */\r\n  ellipse(x, y, w, h) {\r\n    var ctx = this.context;\r\n    var kappa = 0.5522848;\r\n\r\n    var ox = (w / 2) * kappa; // control point offset horizontal\r\n    var oy = (h / 2) * kappa; // control point offset vertical\r\n    var xe = x + w;           // x-end\r\n    var ye = y + h;           // y-end\r\n    var xm = x + w / 2;       // x-middle\r\n    var ym = y + h / 2;       // y-middle\r\n\r\n    ctx.moveTo(x, ym);\r\n    ctx.bezierCurveTo(x, ym - oy, xm - ox, y, xm, y);\r\n    ctx.bezierCurveTo(xm + ox, y, xe, ym - oy, xe, ym);\r\n    ctx.bezierCurveTo(xe, ym + oy, xm + ox, ye, xm, ye);\r\n    ctx.bezierCurveTo(xm - ox, ye, x, ym + oy, x, ym);\r\n    // ctx.closePath();\r\n\r\n    return this;\r\n  }\r\n\r\n  fillEllipse(x, y, width, height) {\r\n    return this.beginPath().ellipse(x, y, width, height).fill();\r\n  }\r\n  strokeEllipse(x, y, width, height) {\r\n    return this.beginPath().ellipse(x, y, width, height).stroke();\r\n  }\r\n\r\n  fillText() {\r\n    this._context.fillText.apply(this._context, arguments);\r\n    return this;\r\n  }\r\n\r\n  strokeText() {\r\n    this._context.strokeText.apply(this._context, arguments);\r\n    return this;\r\n  }\r\n\r\n  /*\r\n   * 画像を描画\r\n   */\r\n  drawImage() {\r\n    this.context.drawImage.apply(this.context, arguments);\r\n  }\r\n\r\n  /**\r\n   * 行列をセット\r\n   */\r\n  setTransform(m11, m12, m21, m22, dx, dy) {\r\n    this.context.setTransform(m11, m12, m21, m22, dx, dy);\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * 行列をリセット\r\n   */\r\n  resetTransform() {\r\n    this.setTransform(1.0, 0.0, 0.0, 1.0, 0.0, 0.0);\r\n    return this;\r\n  }\r\n  /**\r\n   * 中心に移動\r\n   */\r\n  transformCenter() {\r\n    this.context.setTransform(1, 0, 0, 1, this.width/2, this.height/2);\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * 移動\r\n   */\r\n  translate(x, y) {\r\n    this.context.translate(x, y);\r\n    return this;\r\n  }\r\n  \r\n  /**\r\n   * 回転\r\n   */\r\n  rotate(rotation) {\r\n    this.context.rotate(rotation);\r\n    return this;\r\n  }\r\n  \r\n  /**\r\n   * スケール\r\n   */\r\n  scale(scaleX, scaleY) {\r\n    this.context.scale(scaleX, scaleY);\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * 状態を保存\r\n   */\r\n  save() {\r\n    this.context.save();\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * 状態を復元\r\n   */\r\n  restore() {\r\n    this.context.restore();\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * 画像として保存\r\n   */\r\n  saveAsImage(mime_type) {\r\n    mime_type = mime_type || \"image/png\";\r\n    var data_url = this.canvas.toDataURL(mime_type);\r\n    // data_url = data_url.replace(mime_type, \"image/octet-stream\");\r\n    window.open(data_url, \"save\");\r\n    \r\n    // toDataURL を使えば下記のようなツールが作れるかも!!\r\n    // TODO: プログラムで絵をかいて保存できるツール\r\n  }\r\n\r\n  /**\r\n   * 幅\r\n   */\r\n  get width()   { return this.canvas.width; }\r\n  set width(v)  { this.canvas.width = v; }\r\n\r\n  /**\r\n   * 高さ\r\n   */\r\n  get height()   { return this.canvas.height; }\r\n  set height(v)  { this.canvas.height = v; }\r\n\r\n  get fillStyle()   { return this.context.fillStyle; }\r\n  set fillStyle(v)  { this.context.fillStyle = v; }\r\n\r\n  get strokeStyle()   { return this.context.strokeStyle; }\r\n  set strokeStyle(v)  { this.context.strokeStyle = v; }\r\n\r\n  get globalAlpha()   { return this.context.globalAlpha; }\r\n  set globalAlpha(v)  { this.context.globalAlpha = v; }\r\n\r\n  get globalCompositeOperation()   { return this.context.globalCompositeOperation; }\r\n  set globalCompositeOperation(v)  { this.context.globalCompositeOperation = v; }\r\n\r\n  get shadowBlur()   { return this.context.shadowBlur; }\r\n  set shadowBlur(v)  { this.context.shadowBlur = v; }\r\n\r\n  get shadowColor()   { return this.context.shadowColor; }\r\n  set shadowColor(v)  { this.context.shadowColor = v; }\r\n\r\n  get shadowOffsetX()   { return this.context.shadowOffsetX; }\r\n  set shadowOffsetX(v)  { this.context.shadowOffsetX = v; }\r\n\r\n  get shadowOffsetY()   { return this.context.shadowOffsetY; }\r\n  set shadowOffsetY(v)  { this.context.shadowOffsetY = v; }\r\n\r\n  get lineCap()   { return this.context.lineCap; }\r\n  set lineCap(v)  { this.context.lineCap = v; }\r\n\r\n  get lineJoin()   { return this.context.lineJoin; }\r\n  set lineJoin(v)  { this.context.lineJoin = v; }\r\n\r\n  get miterLimit()   { return this.context.miterLimit; }\r\n  set miterLimit(v)  { this.context.miterLimit = v; }\r\n\r\n  get lineWidth()   { return this.context.lineWidth; }\r\n  set lineWidth(v)  { this.context.lineWidth = v; }\r\n\r\n  get font()   { return this.context.font; }\r\n  set font(v)  { this.context.font = v; }\r\n\r\n  get textAlign()   { return this.context.textAlign; }\r\n  set textAlign(v)  { this.context.textAlign = v; }\r\n\r\n  get textBaseline()   { return this.context.textBaseline; }\r\n  set textBaseline(v)  { this.context.textBaseline = v; }\r\n\r\n  get imageSmoothingEnabled()   { return this.context.imageSmoothingEnabled; }\r\n  set imageSmoothingEnabled(v)  {\r\n    this.context.imageSmoothingEnabled = v;\r\n    this.context.webkitImageSmoothingEnabled = v;\r\n    this.context.mozImageSmoothingEnabled = v;\r\n  }\r\n\r\n  static measureText(font, text) {\r\n    this._context.font = font;\r\n    return this._context.measureText(text);\r\n  }\r\n\r\n  static createLinearGradient() {\r\n    return this._context.createLinearGradient.apply(this._context, arguments);\r\n  }\r\n\r\n  static createRadialGradient() {\r\n    return this._context.createRadialGradient.apply(this._context, arguments);\r\n  }\r\n\r\n}\r\n\r\nCanvas._context = (function() {\r\n  if (Support.canvas) {\r\n    return document.createElement('canvas').getContext('2d');\r\n  }\r\n  else {\r\n    return null;\r\n  }\r\n})();\n\n// import { first, last, clear } from \"../core/array\"\r\n\r\n/**\r\n * @class phina.input.Input\r\n * @extends phina.util.EventDispatcher\r\n */\r\nclass Input extends EventDispatcher {\r\n\r\n  // /** domElement */\r\n  // domElement = null\r\n\r\n  constructor(domElement) {\r\n    super();\r\n\r\n    this.domElement = domElement || window.document;\r\n\r\n    this.position = new Vector2(0, 0);\r\n    this.startPosition = new Vector2(0, 0);\r\n    this.deltaPosition = new Vector2(0, 0);\r\n    this.prevPosition = new Vector2(0, 0);\r\n    this._tempPosition = new Vector2(0, 0);\r\n\r\n    this.maxCacheNum = Input.defaults.maxCacheNum;\r\n    this.minDistance = Input.defaults.minDistance;\r\n    this.maxDistance = Input.defaults.maxDistance;\r\n    this.cachePositions = [];\r\n    this.flickVelocity = new Vector2(0, 0);\r\n\r\n    this.flags = 0;\r\n  }\r\n\r\n  update() {\r\n    this.last = this.now;\r\n    this.now = this.flags;\r\n    this.start = (this.now ^ this.last) & this.now;\r\n    this.end   = (this.now ^ this.last) & this.last;\r\n\r\n    // 変化値を更新\r\n    this.deltaPosition.x = this._tempPosition.x - this.position.x;\r\n    this.deltaPosition.y = this._tempPosition.y - this.position.y;\r\n\r\n    if (this.deltaPosition.x === 0 && this.deltaPosition.y === 0) {\r\n      this._moveFlag = false;\r\n    }\r\n    else {\r\n      this._moveFlag = true;\r\n    }\r\n\r\n    if (this.start) {\r\n      this.startPosition.set(this.position.x, this.position.y);\r\n    }\r\n\r\n    // 前回の座標を更新\r\n    this.prevPosition.set(this.position.x, this.position.y);\r\n\r\n    // 現在の位置を更新\r\n    this.position.set(this._tempPosition.x, this._tempPosition.y);\r\n\r\n    if (this.cachePositions.length > this.maxCacheNum) {\r\n      this.cachePositions.shift();\r\n    }\r\n    this.cachePositions.push(this.position.clone());\r\n  }\r\n\r\n  _start(x, y, flag) {\r\n    flag = (flag !== undefined) ? flag : 1;\r\n    // console.log('start', x, y);\r\n    this._move(x, y);\r\n\r\n    this.flags |= flag;\r\n\r\n    var x = this._tempPosition.x;\r\n    var y = this._tempPosition.y;\r\n    this.position.set(x, y);\r\n    this.prevPosition.set(x, y);\r\n\r\n    this.flickVelocity.set(0, 0);\r\n    // this.cachePositions.clear();\r\n    this.cachePositions.length = 0;\r\n  }\r\n\r\n  _end(flag) {\r\n    flag = (flag !== undefined) ? flag : 1;\r\n    this.flags &= ~(flag);\r\n\r\n    if (this.cachePositions.length < 2) return;\r\n\r\n    // var first = this.cachePositions.first;\r\n    // var last = this.cachePositions.last;\r\n    var first = this.cachePositions[0];\r\n    var last = this.cachePositions[this.cachePositions.length-1];\r\n\r\n    var v = Vector2.sub(last, first);\r\n\r\n    var len = v.length();\r\n\r\n    if (len > this.minDistance) {\r\n      // var normalLen = len.clamp(this.minDistance, this.maxDistance);\r\n      var normalLen = clamp(len, this.minDistance, this.maxDistance);\r\n      v.div(len).mul(normalLen);\r\n      this.flickVelocity.set(v.x, v.y);\r\n    }\r\n\r\n    // this.cachePositions.clear();\r\n    this.cachePositions.length = 0;\r\n  }\r\n\r\n  // スケールを考慮\r\n  _move(x, y) {\r\n    this._tempPosition.x = x;\r\n    this._tempPosition.y = y;\r\n\r\n    // adjust scale\r\n    var elm = this.domElement;\r\n    var rect = elm.getBoundingClientRect();\r\n    if (rect.width) {\r\n      this._tempPosition.x *= elm.width / rect.width;\r\n    }\r\n    if (rect.height) {\r\n      this._tempPosition.y *= elm.height / rect.height;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @property    x\r\n   * x座標値\r\n   */\r\n  get x() { return this.position.x; }\r\n  set x(v) { this.position.x = v; }\r\n\r\n  /**\r\n   * @property    y\r\n   * y座標値\r\n   */\r\n  get y() { return this.position.y; }\r\n  set y(v) { this.position.y = v; }\r\n\r\n  /**\r\n   * @property    dx\r\n   * dx値\r\n   */\r\n  get dx() { return this.deltaPosition.x; }\r\n  set dx(v) { this.deltaPosition.x = v; }\r\n\r\n  /**\r\n   * @property    dy\r\n   * dy値\r\n   */\r\n  get dy() { return this.deltaPosition.y; }\r\n  set dy(v) { this.deltaPosition.y = v; }\r\n\r\n  /**\r\n   * @property    fx\r\n   * fx値\r\n   */\r\n  get fx() { return this.flickVelocity.x; }\r\n  set fx(v) { this.flickVelocity.x = v; }\r\n\r\n  /**\r\n   * @property    fy\r\n   * fy値\r\n   */\r\n  get fy() { return this.flickVelocity.y; }\r\n  set fy(v) { this.flickVelocity.y = v; }\r\n\r\n}\r\n\r\nInput.defaults = {\r\n  maxCacheNum: 3,\r\n  minDistance: 10,\r\n  maxDistance: 100,\r\n};\n\n/**\r\n * @class phina.input.Keyboard\r\n * @extends phina.input.Input\r\n */\r\nclass Keyboard extends Input {\r\n\r\n  /**\r\n   * @constructor\r\n   */\r\n  constructor(domElement) {\r\n    super(domElement);\r\n\r\n    this.key = {};\r\n    this.press  = {};\r\n    this.down   = {};\r\n    this.up     = {};\r\n    this.last   = {};\r\n\r\n    this._keydown = null;\r\n    this._keyup = null;\r\n    this._keypress = null;\r\n\r\n    var self = this;\r\n    this.domElement.addEventListener('keydown', function(e) {\r\n      self.key[e.keyCode] = true;\r\n      self._keydown = e.keyCode;\r\n    });\r\n\r\n    this.domElement.addEventListener('keyup', function(e) {\r\n      self.key[e.keyCode] = false;\r\n      self._keyup = e.keyCode;\r\n    });\r\n    this.domElement.addEventListener('keypress', function(e) {\r\n      self._keypress = e.keyCode;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 情報更新処理\r\n   * マイフレーム呼んで下さい.\r\n   * @private\r\n   */\r\n  update() {\r\n    // TODO: 一括ビット演算で行うよう修正する\r\n    for (var k in this.key) {\r\n      this.last[k]    = this.press[k];\r\n      this.press[k]   = this.key[k];\r\n      \r\n      this.down[k] = (this.press[k] ^ this.last[k]) & this.press[k];\r\n      this.up[k] = (this.press[k] ^ this.last[k]) & this.last[k];\r\n    }\r\n\r\n    if (this._keydown) {\r\n      this.flare('keydown', { keyCode: this._keydown });\r\n      this._keydown = null;\r\n    }\r\n    if (this._keyup) {\r\n      this.flare('keyup', { keyCode: this._keyup });\r\n      this._keyup = null;\r\n    }\r\n    if (this._keypress) {\r\n      this.flare('keypress', { keyCode: this._keypress });\r\n      this._keypress = null;\r\n    }\r\n    \r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * キーを押しているかをチェック\r\n   * @param   {Number/String} key keyCode or keyName\r\n   * @returns {Boolean}   チェック結果\r\n   */\r\n  getKey(key) {\r\n    if (typeof(key) === \"string\") {\r\n      key = Keyboard.KEY_CODE[key];\r\n    }\r\n    return !!this.press[key] === true;\r\n  }\r\n  \r\n  /**\r\n   * キーを押したかをチェック\r\n   * @param   {Number/String} key keyCode or keyName\r\n   * @returns {Boolean}   チェック結果\r\n   */\r\n  getKeyDown(key) {\r\n    if (typeof(key) == \"string\") {\r\n      key = Keyboard.KEY_CODE[key];\r\n    }\r\n    return this.down[key] == true;\r\n  }\r\n  \r\n  /**\r\n   * キーを離したかをチェック\r\n   * @param   {Number/String} key keyCode or keyName\r\n   * @returns {Boolean}   チェック結果\r\n   */\r\n  getKeyUp(key) {\r\n    if (typeof(key) == \"string\") {\r\n      key = Keyboard.KEY_CODE[key];\r\n    }\r\n    return this.up[key] == true;\r\n  }\r\n  \r\n  /**\r\n   * キーの方向を Angle(Degree) で取得\r\n   * @returns {Boolean}   角度(Degree)\r\n   */\r\n  getKeyAngle() {\r\n    var angle = null;\r\n    var arrowBit =\r\n      (this.getKey(\"left\")   << 3) | // 1000\r\n      (this.getKey(\"up\")     << 2) | // 0100\r\n      (this.getKey(\"right\")  << 1) | // 0010\r\n      (this.getKey(\"down\"));         // 0001\r\n    \r\n    if (arrowBit !== 0 && Keyboard.ARROW_BIT_TO_ANGLE_TABLE.hasOwnProperty(arrowBit)) {\r\n      angle = Keyboard.ARROW_BIT_TO_ANGLE_TABLE[arrowBit];\r\n    }\r\n    \r\n    return angle;\r\n  }\r\n\r\n  /**\r\n   * キーの押している向きを取得\r\n   * 正規化されている\r\n   */\r\n  getKeyDirection() {\r\n    var direction = new Vector2(0, 0);\r\n\r\n    if (this.getKey(\"left\")) {\r\n      direction.x = -1;\r\n    }\r\n    else if (this.getKey(\"right\")) {\r\n      direction.x = 1;\r\n    }\r\n    if (this.getKey(\"up\")) {\r\n      direction.y = -1;\r\n    }\r\n    else if (this.getKey(\"down\")) {\r\n      direction.y = 1;\r\n    }\r\n\r\n    if (direction.x && direction.y) {\r\n      direction.div(Math.SQRT2);\r\n    }\r\n\r\n    return direction;\r\n  }\r\n  \r\n  /**\r\n   * キーの状態を設定する\r\n   */\r\n  setKey(key, flag) {\r\n    if (typeof(key) == \"string\") {\r\n      key = Keyboard.KEY_CODE[key];\r\n    }\r\n    this.key[key] = flag;\r\n    \r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * キーを全て離したことにする\r\n   */\r\n  clearKey() {\r\n    this.key = {};\r\n    \r\n    return this;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @static\r\n * @enum ARROW_BIT_TO_ANGLE_TABLE\r\n * 方向のアングル jsduckでは数字をプロパティに指定できない？\r\n * @private\r\n */\r\nKeyboard.ARROW_BIT_TO_ANGLE_TABLE = {\r\n  /* @property 下 */\r\n  0x01: 270,\r\n  /* @property 右 */\r\n  0x02:   0,\r\n  /* @property 上 */\r\n  0x04:  90,\r\n  /* @property 左 */\r\n  0x08: 180,\r\n\r\n  /* @property 右上 */\r\n  0x06:  45,\r\n  /* @property 右下 */\r\n  0x03: 315,\r\n  /* @property 左上 */\r\n  0x0c: 135,\r\n  /* @property 左下 */\r\n  0x09: 225,\r\n\r\n  // 三方向同時押し対応\r\n  // 想定外の操作だが対応しといたほうが無難\r\n  /* @property 右上左 */\r\n  0x0e:  90,\r\n  /* @property 上左下 */\r\n  0x0d: 180,\r\n  /* @property 左下右 */\r\n  0x0b: 270,\r\n  /* @property 下右上 */\r\n  0x07:   0,\r\n};\r\n\r\n/*\r\n * @static\r\n * @enum KEY_CODE\r\n * キー番号\r\n * @private\r\n */\r\nKeyboard.KEY_CODE = {\r\n  /* @property */\r\n  \"backspace\" : 8,\r\n  /* @property */\r\n  \"tab\"       : 9,\r\n  /* @property */\r\n  \"enter\"     : 13,\r\n  /* @property */\r\n  \"return\"    : 13,\r\n  /* @property */\r\n  \"shift\"     : 16,\r\n  /* @property */\r\n  \"ctrl\"      : 17,\r\n  /* @property */\r\n  \"alt\"       : 18,\r\n  /* @property */\r\n  \"pause\"     : 19,\r\n  /* @property */\r\n  \"capslock\"  : 20,\r\n  /* @property */\r\n  \"escape\"    : 27,\r\n  /* @property */\r\n  \"pageup\"    : 33,\r\n  /* @property */\r\n  \"pagedown\"  : 34,\r\n  /* @property */\r\n  \"end\"       : 35,\r\n  /* @property */\r\n  \"home\"      : 36,\r\n  /* @property */\r\n  \"left\"      : 37,\r\n  /* @property */\r\n  \"up\"        : 38,\r\n  /* @property */\r\n  \"right\"     : 39,\r\n  /* @property */\r\n  \"down\"      : 40,\r\n  /* @property */\r\n  \"insert\"    : 45,\r\n  /* @property */\r\n  \"delete\"    : 46,\r\n  \r\n  /* @property */\r\n  \"0\" : 48,\r\n  /* @property */\r\n  \"1\" : 49,\r\n  /* @property */\r\n  \"2\" : 50,\r\n  /* @property */\r\n  \"3\" : 51,\r\n  /* @property */\r\n  \"4\" : 52,\r\n  /* @property */\r\n  \"5\" : 53,\r\n  /* @property */\r\n  \"6\" : 54,\r\n  /* @property */\r\n  \"7\" : 55,\r\n  /* @property */\r\n  \"8\" : 56,\r\n  /* @property */\r\n  \"9\" : 57,\r\n  /* @property */\r\n  \r\n  \"a\" : 65,\r\n  /* @property */\r\n  \"A\" : 65,\r\n  /* @property */\r\n  \"b\" : 66,\r\n  /* @property */\r\n  \"B\" : 66,\r\n  /* @property */\r\n  \"c\" : 67,\r\n  /* @property */\r\n  \"C\" : 67,\r\n  /* @property */\r\n  \"d\" : 68,\r\n  /* @property */\r\n  \"D\" : 68,\r\n  /* @property */\r\n  \"e\" : 69,\r\n  /* @property */\r\n  \"E\" : 69,\r\n  /* @property */\r\n  \"f\" : 70,\r\n  /* @property */\r\n  \"F\" : 70,\r\n  /* @property */\r\n  \"g\" : 71,\r\n  /* @property */\r\n  \"G\" : 71,\r\n  /* @property */\r\n  \"h\" : 72,\r\n  /* @property */\r\n  \"H\" : 72,\r\n  /* @property */\r\n  \"i\" : 73,\r\n  /* @property */\r\n  \"I\" : 73,\r\n  /* @property */\r\n  \"j\" : 74,\r\n  /* @property */\r\n  \"J\" : 74,\r\n  /* @property */\r\n  \"k\" : 75,\r\n  /* @property */\r\n  \"K\" : 75,\r\n  /* @property */\r\n  \"l\" : 76,\r\n  /* @property */\r\n  \"L\" : 76,\r\n  /* @property */\r\n  \"m\" : 77,\r\n  /* @property */\r\n  \"M\" : 77,\r\n  /* @property */\r\n  \"n\" : 78,\r\n  /* @property */\r\n  \"N\" : 78,\r\n  /* @property */\r\n  \"o\" : 79,\r\n  /* @property */\r\n  \"O\" : 79,\r\n  /* @property */\r\n  \"p\" : 80,\r\n  /* @property */\r\n  \"P\" : 80,\r\n  /* @property */\r\n  \"q\" : 81,\r\n  /* @property */\r\n  \"Q\" : 81,\r\n  /* @property */\r\n  \"r\" : 82,\r\n  /* @property */\r\n  \"R\" : 82,\r\n  /* @property */\r\n  \"s\" : 83,\r\n  /* @property */\r\n  \"S\" : 83,\r\n  /* @property */\r\n  \"t\" : 84,\r\n  /* @property */\r\n  \"T\" : 84,\r\n  /* @property */\r\n  \"u\" : 85,\r\n  /* @property */\r\n  \"U\" : 85,\r\n  /* @property */\r\n  \"v\" : 86,\r\n  /* @property */\r\n  \"V\" : 86,\r\n  /* @property */\r\n  \"w\" : 87,\r\n  /* @property */\r\n  \"W\" : 87,\r\n  /* @property */\r\n  \"x\" : 88,\r\n  /* @property */\r\n  \"X\" : 88,\r\n  /* @property */\r\n  \"y\" : 89,\r\n  /* @property */\r\n  \"Y\" : 89,\r\n  /* @property */\r\n  \"z\" : 90,\r\n  /* @property */\r\n  \"Z\" : 90,\r\n  \r\n  /* @property */\r\n  \"numpad0\" : 96,\r\n  /* @property */\r\n  \"numpad1\" : 97,\r\n  /* @property */\r\n  \"numpad2\" : 98,\r\n  /* @property */\r\n  \"numpad3\" : 99,\r\n  /* @property */\r\n  \"numpad4\" : 100,\r\n  /* @property */\r\n  \"numpad5\" : 101,\r\n  /* @property */\r\n  \"numpad6\" : 102,\r\n  /* @property */\r\n  \"numpad7\" : 103,\r\n  /* @property */\r\n  \"numpad8\" : 104,\r\n  /* @property */\r\n  \"numpad9\" : 105,\r\n  /* @property */\r\n  \"multiply\"      : 106,\r\n  /* @property */\r\n  \"add\"           : 107,\r\n  /* @property */\r\n  \"subtract\"      : 109,\r\n  /* @property */\r\n  \"decimalpoint\"  : 110,\r\n  /* @property */\r\n  \"divide\"        : 111,\r\n\r\n  /* @property */\r\n  \"f1\"    : 112,\r\n  /* @property */\r\n  \"f2\"    : 113,\r\n  /* @property */\r\n  \"f3\"    : 114,\r\n  /* @property */\r\n  \"f4\"    : 115,\r\n  /* @property */\r\n  \"f5\"    : 116,\r\n  /* @property */\r\n  \"f6\"    : 117,\r\n  /* @property */\r\n  \"f7\"    : 118,\r\n  /* @property */\r\n  \"f8\"    : 119,\r\n  /* @property */\r\n  \"f9\"    : 120,\r\n  /* @property */\r\n  \"f10\"   : 121,\r\n  /* @property */\r\n  \"f11\"   : 122,\r\n  /* @property */\r\n  \"f12\"   : 123,\r\n  \r\n  /* @property */\r\n  \"numlock\"   : 144,\r\n  /* @property */\r\n  \"scrolllock\": 145,\r\n  /* @property */\r\n  \"semicolon\" : 186,\r\n  /* @property */\r\n  \"equalsign\" : 187,\r\n  /* @property */\r\n  \"comma\"     : 188,\r\n  /* @property */\r\n  \"dash\"      : 189,\r\n  /* @property */\r\n  \"period\"    : 190,\r\n  /* @property */\r\n  \"forward slash\" : 191,\r\n  /* @property */\r\n  \"/\": 191,\r\n  /* @property */\r\n  \"grave accent\"  : 192,\r\n  /* @property */\r\n  \"open bracket\"  : 219,\r\n  /* @property */\r\n  \"back slash\"    : 220,\r\n  /* @property */\r\n  \"close bracket\"  : 221,\r\n  /* @property */\r\n  \"single quote\"  : 222,\r\n  /* @property */\r\n  \"space\"         : 32\r\n\r\n};\n\n/**\r\n * MouseEvent/Touch拡張\r\n * @method    pointX\r\n * マウスのX座標.\r\n */\r\nvar pointX = {\r\n  get: function() {\r\n    return this.clientX - this.target.getBoundingClientRect().left;\r\n  }\r\n};\r\n\r\n/**\r\n * MouseEvent/Touch拡張\r\n * @method    pointX\r\n * マウスのX座標.\r\n */\r\nvar pointY = {\r\n  get: function() {\r\n    return this.clientY - this.target.getBoundingClientRect().top;\r\n  }\r\n};\r\n\r\n/**\r\n * TouchEvent拡張\r\n * @method    pointX\r\n * タッチイベント.\r\n */\r\nvar touchPointX = {\r\n  get: function() {\r\n    return this.touches[0].clientX - this.target.getBoundingClientRect().left;\r\n    // return this.touches[0].pageX - this.target.getBoundingClientRect().left - tm.global.scrollX;\r\n  }\r\n};\r\n\r\n/**\r\n * TouchEvent拡張\r\n * @method    pointY\r\n * タッチイベント.\r\n */\r\nvar touchPointY = {\r\n  get: function() {\r\n    return this.touches[0].clientY - this.target.getBoundingClientRect().top;\r\n    // return this.touches[0].pageY - this.target.getBoundingClientRect().top - tm.global.scrollY;\r\n  }\r\n};\r\n\r\n\r\n// ;(function() {\r\n\r\n  // if (!phina.global.Event) return ;\r\n\r\n  /**\r\n   * @class global.Event\r\n   * 既存のEventオブジェクト拡張\r\n   */\r\n    \r\n  // /**\r\n  //  * @method stop\r\n  //  * イベントのデフォルト処理 & 伝達を止める\r\n  //  */\r\n  // Event.prototype.stop = function() {\r\n  //   // イベントキャンセル\r\n  //   this.preventDefault();\r\n  //   // イベント伝達を止める\r\n  //   this.stopPropagation();\r\n  // };\r\n\r\n// })();\r\n\r\n\r\n// (function() {\r\n\r\n//   if (!phina.global.MouseEvent) return ;\r\n\r\n//   /**\r\n//    * @class global.MouseEvent\r\n//    * MouseEvent クラス\r\n//    */\r\n  \r\n//   /**\r\n//    * @method    pointX\r\n//    * マウスのX座標.\r\n//    */\r\n//   MouseEvent.prototype.getter(\"pointX\", function() {\r\n//     return this.clientX - this.target.getBoundingClientRect().left;\r\n//     // return this.pageX - this.target.getBoundingClientRect().left - window.scrollX;\r\n//   });\r\n  \r\n//   /**\r\n//    * @method    pointY\r\n//    * マウスのY座標.\r\n//    */\r\n//   MouseEvent.prototype.getter(\"pointY\", function() {\r\n//     return this.clientY - this.target.getBoundingClientRect().top;\r\n//     // return this.pageY - this.target.getBoundingClientRect().top - window.scrollY;\r\n//   });\r\n    \r\n// })();\r\n\r\n\r\n// (function() {\r\n    \r\n//   if (!phina.global.TouchEvent) return ;\r\n  \r\n  \r\n//   /**\r\n//    * @class global.TouchEvent\r\n//    * TouchEvent クラス\r\n//    */\r\n  \r\n//   /**\r\n//    * @method    pointX\r\n//    * タッチイベント.\r\n//    */\r\n//   TouchEvent.prototype.getter(\"pointX\", function() {\r\n//       return this.touches[0].clientX - this.target.getBoundingClientRect().left;\r\n//       // return this.touches[0].pageX - this.target.getBoundingClientRect().left - tm.global.scrollX;\r\n//   });\r\n  \r\n//   /**\r\n//    * @method    pointY\r\n//    * タッチイベント.\r\n//    */\r\n//   TouchEvent.prototype.getter(\"pointY\", function() {\r\n//       return this.touches[0].clientY - this.target.getBoundingClientRect().top;\r\n//       // return this.touches[0].pageY - this.target.getBoundingClientRect().top - tm.global.scrollY;\r\n//   });  \r\n    \r\n// })();\r\n\r\n\r\n// (function() {\r\n    \r\n//   if (!phina.global.Touch) return ;\r\n  \r\n//   /**\r\n//    * @class global.Touch\r\n//    * TouchEvent クラス\r\n//    */\r\n  \r\n//   /**\r\n//    * @method    pointX\r\n//    * タッチイベント.\r\n//    */\r\n//   Touch.prototype.getter(\"pointX\", function() {\r\n//       return this.clientX - this.target.getBoundingClientRect().left;\r\n//   });\r\n\r\n//   /**\r\n//    * @method    pointY\r\n//    * タッチイベント.\r\n//    */\r\n//   Touch.prototype.getter(\"pointY\", function() {\r\n//       return this.clientY - this.target.getBoundingClientRect().top;\r\n//   });\r\n    \r\n// })();\n\nvar BUTTON_MAP;\r\n\r\n/**\r\n * @class phina.input.Mouse\r\n * @extends phina.input.Input\r\n */\r\nclass Mouse extends Input {\r\n\r\n  /**\r\n   * @constructor\r\n   */\r\n  constructor(domElement) {\r\n    super(domElement);\r\n\r\n    this.id = 0;\r\n\r\n    var self = this;\r\n    this.domElement.addEventListener('mousedown', function(e) {\r\n      self._start(pointX.get.call(e), pointY.get.call(e), 1<<e.button);\r\n      // self._start(e.pointX, e.pointY, 1<<e.button);\r\n    });\r\n\r\n    this.domElement.addEventListener('mouseup', function(e) {\r\n      self._end(1<<e.button);\r\n    });\r\n    this.domElement.addEventListener('mousemove', function(e) {\r\n      self._move(pointX.get.call(e), pointY.get.call(e));\r\n      // self._move(e.pointX, e.pointY);\r\n    });\r\n\r\n    // マウスがキャンバス要素の外に出た場合の対応\r\n    this.domElement.addEventListener('mouseout', function(e)  {\r\n      self._end(1);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * ボタン取得\r\n   */\r\n  getButton(button) {\r\n    if (typeof(button) == \"string\") {\r\n      button = BUTTON_MAP[button];\r\n    }\r\n    \r\n    return (this.now & button) != 0;\r\n  }\r\n\r\n  /**\r\n   * ボタンダウン取得\r\n   */\r\n  getButtonDown(button) {\r\n    if (typeof(button) === 'string') {\r\n      button = BUTTON_MAP[button];\r\n    }\r\n\r\n    return (this.start & button) != 0;\r\n  }\r\n      \r\n  /**\r\n   * ボタンアップ取得\r\n   */\r\n  getButtonUp(button) {\r\n    if (typeof(button) == \"string\") {\r\n      button = BUTTON_MAP[button];\r\n    }\r\n    \r\n    return (this.end & button) != 0;\r\n  }\r\n\r\n}\r\n\r\n/** @static @property */\r\nMouse.BUTTON_LEFT = 0x1;\r\n/** @static @property */\r\nMouse.BUTTON_MIDDLE = 0x2;\r\n/** @static @property */\r\nMouse.BUTTON_RIGHT = 0x4;\r\n\r\nBUTTON_MAP = {\r\n  \"left\"  : Mouse.BUTTON_LEFT,\r\n  \"middle\": Mouse.BUTTON_MIDDLE,\r\n  \"right\" : Mouse.BUTTON_RIGHT\r\n};\r\n\r\nMouse.prototype.getPointing = function() { return this.getButton(\"left\"); };\r\nMouse.prototype.getPointingStart = function() { return this.getButtonDown(\"left\"); };\r\nMouse.prototype.getPointingEnd = function() { return this.getButtonUp(\"left\"); };\n\n/**\r\n * @class phina.input.Touch\r\n * @extends phina.input.Input\r\n */\r\nclass Touch extends Input {\r\n\r\n  /**\r\n   * @constructor\r\n   */\r\n  constructor(domElement, isMulti) {\r\n    super(domElement);\r\n\r\n    this.id = null;\r\n\r\n    if (isMulti === true) {\r\n      return ;\r\n    }\r\n\r\n    var self = this;\r\n    this.domElement.addEventListener('touchstart', function(e) {\r\n      self._start(touchPointX.get.call(e), touchPointY.get.call(e), true);\r\n      // self._start(e.pointX, e.pointY, true);\r\n    });\r\n\r\n    this.domElement.addEventListener('touchend', function(e) {\r\n      self._end();\r\n    });\r\n    this.domElement.addEventListener('touchmove', function(e) {\r\n      self._move(touchPointX.get.call(e), touchPointY.get.call(e));\r\n      // self._move(e.pointX, e.pointY);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * タッチしているかを判定\r\n   */\r\n  getTouch() {\r\n    return this.now != 0;\r\n  }\r\n  \r\n  /**\r\n   * タッチ開始時に true\r\n   */\r\n  getTouchStart() {\r\n    return this.start != 0;\r\n  }\r\n  \r\n  /**\r\n   * タッチ終了時に true\r\n   */\r\n  getTouchEnd() {\r\n    return this.end != 0;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @method\r\n * ポインティング状態取得(mouse との差異対策)\r\n */\r\nTouch.prototype.getPointing        = Touch.prototype.getTouch;\r\n/**\r\n * @method\r\n * ポインティングを開始したかを取得(mouse との差異対策)\r\n */\r\nTouch.prototype.getPointingStart   = Touch.prototype.getTouchStart;\r\n/**\r\n * @method\r\n * ポインティングを終了したかを取得(mouse との差異対策)\r\n */\r\nTouch.prototype.getPointingEnd     = Touch.prototype.getTouchEnd;\r\n\r\n\r\n/**\r\n * @class phina.input.TouchList\r\n */\r\nclass TouchList {\r\n\r\n  constructor(domElement) {\r\n    this.domElement = domElement;\r\n\r\n    this.touches = [];\r\n    var touchMap = this.touchMap = {};\r\n\r\n    // 32bit 周期でIDをループさせる\r\n    this._id = new Uint32Array(1);\r\n\r\n    var self = this;\r\n    var each = Array.prototype.forEach;\r\n    this.domElement.addEventListener('touchstart', function(e) {\r\n      each.call(e.changedTouches, function(t) {\r\n        var touch = self.getEmpty();\r\n        touchMap[t.identifier] = touch;\r\n        touch._start(pointX.get.call(t), pointY.get.call(t));\r\n        // touch._start(t.pointX, t.pointY);\r\n      });\r\n    });\r\n\r\n    this.domElement.addEventListener('touchend', function(e) {\r\n      each.call(e.changedTouches, function(t) {\r\n        var id = t.identifier;\r\n        var touch = touchMap[id];\r\n        touch._end();\r\n        delete touchMap[id];\r\n      });\r\n    });\r\n    this.domElement.addEventListener('touchmove', function(e) {\r\n      each.call(e.changedTouches, function(t) {\r\n        var touch = touchMap[t.identifier];\r\n        touch._move(pointX.get.call(t), pointY.get.call(t));\r\n        // touch._move(t.pointX, t.pointY);\r\n      });\r\n      e.stop();\r\n    });\r\n\r\n    // iPhone では 6本指以上タッチすると強制的にすべてのタッチが解除される\r\n    this.domElement.addEventListener('touchcancel', function(e) {\r\n      console.warn('この端末での同時タッチ数の制限を超えました。');\r\n      each.call(e.changedTouches, function(t) {\r\n        var id = t.identifier;\r\n        var touch = touchMap[id];\r\n        touch._end();\r\n        delete touchMap[id];\r\n      });\r\n      e.stop();\r\n    });\r\n  }\r\n\r\n  getEmpty() {\r\n    var touch = new Touch(this.domElement, true);\r\n  \r\n    touch.id = this.id;\r\n    this.touches.push(touch);\r\n\r\n    return touch;\r\n  }\r\n\r\n  getTouch(id) {\r\n    return this.touchMap[id];\r\n  }\r\n\r\n  removeTouch(touch) {\r\n    var i = this.touches.indexOf(touch);\r\n    this.touches.splice(i, 1);\r\n  }\r\n\r\n  update() {\r\n    this.touches.forEach(function(touch) {\r\n      if (!touch.released) {\r\n        touch.update();\r\n\r\n        if (touch.flags === 0) {\r\n          touch.released = true;\r\n        }\r\n      }\r\n      else {\r\n        touch.released = false;\r\n        this.removeTouch(touch);\r\n      }\r\n\r\n    }, this);\r\n  }\r\n\r\n  get id() { return this._id[0]++; }\r\n\r\n}\n\n/**\r\n * @class phina.input.GamepadManager\r\n * ゲームパッドマネージャー.\r\n * ゲームパッド接続状況の監視、個々のゲームパッドの入力状態の更新を行う.\r\n * @extends phina.util.EventDispatcher\r\n */\r\nclass GamepadManager extends EventDispatcher {\r\n\r\n  /**\r\n   * 作成済みphina.input.Gamepadオブジェクトのリスト\r\n   *\r\n   * @type {Object.<number, phina.input.Gamepad>}\r\n   */\r\n  // gamepads: null,\r\n\r\n  /**\r\n   * 作成済みゲームパッドのindexのリスト\r\n   *\r\n   * @type {number[]}\r\n   * @private\r\n   */\r\n  // _created: null,\r\n\r\n  /**\r\n   * ラップ前Gamepadのリスト\r\n   * @type {phina.input.Gamepad[]}\r\n   * @private\r\n   */\r\n  // _rawgamepads: null,\r\n\r\n  /**\r\n   * @constructor\r\n   */\r\n  constructor() {\r\n    super();\r\n\r\n    this.gamepads = {};\r\n    this._created = [];\r\n    this._rawgamepads = [];\r\n\r\n    this._prevTimestamps = {};\r\n\r\n    this._getGamepads = null;\r\n    var navigator = phina$1.global.navigator;\r\n    if (navigator && navigator.getGamepads) {\r\n      this._getGamepads = navigator.getGamepads.bind(navigator);\r\n    } else if (navigator && navigator.webkitGetGamepads) {\r\n      this._getGamepads = navigator.webkitGetGamepads.bind(navigator);\r\n    } else {\r\n      this._getGamepads = function() {};\r\n    }\r\n\r\n    phina$1.global.addEventListener('gamepadconnected', function(e) {\r\n      var gamepad = this.get(e.gamepad.index);\r\n      gamepad.connected = true;\r\n      this.flare('connected', {\r\n        gamepad: gamepad,\r\n      });\r\n    }.bind(this));\r\n\r\n    phina$1.global.addEventListener('gamepaddisconnected', function(e) {\r\n      var gamepad = this.get(e.gamepad.index);\r\n      gamepad.connected = false;\r\n      this.flare('disconnected', {\r\n        gamepad: gamepad,\r\n      });\r\n    }.bind(this));\r\n  }\r\n\r\n  /**\r\n   * 情報更新処理\r\n   * マイフレーム呼んで下さい.\r\n   */\r\n  update() {\r\n    this._poll();\r\n\r\n    for (var i = 0, end = this._created.length; i < end; i++) {\r\n      var index = this._created[i];\r\n      var rawgamepad = this._rawgamepads[index];\r\n\r\n      if (!rawgamepad) {\r\n        continue;\r\n      }\r\n\r\n      if (rawgamepad.timestamp && (rawgamepad.timestamp === this._prevTimestamps[i])) {\r\n        this.gamepads[index]._updateStateEmpty();\r\n        continue;\r\n      }\r\n\r\n      this._prevTimestamps[i] = rawgamepad.timestamp;\r\n      this.gamepads[index]._updateState(rawgamepad);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 指定されたindexのGamepadオブジェクトを返す.\r\n   *\r\n   * 未作成の場合は作成して返す.\r\n   */\r\n  get(index) {\r\n    index = index || 0;\r\n\r\n    if (!this.gamepads[index]) {\r\n      this._created.push(index);\r\n      this.gamepads[index] = new Gamepad(index);\r\n    }\r\n\r\n    return this.gamepads[index];\r\n  }\r\n\r\n  /**\r\n   * 指定されたindexのGamepadオブジェクトを破棄する.\r\n   * 破棄されたGamepadオブジェクトは以降更新されない.\r\n   */\r\n  dispose(index) {\r\n    if (contains.call(this._created, index)) {\r\n    // if (this._created.contains(index)) {\r\n      var gamepad = this.get(index);\r\n      delete this.gamepad[gamepad];\r\n      erase.call(this._created, index);\r\n      // this._created.erase(index);\r\n\r\n      gamepad.connected = false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 指定されたindexのゲームパッドが接続中かどうかを返す.\r\n   *\r\n   * Gamepadオブジェクトが未作成の場合でも動作する.\r\n   */\r\n  isConnected(index) {\r\n    index = index || 0;\r\n\r\n    return this._rawgamepads[index] && this._rawgamepads[index].connected;\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  _poll() {\r\n    var rawGamepads = this._getGamepads();\r\n    if (rawGamepads) {\r\n      clear.call(this._rawgamepads);\r\n      // this._rawgamepads.clear();\r\n\r\n      for (var i = 0, end = rawGamepads.length; i < end; i++) {\r\n        if (rawGamepads[i]) {\r\n          this._rawgamepads.push(rawGamepads[i]);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // _static: {\r\n  //   /** ブラウザがGamepad APIに対応しているか. */\r\n  //   isAvailable: (function() {\r\n  //     var nav = phina.global.navigator;\r\n  //     if (!nav) return false;\r\n\r\n  //     return (!!nav.getGamepads) || (!!nav.webkitGetGamepads);\r\n  //   })(),\r\n  // }\r\n\r\n}\r\n\r\n// static props\r\n/** ブラウザがGamepad APIに対応しているか. */\r\nGamepadManager.isAvailable = (function() {\r\n  var nav = phina$1.global.navigator;\r\n  if (!nav) return false;\r\n\r\n  return (!!nav.getGamepads) || (!!nav.webkitGetGamepads);\r\n})();\r\n\r\n\r\n/**\r\n * @class phina.input.Gamepad\r\n * ゲームパッド\r\n *\r\n * 直接インスタンス化せず、phina.input.GamepadManagerオブジェクトから取得して使用する.\r\n */\r\nclass Gamepad {\r\n// phina.define(\"phina.input.Gamepad\", {\r\n\r\n  // index: null,\r\n  // buttons: null,\r\n  // /** @type {Array.<phina.geom.Vector2>} */\r\n  // sticks: null,\r\n\r\n  // id: null,\r\n  // connected: false,\r\n  // mapping: null,\r\n  // timestamp: null,\r\n\r\n  constructor(index) {\r\n    this.index = index || 0;\r\n\r\n    // this.buttons = Array.range(0, 16).map(function() {\r\n    this.buttons = range.call([], 0, 16).map(function() {\r\n      return {\r\n        value: 0,\r\n        pressed: false,\r\n        last: false,\r\n        down: false,\r\n        up: false,\r\n      };\r\n    });\r\n    this.sticks = range.call([], 0, 2).map(function() {\r\n    // this.sticks = Array.range(0, 2).map(function() {\r\n      return new Vector2(0, 0);\r\n    });\r\n    this.id = null;\r\n    this.connected = false;\r\n    this.mapping = null;\r\n    this.timestamp = null;\r\n  }\r\n\r\n  /**\r\n   * ボタンが押されているか.\r\n   */\r\n  getKey(button) {\r\n    if (typeof(button) === 'string') {\r\n      button = Gamepad.BUTTON_CODE[button];\r\n    }\r\n    if (this.buttons[button]) {\r\n      return this.buttons[button].pressed;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * ボタンを押した.\r\n   */\r\n  getKeyDown(button) {\r\n    if (typeof(button) === 'string') {\r\n      button = Gamepad.BUTTON_CODE[button];\r\n    }\r\n    if (this.buttons[button]) {\r\n      return this.buttons[button].down;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * ボタンを離した.\r\n   */\r\n  getKeyUp(button) {\r\n    if (typeof(button) === 'string') {\r\n      button = Gamepad.BUTTON_CODE[button];\r\n    }\r\n    if (this.buttons[button]) {\r\n      return this.buttons[button].up;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 十字キーの入力されている方向.\r\n   */\r\n  getKeyAngle() {\r\n    var angle = null;\r\n    var arrowBit =\r\n      (this.getKey('left') << 3) | // 1000\r\n      (this.getKey('up') << 2) | // 0100\r\n      (this.getKey('right') << 1) | // 0010\r\n      (this.getKey('down')); // 0001\r\n\r\n    if (arrowBit !== 0 && ARROW_BIT_TO_ANGLE_TABLE.hasOwnProperty(arrowBit)) {\r\n      angle = ARROW_BIT_TO_ANGLE_TABLE[arrowBit];\r\n    }\r\n\r\n    return angle;\r\n  }\r\n\r\n  /**\r\n   * 十字キーの入力されている方向をベクトルで.\r\n   * 正規化されている.\r\n   */\r\n  getKeyDirection() {\r\n    var direction = new Vector2(0, 0);\r\n\r\n    if (this.getKey('left')) {\r\n      direction.x = -1;\r\n    } else if (this.getKey('right')) {\r\n      direction.x = 1;\r\n    }\r\n    if (this.getKey('up')) {\r\n      direction.y = -1;\r\n    } else if (this.getKey('down')) {\r\n      direction.y = 1;\r\n    }\r\n\r\n    if (direction.x && direction.y) {\r\n      direction.div(Math.SQRT2);\r\n    }\r\n\r\n    return direction;\r\n  }\r\n\r\n  /**\r\n   * スティックの入力されている方向.\r\n   */\r\n  getStickAngle(stickId) {\r\n    stickId = stickId || 0;\r\n    var stick = this.sticks[stickId];\r\n    return stick ? Math.atan2(-stick.y, stick.x) : null;\r\n  }\r\n\r\n  /**\r\n   * スティックの入力されている方向をベクトルで.\r\n   */\r\n  getStickDirection(stickId) {\r\n    stickId = stickId || 0;\r\n    return this.sticks ? this.sticks[stickId].clone() : new Vector2(0, 0);\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  _updateState(gamepad) {\r\n    this.id = gamepad.id;\r\n    this.connected = gamepad.connected;\r\n    this.mapping = gamepad.mapping;\r\n    this.timestamp = gamepad.timestamp;\r\n\r\n    for (var i = 0, iend = gamepad.buttons.length; i < iend; i++) {\r\n      this._updateButton(gamepad.buttons[i], i);\r\n    }\r\n\r\n    for (var j = 0, jend = gamepad.axes.length; j < jend; j += 2) {\r\n      this._updateStick(gamepad.axes[j + 0], j / 2, 'x');\r\n      this._updateStick(gamepad.axes[j + 1], j / 2, 'y');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  _updateStateEmpty() {\r\n    for (var i = 0, iend = this.buttons.length; i < iend; i++) {\r\n      this.buttons[i].down = false;\r\n      this.buttons[i].up = false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  _updateButton(value, buttonId) {\r\n    if (this.buttons[buttonId] === undefined) {\r\n      this.buttons[buttonId] = {\r\n        value: 0,\r\n        pressed: false,\r\n        last: false,\r\n        down: false,\r\n        up: false,\r\n      };\r\n    }\r\n    \r\n    var button = this.buttons[buttonId];\r\n\r\n    button.last = button.pressed;\r\n\r\n    if (typeof value === 'object') {\r\n      button.value = value.value;\r\n      button.pressed = value.pressed;\r\n    } else {\r\n      button.value = value;\r\n      button.pressed = value > Gamepad.ANALOGUE_BUTTON_THRESHOLD;\r\n    }\r\n\r\n    button.down = (button.pressed ^ button.last) & button.pressed;\r\n    button.up = (button.pressed ^ button.last) & button.last;\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  _updateStick(value, stickId, axisName) {\r\n    if (this.sticks[stickId] === undefined) {\r\n      this.sticks[stickId] = new Vector2(0, 0);\r\n    }\r\n    this.sticks[stickId][axisName] = value;\r\n  }\r\n\r\n}\r\n\r\n/** ブラウザがGamepad APIに対応しているか. */\r\nGamepad.isAvailable = (function() {\r\n  var nav = phina$1.global.navigator;\r\n  if (!nav) return false;\r\n\r\n  return (!!nav.getGamepads) || (!!nav.webkitGetGamepads);\r\n})();\r\n\r\n/** アナログ入力対応のボタンの場合、どの程度まで押し込むとonになるかを表すしきい値. */\r\nGamepad.ANALOGUE_BUTTON_THRESHOLD = 0.5;\r\n\r\n/** ボタン名とボタンIDのマップ. */\r\nGamepad.BUTTON_CODE = {\r\n  'a': 0,\r\n  'b': 1,\r\n  'x': 2,\r\n  'y': 3,\r\n\r\n  'l1': 4,\r\n  'r1': 5,\r\n  'l2': 6,\r\n  'r2': 7,\r\n\r\n  'select': 8,\r\n  'start': 9,\r\n\r\n  'l3': 10,\r\n  'r3': 11,\r\n\r\n  'up': 12,\r\n  'down': 13,\r\n  'left': 14,\r\n  'right': 15,\r\n\r\n  'special': 16,\r\n\r\n  'A': 0,\r\n  'B': 1,\r\n  'X': 2,\r\n  'Y': 3,\r\n\r\n  'L1': 4,\r\n  'R1': 5,\r\n  'L2': 6,\r\n  'R2': 7,\r\n\r\n  'SELECT': 8,\r\n  'START': 9,\r\n\r\n  'L3': 10,\r\n  'R3': 11,\r\n\r\n  'UP': 12,\r\n  'DOWN': 13,\r\n  'LEFT': 14,\r\n  'RIGHT': 15,\r\n\r\n  'SPECIAL': 16,\r\n};\r\n\r\nvar ARROW_BIT_TO_ANGLE_TABLE = {\r\n  0x00: null,\r\n\r\n  /* @property 下 */\r\n  0x01: 270,\r\n  /* @property 右 */\r\n  0x02: 0,\r\n  /* @property 上 */\r\n  0x04: 90,\r\n  /* @property 左 */\r\n  0x08: 180,\r\n\r\n  /* @property 右上 */\r\n  0x06: 45,\r\n  /* @property 右下 */\r\n  0x03: 315,\r\n  /* @property 左上 */\r\n  0x0c: 135,\r\n  /* @property 左下 */\r\n  0x09: 225,\r\n\r\n  // 三方向同時押し対応\r\n  // 想定外の操作だが対応しといたほうが無難\r\n  /* @property 右上左 */\r\n  0x0e: 90,\r\n  /* @property 上左下 */\r\n  0x0d: 180,\r\n  /* @property 左下右 */\r\n  0x0b: 270,\r\n  /* @property 下右上 */\r\n  0x07: 0,\r\n};\n\n/**\r\n * @class phina.input.Accelerometer\r\n * スマートフォンのセンサー情報\r\n */\r\nclass Accelerometer {\r\n\r\n  /** @property  gravity 重力センサー */\r\n  /** @property  acceleration 加速度センサー */\r\n  /** @property  rotation 回転加速度センサー */\r\n  /** @property  orientation スマートフォンの傾き */\r\n\r\n  /**\r\n   * @constructor\r\n   */\r\n  constructor() {\r\n\r\n    var self = this;\r\n    \r\n    this.gravity        = new Vector3(0, 0, 0);\r\n    this.acceleration   = new Vector3(0, 0, 0);\r\n    this.rotation       = new Vector3(0, 0, 0);\r\n    this.orientation    = new Vector3(0, 0, 0);\r\n\r\n    if (phina$1.isMobile()) {\r\n      phina$1.global.addEventListener(\"devicemotion\", function(e) {\r\n        var acceleration = self.acceleration;\r\n        var gravity = self.gravity;\r\n        var rotation = self.rotation;\r\n        \r\n        if (e.acceleration) {\r\n          acceleration.x = e.acceleration.x;\r\n          acceleration.y = e.acceleration.y;\r\n          acceleration.z = e.acceleration.z;\r\n        }\r\n        if (e.accelerationIncludingGravity) {\r\n          gravity.x = e.accelerationIncludingGravity.x;\r\n          gravity.y = e.accelerationIncludingGravity.y;\r\n          gravity.z = e.accelerationIncludingGravity.z;\r\n        }\r\n        if (e.rotationRate) {\r\n          rotation.x = rotation.beta  = e.rotationRate.beta;\r\n          rotation.y = rotation.gamma = e.rotationRate.gamma;\r\n          rotation.z = rotation.alpha = e.rotationRate.alpha;\r\n        }\r\n      });\r\n      \r\n      phina$1.global.addEventListener(\"deviceorientation\", function(e) {\r\n        var orientation = self.orientation;\r\n        orientation.alpha   = e.alpha;  // z(0~360)\r\n        orientation.beta    = e.beta;   // x(-180~180)\r\n        orientation.gamma   = e.gamma;  // y(-90~90)\r\n      });\r\n    }\r\n  }\r\n\r\n}\n\n/**\r\n * @class phina.app.Updater\r\n */\r\nclass Updater {\r\n\r\n  constructor(app) {\r\n    this.app = app;\r\n  }\r\n\r\n  update(root) {\r\n    this._updateElement(root);\r\n  }\r\n\r\n  _updateElement(element) {\r\n    var app = this.app;\r\n\r\n    // 更新するかを判定\r\n    if (element.awake === false) return ;\r\n\r\n    // エンターフレームイベント\r\n    if (element.has('enterframe')) {\r\n      element.flare('enterframe', {\r\n        app: this.app,\r\n      });\r\n    }\r\n\r\n    // 更新\r\n    if (element.update) element.update(app);\r\n\r\n    // タッチ判定\r\n    // this._checkPoint(element);\r\n\r\n    // 子供を更新\r\n    var len = element.children.length;\r\n    if (element.children.length > 0) {\r\n      var tempChildren = element.children.slice();\r\n      for (var i=0; i<len; ++i) {\r\n        this._updateElement(tempChildren[i]);\r\n      }\r\n    }\r\n  }\r\n\r\n  _checkPoint(obj) {\r\n    this.app.pointers.forEach(function(p) {\r\n      if (p.id !== null) {\r\n        this.__checkPoint(obj, p);\r\n      }\r\n    }, this);\r\n  }\r\n\r\n  __checkPoint(obj, p) {\r\n    if (!obj.interactive) return ;\r\n\r\n    var prevOverFlag = obj._overFlags[p.id];\r\n    var overFlag = obj.hitTest2(p.x, p.y);\r\n    obj._overFlags[p.id] = overFlag;\r\n\r\n    if (!prevOverFlag && overFlag) {\r\n      obj.flare('pointover', {\r\n        pointer: p,\r\n      });\r\n    }\r\n    if (prevOverFlag && !overFlag) {\r\n      obj.flare('pointout');\r\n    }\r\n\r\n    if (overFlag) {\r\n      if (p.getPointingStart()) {\r\n        obj._touchFlags[p.id] = true;\r\n        obj.flare('pointstart');\r\n      }\r\n    }\r\n\r\n    if (obj._touchFlags[p.id]) {\r\n      obj.flare('pointstay');\r\n      if (p._moveFlag) {\r\n        obj.flare('pointmove');\r\n      }\r\n    }\r\n\r\n    if (obj._touchFlags[p.id]===true && p.getPointingEnd()) {\r\n      obj._touchFlags[p.id] = false;\r\n      obj.flare('pointend');\r\n\r\n      if (obj._overFlags[p.id]) {\r\n        obj._overFlags[p.id] = false;\r\n        obj.flare('pointout');\r\n      }\r\n    }\r\n  }\r\n\r\n}\n\n/**\r\n * @class phina.app.Interactive\r\n */\r\nclass Interactive {\r\n\r\n  constructor(app) {\r\n    this.app = app;\r\n    this._enable = true;\r\n    this.multiTouch = true;\r\n    this.cursor = {\r\n      normal: '',\r\n      hover: 'pointer',\r\n    };\r\n\r\n    this._holds = [];\r\n    this.app.on('changescene', function() {\r\n      clear.call(this._holds);\r\n      // this._holds.clear();\r\n    }.bind(this));\r\n  }\r\n\r\n  enable() {\r\n    this._enable = true;\r\n    return this;\r\n  }\r\n\r\n  disable() {\r\n    this._enable = false;\r\n    return this;\r\n  }\r\n\r\n  check(root) {\r\n    // カーソルのスタイルを反映\r\n    if (this.app.domElement) {\r\n      if (this._holds.length > 0) {\r\n        this.app.domElement.style.cursor = this.cursor.hover;\r\n      }\r\n      else {\r\n        this.app.domElement.style.cursor = this.cursor.normal;\r\n      }\r\n    }\r\n\r\n    if (!this._enable || !this.app.pointers) return ;\r\n    this._checkElement(root);\r\n  }\r\n\r\n  _checkElement(element) {\r\n    var app = this.app;\r\n\r\n    // 更新するかを判定\r\n    if (element.awake === false) return ;\r\n\r\n    // 子供を更新\r\n    var len = element.children.length;\r\n    if (element.children.length > 0) {\r\n      var tempChildren = element.children.slice();\r\n      for (var i=0; i<len; ++i) {\r\n        this._checkElement(tempChildren[i]);\r\n      }\r\n    }\r\n\r\n    // タッチ判定\r\n    this._checkPoint(element);\r\n  }\r\n\r\n  _checkPoint(obj) {\r\n    if (this.multiTouch) {\r\n      this.app.pointers.forEach(function(p) {\r\n        if (p.id !== null) {\r\n          this.__checkPoint(obj, p);\r\n        }\r\n      }, this);\r\n    }\r\n    else {\r\n      this.__checkPoint(obj, this.app.pointer);\r\n    }\r\n  }\r\n\r\n  __checkPoint(obj, p) {\r\n    if (!obj.interactive) return ;\r\n\r\n    var prevOverFlag = obj._overFlags[p.id];\r\n    var overFlag = obj.hitTest(p.x, p.y);\r\n    obj._overFlags[p.id] = overFlag;\r\n\r\n    var e = {\r\n      pointer: p,\r\n      interactive: this,\r\n      over: overFlag,\r\n    };\r\n\r\n    if (!prevOverFlag && overFlag) {\r\n      obj.flare('pointover', e);\r\n\r\n      if (obj.boundingType && obj.boundingType !== 'none') {\r\n        this._holds.push(obj);\r\n      }\r\n    }\r\n    if (prevOverFlag && !overFlag) {\r\n      obj.flare('pointout', e);\r\n      // this._holds.erase(obj);\r\n      erase.call(this._holds, obj);\r\n    }\r\n\r\n    if (overFlag) {\r\n      if (p.getPointingStart()) {\r\n        obj._touchFlags[p.id] = true;\r\n        obj.flare('pointstart', e);\r\n        // クリックフラグを立てる\r\n        obj._clicked = true;\r\n      }\r\n    }\r\n\r\n    if (obj._touchFlags[p.id]) {\r\n      obj.flare('pointstay', e);\r\n      if (p._moveFlag) {\r\n        obj.flare('pointmove', e);\r\n      }\r\n    }\r\n\r\n    if (obj._touchFlags[p.id]===true && p.getPointingEnd()) {\r\n      obj._touchFlags[p.id] = false;\r\n      obj.flare('pointend', e);\r\n\r\n      if (phina$1.isMobile() && obj._overFlags[p.id]) {\r\n        obj._overFlags[p.id] = false;\r\n        obj.flare('pointout', e);\r\n        // this._holds.erase(obj);\r\n        erase.call(this._holds, obj);\r\n      }\r\n    }\r\n  }\r\n\r\n}\n\n// import { Element } from \"../app/element\"\r\n\r\n/**\r\n * @class phina.accessory.Accessory\r\n * @extends phina.util.EventDispatcher\r\n */\r\nclass Accessory extends EventDispatcher {\r\n\r\n  /**\r\n   * @constructor\r\n   */\r\n  constructor(target) {\r\n    super();\r\n\r\n    this.target = target;\r\n  }\r\n\r\n  setTarget(target) {\r\n    if (this.target === target) return ;\r\n\r\n    this.target = target;\r\n    return this;\r\n  }\r\n\r\n  getTarget() {\r\n    return this.target;\r\n  }\r\n\r\n  isAttached() {\r\n    return !!this.target;\r\n  }\r\n\r\n  attachTo(element) {\r\n    element.attach(this);\r\n    this.setTarget(element);\r\n    return this;\r\n  }\r\n\r\n  remove() {\r\n    this.target.detach(this);\r\n    this.target = null;\r\n  }\r\n\r\n}\r\n\r\n// Element側で拡張\r\n// phina.app.Element.prototype.$method('attach', function(accessory) {\r\n//   if (!this.accessories) {\r\n//     this.accessories = [];\r\n//     this.on('enterframe', function(e) {\r\n//       this.accessories.each(function(accessory) {\r\n//         accessory.update && accessory.update(e.app);\r\n//       });\r\n//     });\r\n//   }\r\n\r\n//   this.accessories.push(accessory);\r\n//   accessory.setTarget(this);\r\n//   accessory.flare('attached');\r\n\r\n//   return this;\r\n// });\r\n\r\n// phina.app.Element.prototype.$method('detach', function(accessory) {\r\n//   if (this.accessories) {\r\n//     this.accessories.erase(accessory);\r\n//     accessory.setTarget(null);\r\n//     accessory.flare('detached');\r\n//   }\r\n\r\n//   return this;\r\n// });\n\n/**\r\n * @class phina.accessory.Tweener\r\n * # Tweener\r\n * Tweenerはオブジェクトのプロパティに対して、\r\n * Tweenアニメーションの効果を与えるクラスです。  \r\n * 主に {@link phina.app.Element} とそのサブクラスで使用されます。\r\n * @extends phina.accessory.Accessory\r\n */\r\nclass Tweener extends Accessory {\r\n\r\n  /**\r\n   * アニメーションを更新する方法を指定します。  \r\n   * 変更するとdurationによる時間の進み方が変わります。  \r\n   * 詳しくは{@link #UPDATE_MAP}を参照してください。\r\n   */\r\n  // updateType = 'delta'\r\n\r\n  /**\r\n   * @constructor\r\n   */\r\n  constructor(target) {\r\n    super(target);\r\n    this.updateType = 'delta';\r\n\r\n    this._init();\r\n  }\r\n\r\n  _init() {\r\n    this._loop = false;\r\n    this._tasks = [];\r\n    this._index = 0;\r\n    this.playing = true;\r\n    this._update = this._updateTask;\r\n  }\r\n\r\n  /**\r\n   * @param {phina.app.BaseApp} app\r\n   */\r\n  update(app) {\r\n    this._update(app);\r\n  }\r\n\r\n  /**\r\n   * {@link #updateType}を変更します。\r\n   * @param {String} type 更新方法を表す文字列\r\n   * @chainable\r\n   */\r\n  setUpdateType(type) {\r\n    this.updateType = type;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * propsで指定した値になるまで、durationで指定した時間をかけて、アニメーションさせます。\r\n   * @param {Object} props 変更したいプロパティをkeyとしたオブジェクト\r\n   * @param {Number} duration (optional) アニメーションにかける時間\r\n   * @param {String} easing (optional) easing {@link phina.util.Tween#EASING}を参照してください。\r\n   * @chainable\r\n   * \r\n   */\r\n  to(props, duration, easing) {\r\n    this._add({\r\n      type: 'tween',\r\n      mode: 'to',\r\n      props: props,\r\n      duration: duration,\r\n      easing: easing,\r\n    });\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * アニメーション開始時の値とpropsで指定した値を加算した値になるまで、durationで指定した時間をかけて、アニメーションさせます。\r\n   * @param {Object} props 変更したいプロパティをkeyとしたオブジェクト\r\n   * @param {Number} duration (optional) アニメーションにかける時間\r\n   * @param {String} easing (optional) easing {@link phina.util.Tween#EASING}を参照してください。\r\n   * @chainable\r\n   */\r\n  by(props, duration, easing) {\r\n    this._add({\r\n      type: 'tween',\r\n      mode: 'by',\r\n      props: props,\r\n      duration: duration,\r\n      easing: easing,\r\n    });\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * propsで指定した値からアニメーション開始時の値になるまで、durationで指定した時間をかけて、アニメーションさせます。\r\n   * @param {Object} props 変更したいプロパティをkeyとしたオブジェクト\r\n   * @param {Number} duration (optional) アニメーションにかける時間\r\n   * @param {String} easing (optional) easing {@link phina.util.Tween#EASING}を参照してください。\r\n   * @chainable\r\n   */\r\n  from(props, duration, easing) {\r\n    this._add({\r\n      type: 'tween',\r\n      mode: 'from',\r\n      props: props,\r\n      duration: duration,\r\n      easing: easing,\r\n    });\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * 指定した時間が経過するまで待機します。\r\n   * @param {Number} time waitする時間\r\n   * @chainable\r\n   */\r\n  wait(time) {\r\n    this._add({\r\n      type: 'wait',\r\n      data: {\r\n        limit: time,\r\n      },\r\n    });\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * 現在設定されているアニメーションが終了した時に呼び出される関数をセットします。\r\n   * @param {Function} func 呼び出される関数\r\n   * @param {Object} self (optional) func内でthisにしたいオブジェクト。\r\n   * @param {Object[]} args (optional) funcの引数にしたい値\r\n   * @chainable\r\n   */\r\n  call(func, self, args) {\r\n    this._add({\r\n      type: 'call',\r\n      data: {\r\n        func: func,\r\n        self: self || this,\r\n        args: args,\r\n      },\r\n    });\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * 現在設定されているアニメーションが終了した時にプロパティをセットします。  \r\n   * 第一引数にオブジェクトをセットすることもできます。\r\n   * @param {String | Object} key valueをセットするプロパティ名か、変更したいプロパティをkeyとしたオブジェクト。\r\n   * @param {Object} value (optional) セットする値\r\n   * @chainable\r\n   */\r\n  set(key, value) {\r\n    var values = null;\r\n    if (arguments.length == 2) {\r\n      values = {};\r\n      values[key] = value;\r\n    }\r\n    else {\r\n      values = key;\r\n    }\r\n    this._tasks.push({\r\n      type: \"set\",\r\n      data: {\r\n        values: values\r\n      }\r\n    });\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * x, yに対して、 {@link #to} の処理を行います。\r\n   * @param {Number} x\r\n   * @param {Number} y\r\n   * @param {Number} duration (optional) アニメーションにかける時間\r\n   * @param {String} easing (optional) easing {@link phina.util.Tween#EASING}を参照してください。\r\n   * @chainable\r\n   */\r\n  moveTo(x, y, duration, easing) {\r\n    return this.to({ x: x, y: y }, duration, easing);\r\n  }\r\n  \r\n  /**\r\n   * x, yに対して、 {@link #by} の処理を行います。\r\n   * @param {Number} x\r\n   * @param {Number} y\r\n   * @param {Number} duration (optional) アニメーションにかける時間\r\n   * @param {String} easing (optional) easing {@link phina.util.Tween#EASING}を参照してください。\r\n   * @chainable\r\n   */\r\n  moveBy(x, y, duration, easing) {\r\n    return this.by({ x: x, y: y }, duration, easing);\r\n  }\r\n\r\n  /**\r\n   * rotationに対して、 {@link #to} の処理を行います。\r\n   * @param {Number} rotation\r\n   * @param {Number} duration (optional) アニメーションにかける時間\r\n   * @param {String} easing (optional) easing {@link phina.util.Tween#EASING}を参照してください。\r\n   * @chainable\r\n   */\r\n  rotateTo(rotation, duration, easing) {\r\n    return this.to({ rotation: rotation }, duration, easing);\r\n  }\r\n  \r\n  /**\r\n   * rotationに対して、 {@link #by} の処理を行います。\r\n   * @param {Number} rotation\r\n   * @param {Number} duration (optional) アニメーションにかける時間\r\n   * @param {String} easing (optional) easing {@link phina.util.Tween#EASING}を参照してください。\r\n   * @chainable\r\n   */\r\n  rotateBy(rotation, duration, easing) {\r\n    return this.by({ rotation: rotation }, duration, easing);\r\n  }\r\n\r\n  /**\r\n   * scaleX, scaleYに対して {@link #to} の処理を行います。\r\n   * @param {Number} scale scaleXとscaleYに設定する値\r\n   * @param {Number} duration (optional) アニメーションにかける時間\r\n   * @param {String} easing (optional) easing {@link phina.util.Tween#EASING}を参照してください。\r\n   * @chainable\r\n   */\r\n  scaleTo(scale, duration, easing) {\r\n    return this.to({ scaleX: scale, scaleY: scale }, duration, easing);\r\n  }\r\n  /**\r\n   * scaleX, scaleYに対して {@link #by} の処理を行います。\r\n   * @param {Number} scale scaleXとscaleYに設定する値\r\n   * @param {Number} duration (optional) アニメーションにかける時間\r\n   * @param {String} easing (optional) easing {@link phina.util.Tween#EASING}を参照してください。\r\n   * @chainable\r\n   */\r\n  scaleBy(scale, duration, easing) {\r\n    return this.by({ scaleX: scale, scaleY: scale }, duration, easing);\r\n  }\r\n\r\n  /**\r\n   * alphaに対して {@link #to} の処理を行います。\r\n   * @param {Number} value alphaに設定する値\r\n   * @param {Number} duration (optional) アニメーションにかける時間\r\n   * @param {String} easing (optional) easing {@link phina.util.Tween#EASING}を参照してください。\r\n   * @chainable\r\n   */\r\n  fade(value, duration, easing) {\r\n    return this.to({ alpha: value }, duration, easing);\r\n  }\r\n\r\n  /**\r\n   * alphaを0にするアニメーションを設定します。\r\n   * @param {Number} duration (optional) アニメーションにかける時間\r\n   * @param {String} easing (optional) easing {@link phina.util.Tween#EASING}を参照してください。\r\n   * @chainable\r\n   */\r\n  fadeOut(duration, easing) {\r\n    return this.fade(0.0, duration, easing);\r\n  }\r\n\r\n  /**\r\n   * alphaを1にするアニメーションを設定します。\r\n   * @param {Number} duration (optional) アニメーションにかける時間\r\n   * @param {String} easing (optional) easing {@link phina.util.Tween#EASING}を参照してください。\r\n   * @chainable\r\n   */\r\n  fadeIn(duration, easing) {\r\n    return this.fade(1.0, duration, easing);\r\n  }\r\n\r\n  /**\r\n   * アニメーション開始\r\n   * @chainable\r\n   */\r\n  play() {\r\n    this.playing = true;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * アニメーションを一時停止\r\n   * @chainable\r\n   */\r\n  pause() {\r\n    this.playing = false;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * アニメーションを停止し、最初まで巻き戻します。\r\n   * @chainable\r\n   */\r\n  stop() {\r\n    this.playing = false;\r\n    this.rewind();\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * アニメーションを巻き戻す\r\n   * @chainable\r\n   */\r\n  rewind() {\r\n    this._update = this._updateTask;\r\n    this._index = 0;\r\n    return this;\r\n  }\r\n\r\n  yoyo() {\r\n    // TODO: 最初の値が分からないので反転できない...\r\n    this._update = this._updateTask;\r\n    this._index = 0;\r\n    this._tasks.each(function(task) {\r\n      if (task.type === 'tween') ;\r\n    });\r\n    this.play();\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * アニメーションループ設定\r\n   * @param {Boolean} flag\r\n   * @chainable\r\n   */\r\n  setLoop(flag) {\r\n    this._loop = flag;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * アニメーションをクリア\r\n   * @chainable\r\n   */\r\n  clear() {\r\n    this._init();\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * JSON形式でアニメーションを設定します。\r\n   * @chainable\r\n   * @param {Object} json\r\n   * @param {Boolean} json.loop (optional) ループする場合true\r\n   * @param {Array[]} json.tweens 設定するアニメーション\r\n   * \r\n   * ```\r\n   * [\r\n   *   [method, arg1, arg2,,,],\r\n   *   ['to', {value: 100}, 1000, 'swing'],\r\n   *   ['wait', 1000],\r\n   *   ['set', 'text', 'END']\r\n   * ]\r\n   * ```\r\n   */\r\n  fromJSON(json) {\r\n    if (json.loop !== undefined) {\r\n      this.setLoop(json.loop);\r\n    }\r\n\r\n    json.tweens.each(function(t) {\r\n      t = t.clone();\r\n      var method = t.shift();\r\n      this[method].apply(this, t);\r\n    }, this);\r\n\r\n    return this;\r\n  }\r\n\r\n  _add(params) {\r\n    this._tasks.push(params);\r\n  }\r\n\r\n  _updateTask(app) {\r\n    if (!this.playing) return ;\r\n\r\n    var task = this._tasks[this._index];\r\n    if (!task) {\r\n      if (this._loop) {\r\n        this.rewind();\r\n        this._update(app);\r\n      }\r\n      else {\r\n        this.playing = false;\r\n      }\r\n      return ;\r\n    }\r\n    else {\r\n      ++this._index;\r\n    }\r\n\r\n    if (task.type === 'tween') {\r\n      // this._tween = phina.util.Tween();\r\n      this._tween = new Tween();\r\n\r\n      var duration = task.duration || this._getDefaultDuration();\r\n      if (task.mode === 'to') {\r\n        this._tween.to(this.target, task.props, duration, task.easing);\r\n      }\r\n      else if (task.mode === 'by') {\r\n        this._tween.by(this.target, task.props, duration, task.easing);\r\n      }\r\n      else {\r\n        this._tween.from(this.target, task.props, duration, task.easing);\r\n      }\r\n      this._update = this._updateTween;\r\n      this._update(app);\r\n    }\r\n    else if (task.type === 'wait') {\r\n      this._wait = {\r\n        time: 0,\r\n        limit: task.data.limit,\r\n      };\r\n\r\n      this._update = this._updateWait;\r\n      this._update(app);\r\n    }\r\n    else if (task.type === 'call') {\r\n      task.data.func.apply(task.data.self, task.data.args);\r\n      // 1フレーム消費しないよう再帰\r\n      this._update(app);\r\n    }\r\n    else if (task.type === 'set') {\r\n      this.target.$extend(task.data.values);\r\n      // 1フレーム消費しないよう再帰\r\n      this._update(app);\r\n    }\r\n  }\r\n\r\n  _updateTween(app) {\r\n    var tween = this._tween;\r\n    var time = this._getUnitTime(app);\r\n\r\n    tween.forward(time);\r\n    this.flare('tween');\r\n\r\n    if (tween.time >= tween.duration) {\r\n      delete this._tween;\r\n      this._tween = null;\r\n      this._update = this._updateTask;\r\n    }\r\n  }\r\n\r\n  _updateWait(app) {\r\n    var wait = this._wait;\r\n    var time = this._getUnitTime(app);\r\n    wait.time += time;\r\n\r\n    if (wait.time >= wait.limit) {\r\n      delete this._wait;\r\n      this._wait = null;\r\n      this._update = this._updateTask;\r\n    }\r\n  }\r\n\r\n  _getUnitTime(app) {\r\n    var obj = UPDATE_MAP[this.updateType];\r\n    if (obj) {\r\n      return obj.func(app);\r\n    }\r\n    else {\r\n      return 1000 / app.fps;\r\n    }\r\n  }\r\n\r\n  _getDefaultDuration() {\r\n    var obj = UPDATE_MAP[this.updateType];\r\n    return obj && obj.duration;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @static\r\n * {@link #updateType}に設定する更新方法の定義です。\r\n * 下記の表に定義済みの更新方法を{@link #updateType}に設定することで、\r\n * アニメーションの更新方法を変更することができます。\r\n * \r\n * | 更新方法 | 単位(デフォルト値) | 1フレームあたりのアニメーション速度 |\r\n * |-|-|-|\r\n * | normal | ミリ秒(1000) | app.fpsによって変化 |\r\n * | delta | ミリ秒(1000) | 経過時間によって変化 |\r\n * | fps | フレーム(30) | 必ず同じ速度で変化 |\r\n */\r\nvar UPDATE_MAP = Tweener.UPDATE_MAP = {\r\n  normal: {\r\n    func: function(app) {\r\n      return 1000 / app.fps;\r\n    },\r\n    duration: 1000,\r\n  },\r\n\r\n  delta: {\r\n    func: function(app) {\r\n      return app.ticker.deltaTime;\r\n    },\r\n    duration: 1000,\r\n  },\r\n\r\n  fps: {\r\n    func: function(app) {\r\n      return 1;\r\n    },\r\n    duration: 30,\r\n  },\r\n\r\n};\r\n\r\n// Element側で拡張\r\n// /**\r\n//  * @member phina.app.Element\r\n//  * @property tweener\r\n//  * 自身にアタッチ済みの{@link phina.accessory.Tweener}オブジェクト。\r\n//  */\r\n// phina.app.Element.prototype.getter('tweener', function() {\r\n//   if (!this._tweener) {\r\n//     this._tweener = phina.accessory.Tweener().attachTo(this);\r\n//   }\r\n//   return this._tweener;\r\n// });\n\n/**\r\n * @class phina.app.Element\r\n * @extends phina.util.EventDispatcher\r\n * # 主に要素の親子関係を扱うクラス\r\n * 主に親子関係等を定義するクラスです。\r\n */\r\nclass Element extends EventDispatcher {\r\n\r\n  /**\r\n   * @property parent\r\n   * 親要素\r\n   */\r\n  // parent = null;\r\n\r\n  /**\r\n   * @property children\r\n   * 子要素\r\n   */\r\n  // children = null;\r\n\r\n  /**\r\n   * @property awake\r\n   * 有効かどうか\r\n   */\r\n  // awake = true;\r\n\r\n  /**\r\n   * @constructor\r\n   */\r\n  constructor() {\r\n    super();\r\n\r\n    this.children = [];\r\n  }\r\n\r\n  /**\r\n   * @method addChild\r\n   * 自身に子要素を追加します。\r\n   *\r\n   * 自身を子要素として引数で指定した要素に追加するには {@link #addChildTo} を使用してください。\r\n   *\r\n   * @param {Object} child 追加する子要素\r\n   */\r\n  addChild(child) {\r\n    if (child.parent) child.remove();\r\n\r\n    child.parent = this;\r\n    this.children.push(child);\r\n\r\n    child.has('added') && child.flare('added');\r\n\r\n    return child;\r\n  }\r\n\r\n  /**\r\n   * @method addChildTo\r\n   * 自身を子要素として引数で指定した要素に追加します。\r\n   *\r\n   * 自身に子要素を追加するには {@link #addChild} を使用してください。\r\n   *\r\n   * @param {Object} parent 自身を子要素として追加する要素\r\n   */\r\n  addChildTo(parent) {\r\n    parent.addChild(this);\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @method addChildAt\r\n   * 自身を、指定した要素の子要素の任意の配列インデックスに追加します。\r\n   *\r\n   * @param {Object} child 追加する子要素\r\n   * @param {Number} index インデックス番号\r\n   */\r\n  addChildAt(child, index) {\r\n    if (child.parent) child.remove();\r\n\r\n    child.parent = this;\r\n    this.children.splice(index, 0, child);\r\n\r\n    child.has('added') && child.flare('added');\r\n\r\n    return child;\r\n  }\r\n\r\n  /**\r\n   * @method getChildAt\r\n   * 指定したインデックスの子要素を返します。\r\n   *\r\n   * @param {Number} index インデックス番号\r\n   * @return {Object} 指定したインデックスの子要素\r\n   */\r\n  getChildAt(index) {\r\n    // return this.children.at(index);\r\n    return at.call(this.children, index);\r\n  }\r\n\r\n  /**\r\n   * @method getChildByName\r\n   * 指定した名前の子要素を返します。（未実装）\r\n   */\r\n  getChildByName(name) {\r\n    // TODO:\r\n  }\r\n\r\n  /**\r\n   * @method getChildIndex\r\n   * 指定した子要素のインデックス番号を返します。\r\n   *\r\n   * @param {Object} child 子要素\r\n   * @return {Number} 指定した子要素のインデックス番号\r\n   */\r\n  getChildIndex(child) {\r\n    return this.children.indexOf(child);\r\n  }\r\n\r\n  /**\r\n   * @method getParent\r\n   * 指定した要素の親要素を返します。\r\n   *\r\n   * @return {Object} 指定した要素の親要素\r\n   */\r\n  getParent() {\r\n    return this.parent;\r\n  }\r\n\r\n  /**\r\n   * @method getRoot\r\n   * 指定した要素の階層ツリーのルートを返します。\r\n   *\r\n   * @return {Object} 指定した要素の階層ツリーのルート\r\n   */\r\n  getRoot() {\r\n    var elm = this;\r\n    for (elm=this.parent; elm.parent != null; elm = elm.parent) {\r\n\r\n    }\r\n    return elm;\r\n  }\r\n\r\n  /**\r\n   * @method removeChild\r\n   * @chainable\r\n   * 指定した要素を自身の子要素から削除します。\r\n   *\r\n   * @param {Object} child 要素\r\n   */\r\n  removeChild(child) {\r\n    var index = this.children.indexOf(child);\r\n    if (index !== -1) {\r\n      this.children.splice(index, 1);\r\n      child.has('removed') && child.flare('removed');\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @method remove\r\n   * 自身を親要素の子要素から削除します。\r\n   */\r\n  remove() {\r\n    if (!this.parent) return ;\r\n\r\n    this.parent.removeChild(this);\r\n    this.parent = null;\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @method isAwake\r\n   * 自身が有効かどうかを返します。\r\n   *\r\n   * @return {Boolean} 有効かどうか\r\n   */\r\n  isAwake() {\r\n    return this.awake;\r\n  }\r\n\r\n  /**\r\n   * @method wakeUp\r\n   * 自身を有効にします。\r\n   */\r\n  wakeUp() {\r\n    this.awake = true;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @method sleep\r\n   * 自身を無効にします。\r\n   */\r\n  sleep() {\r\n    this.awake = false;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @method fromJSON\r\n   * JSON 形式を使って自身に子要素を追加することができます。\r\n   *\r\n   * ### Example\r\n   *      this.fromJSON({\r\n   *        \"children\": {\r\n   *          \"label\": {                  //キー名が追加する子要素の名前になる\r\n   *            \"className\": \"Label\",     //クラス\r\n   *            \"arguments\": ['hello!'],  //初期化時の引数\r\n   *            \"x\":320,                  //その他プロパティ\r\n   *            \"y\":480,\r\n   *          },\r\n   *        },\r\n   *      });\r\n   *\r\n   * @param {JSON} json JSON 形式\r\n   */\r\n  fromJSON(json) {\r\n\r\n    var createChildren = function(name, data) {\r\n      var args = data.arguments;\r\n      args = (args instanceof Array) ? args : [args];\r\n\r\n      var _class;\r\n      var element;\r\n      if (typeof data.className === 'string') {\r\n        // is phina class\r\n        _class = phina$1.using(data.className);\r\n        element = _class.apply(null, args);\r\n      } else if (typeof data.className === 'function') {\r\n        // is ES class\r\n        // インスタンス化にスプレッド構文が必要なため、es5サポートの場合babelが必要\r\n        element = new data.className(...args);\r\n      }\r\n\r\n      element.name = name;\r\n      this[name] = element;\r\n\r\n      element.fromJSON(data);\r\n      element.addChildTo(this);\r\n    }.bind(this);\r\n\r\n    forIn.call(json, function(key, value) {\r\n    // json.forIn(function(key, value) {\r\n      if (key === 'children') {\r\n        forIn.call(value, function(name, data) {\r\n        // value.forIn(function(name, data) {\r\n          createChildren(name, data);\r\n        });\r\n      }\r\n      else {\r\n        if (key !== 'type' && key !== 'className') {\r\n          this[key] = value;\r\n        }\r\n      }\r\n    }, this);\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @method toJSON\r\n   * 自身の子要素を JSON 形式で返します。\r\n   *\r\n   * @return {JSON} JSON形式\r\n   */\r\n  toJSON() {\r\n    var keys = Object.keys(phina$1.using(this.className).defaults || {});\r\n\r\n    this._hierarchies.forEach(function(e) {\r\n      var d = e.defaults;\r\n      if (d) {\r\n        Object.keys(d).forEach(function(k) {\r\n          if (keys.indexOf(k) === -1) {\r\n            keys.push(k);\r\n          }\r\n        });\r\n      }\r\n    });\r\n\r\n    keys.push('name', 'className');\r\n\r\n    var json = {};\r\n    // keys.each(function(key) {\r\n    keys.forEach(function(key) {\r\n      json[key] = this[key];\r\n    }, this);\r\n\r\n    var children = this.children.map(function(child) {\r\n      return child.toJSON();\r\n    });\r\n\r\n    if (children.length) {\r\n      json.children = {};\r\n      // children.each(function(child, i) {\r\n      children.forEach(function(child, i) {\r\n        json.children[child.name || (child.className + '_' + i)] = child;\r\n      });\r\n    }\r\n\r\n    return json;\r\n  }\r\n\r\n  /**\r\n   * accessoryを付与する\r\n   * @param  {Accessory} Accessory継承クラス\r\n   * @return {this}\r\n   */\r\n  attach(accessory) {\r\n    if (!this.accessories) {\r\n      this.accessories = [];\r\n      this.on('enterframe', function(e) {\r\n        this.accessories.forEach(function(accessory) {\r\n          accessory.update && accessory.update(e.app);\r\n        });\r\n      });\r\n    }\r\n\r\n    this.accessories.push(accessory);\r\n    accessory.setTarget(this);\r\n    accessory.flare('attached');\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * accessoryを削除\r\n   * @param  {Accessory} Accessory継承クラス\r\n   * @return {this}\r\n   */\r\n  detach(accessory) {\r\n    if (this.accessories) {\r\n      // this.accessories.erase(accessory);\r\n      erase.call(this.accessories, accessory);\r\n      accessory.setTarget(null);\r\n      accessory.flare('detached');\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  get tweener() {\r\n    if (!this._tweener) {\r\n      this._tweener = new Tweener().attachTo(this);\r\n    }\r\n    return this._tweener;\r\n  }\r\n}\n\n/**\r\n * @class phina.app.Scene\r\n * @extends phina.app.Element\r\n */\r\nclass Scene extends Element {\r\n\r\n  constructor() {\r\n    super();\r\n  }\r\n\r\n  exit(nextLabel, nextArguments) {\r\n    if (!this.app) return ;\r\n\r\n    if (arguments.length > 0) {\r\n      if (typeof arguments[0] === 'object') {\r\n        nextLabel = arguments[0].nextLabel || this.nextLabel;\r\n        nextArguments = arguments[0];\r\n      }\r\n\r\n      this.nextLabel = nextLabel;\r\n      this.nextArguments = nextArguments;\r\n    }\r\n\r\n    this.app.popScene();\r\n\r\n    return this;\r\n  }\r\n\r\n}\n\n/**\r\n * @class phina.app.BaseApp\r\n * ベースとなるアプリケーションクラス\r\n * @extends phina.util.EventDispatcher\r\n */\r\nclass BaseApp extends EventDispatcher {\r\n\r\n  // /** awake */\r\n  // awake = null\r\n  // /** fps */\r\n  // fps = null\r\n  // /** frame */\r\n  // frame = null\r\n\r\n  /**\r\n   * @constructor\r\n   */\r\n  constructor() {\r\n    super();\r\n    this._scenes = [new Scene()];\r\n    this._sceneIndex = 0;\r\n\r\n    this.updater = new Updater(this);\r\n    this.interactive = new Interactive(this);\r\n\r\n    this.awake = true;\r\n    this.ticker = new Ticker();\r\n  }\r\n\r\n  run() {\r\n    var self = this;\r\n    this._loopCaller = function() {\r\n      self._loop();\r\n    };\r\n    this.ticker.tick(this._loopCaller);\r\n\r\n    this.ticker.start();\r\n\r\n    return this;\r\n  }\r\n\r\n  kill() {\r\n    this.ticker.stop();\r\n    this.ticker.untick(this._loopCaller);\r\n    return this;\r\n  }\r\n\r\n  replaceScene(scene) {\r\n    this.flare('replace');\r\n    this.flare('changescene');\r\n    if (this.currentScene) {\r\n      this.currentScene.app = null;\r\n    }\r\n    this.currentScene = scene;\r\n    this.currentScene.app = this;\r\n    this.currentScene.flare('enter', {\r\n      app: this,\r\n    });\r\n\r\n    return this;\r\n  }\r\n\r\n  pushScene(scene) {\r\n    this.flare('push');\r\n    this.flare('changescene');\r\n\r\n    this.currentScene.flare('pause', {\r\n      app: this,\r\n    });\r\n\r\n    this._scenes.push(scene);\r\n    ++this._sceneIndex;\r\n\r\n    this.flare('pushed');\r\n\r\n    scene.app = this;\r\n    scene.flare('enter', {\r\n      app: this,\r\n    });\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * シーンをポップする(ポーズやオブション画面などで使用)\r\n   */\r\n  popScene() {\r\n    this.flare('pop');\r\n    this.flare('changescene');\r\n\r\n    var scene = this._scenes.pop();\r\n    --this._sceneIndex;\r\n\r\n    scene.flare('exit', {\r\n      app: this,\r\n    });\r\n    scene.app = null;\r\n\r\n    this.flare('poped');\r\n\r\n    //\r\n    this.currentScene.flare('resume', {\r\n      app: this,\r\n      prevScene: scene,\r\n    });\r\n\r\n    return scene;\r\n  }\r\n\r\n  /**\r\n   * シーンのupdateを実行するようにする\r\n   */\r\n  start() {\r\n    this.awake = true;\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * シーンのupdateを実行しないようにする\r\n   */\r\n  stop() {\r\n    this.awake = false;\r\n\r\n    return this;\r\n  }\r\n\r\n  enableStats() {\r\n    if (phina$1.global.Stats) {\r\n      this.stats = new Stats();\r\n      document.body.appendChild(this.stats.domElement);\r\n    }\r\n    else {\r\n      // console.warn(\"not defined stats.\");\r\n      var STATS_URL = 'https://cdnjs.cloudflare.com/ajax/libs/stats.js/r14/Stats.js';\r\n      var script = document.createElement('script');\r\n      script.src = STATS_URL;\r\n      document.body.appendChild(script);\r\n      script.onload = function() {\r\n        this.enableStats();\r\n      }.bind(this);\r\n    }\r\n    return this;\r\n  }\r\n\r\n  enableDatGUI(callback) {\r\n    if (phina$1.global.dat) {\r\n      var gui = new phina$1.global.dat.GUI();\r\n      callback(gui);\r\n    }\r\n    else {\r\n      // console.warn(\"not defined dat.GUI.\");\r\n      var URL = 'https://cdnjs.cloudflare.com/ajax/libs/dat-gui/0.5.1/dat.gui.js';\r\n      var script = document.createElement('script');\r\n      script.src = URL;\r\n      document.body.appendChild(script);\r\n      script.onload = function() {\r\n        var gui = new phina$1.global.dat.GUI();\r\n        callback(gui);\r\n      }.bind(this);\r\n    }\r\n    return this;\r\n  }\r\n\r\n  _loop() {\r\n    this._update();\r\n    this.interactive.check(this.currentScene);\r\n    this._draw();\r\n\r\n    // stats update\r\n    if (this.stats) this.stats.update();\r\n  }\r\n\r\n  _update() {\r\n    if (this.awake) {\r\n      // エンターフレームイベント\r\n      if (this.has('enterframe')) {\r\n        this.flare('enterframe');\r\n      }\r\n\r\n      this.update && this.update();\r\n      this.updater.update(this.currentScene);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 描画用仮想関数\r\n   * @private\r\n   */\r\n  _draw() {}\r\n\r\n  get currentScene()   { return this._scenes[this._sceneIndex]; }\r\n  set currentScene(v)  { this._scenes[this._sceneIndex] = v; }\r\n\r\n  get rootScene()   { return this._scenes[0]; }\r\n  set rootScene(v)  { this._scenes[0] = v; }\r\n\r\n  get frame() { return this.ticker.frame; }\r\n  set frame(v) { this.ticker.frame = v; }\r\n\r\n  get fps() { return this.ticker.fps; }\r\n  set fps(v) { this.ticker.fps = v; }\r\n\r\n  get deltaTime() { return this.ticker.deltaTime; }\r\n\r\n  get elapsedTime() { return this.ticker.elapsedTime; }\r\n\r\n  get currentTime() { return this.ticker.currentTime; }\r\n\r\n  get startTime() { return this.ticker.startTime; }\r\n\r\n}\n\n/**\r\n * @class phina.app.Object2D\r\n * Object2D\r\n * @extends phina.app.Element\r\n */\r\nclass Object2D extends Element {\r\n\r\n  // /** 位置 */\r\n  // position: null,\r\n  // /** 回転 */\r\n  // rotation: 0,\r\n  // /** スケール */\r\n  // scale: null,\r\n  // /** 基準位置 */\r\n  // origin: null,\r\n\r\n  /**\r\n   * @constructor\r\n   */\r\n  constructor(options) {\r\n    super();\r\n\r\n    options = $safe.call({}, options, Object2D.defaults);\r\n    // options = ({}).$safe(options, phina.app.Object2D.defaults);\r\n\r\n    this.position = new Vector2(options.x, options.y);\r\n    this.scale    = new Vector2(options.scaleX, options.scaleY);\r\n    this.rotation = options.rotation;\r\n    this.origin   = new Vector2(options.originX, options.originY);\r\n\r\n    this._matrix = new Matrix33().identity();\r\n    this._worldMatrix = new Matrix33().identity();\r\n\r\n    this.interactive = false;\r\n    this._overFlags = {};\r\n    this._touchFlags = {};\r\n\r\n    this.width = options.width;\r\n    this.height = options.height;\r\n    this.radius = options.radius;\r\n    this.boundingType = options.boundingType;\r\n  }\r\n\r\n  /**\r\n   * 点と衝突しているかを判定\r\n   * @param {Number} x\r\n   * @param {Number} y\r\n   */\r\n  hitTest(x, y) {\r\n    if (this.boundingType === 'rect') {\r\n      return this.hitTestRect(x, y);\r\n    }\r\n    else if (this.boundingType === 'circle') {\r\n      return this.hitTestCircle(x, y);\r\n    }\r\n    else {\r\n      // none の場合\r\n      return true;\r\n    }\r\n  }\r\n\r\n  hitTestRect(x, y) {\r\n    var p = this.globalToLocal(new Vector2(x, y));\r\n\r\n    var left   = -this.width*this.originX;\r\n    var right  = +this.width*(1-this.originX);\r\n    var top    = -this.height*this.originY;\r\n    var bottom = +this.height*(1-this.originY);\r\n\r\n    return ( left < p.x && p.x < right ) && ( top  < p.y && p.y < bottom );\r\n  }\r\n\r\n  hitTestCircle(x, y) {\r\n    // 円判定\r\n    var p = this.globalToLocal(new Vector2(x, y));\r\n    if (((p.x)*(p.x)+(p.y)*(p.y)) < (this.radius*this.radius)) {\r\n        return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * 要素と衝突しているかを判定\r\n   * @param {Object} elm\r\n   */\r\n  hitTestElement(elm) {\r\n    var rect0 = this;\r\n    var rect1 = elm;\r\n    return (rect0.left < rect1.right) && (rect0.right > rect1.left) &&\r\n           (rect0.top < rect1.bottom) && (rect0.bottom > rect1.top);\r\n  }\r\n\r\n\r\n  globalToLocal(p) {\r\n    var matrix = this._worldMatrix.clone();\r\n    matrix.invert();\r\n    // matrix.transpose();\r\n\r\n    var temp = matrix.multiplyVector2(p);\r\n\r\n    return temp;\r\n  }\r\n\r\n  setInteractive(flag, type) {\r\n    this.interactive = flag;\r\n    if (type) {\r\n      this.boundingType = type;\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * X 座標値をセット\r\n   * @param {Number} x\r\n   */\r\n  setX(x) {\r\n    this.position.x = x;\r\n    return this;\r\n  }\r\n  \r\n  /**\r\n   * Y 座標値をセット\r\n   * @param {Number} y\r\n   */\r\n  setY(y) {\r\n    this.position.y = y;\r\n    return this;\r\n  }\r\n  \r\n  /**\r\n   * XY 座標をセット\r\n   * @param {Number} x\r\n   * @param {Number} y\r\n   */\r\n  setPosition(x, y) {\r\n    this.position.x = x;\r\n    this.position.y = y;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * 回転をセット\r\n   * @param {Number} rotation\r\n   */\r\n  setRotation(rotation) {\r\n    this.rotation = rotation;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * スケールをセット\r\n   * @param {Number} x\r\n   * @param {Number} y\r\n   */\r\n  setScale(x, y) {\r\n    this.scale.x = x;\r\n    if (arguments.length <= 1) {\r\n        this.scale.y = x;\r\n    } else {\r\n        this.scale.y = y;\r\n    }\r\n    return this;\r\n  }\r\n  \r\n  /**\r\n   * 基準点をセット\r\n   * @param {Number} x\r\n   * @param {Number} y\r\n   */\r\n  setOrigin(x, y) {\r\n    this.origin.x = x;\r\n    this.origin.y = y;\r\n    return this;\r\n  }\r\n  \r\n  /**\r\n   * 幅をセット\r\n   * @param {Number} width\r\n   */\r\n  setWidth(width) {\r\n    this.width = width;\r\n    return this;\r\n  }\r\n  \r\n  /**\r\n   * 高さをセット\r\n   * @param {Number} height\r\n   */\r\n  setHeight(height) {\r\n    this.height = height;\r\n    return this;\r\n  }\r\n  \r\n  /**\r\n   * サイズ(幅, 高さ)をセット\r\n   * @param {Number} width\r\n   * @param {Number} height\r\n   */\r\n  setSize(width, height) {\r\n    this.width  = width;\r\n    this.height = height;\r\n    return this;\r\n  }\r\n\r\n  setBoundingType(type) {\r\n    this.boundingType = type;\r\n    return this;\r\n  }\r\n\r\n  moveTo(x, y) {\r\n    this.position.x = x;\r\n    this.position.y = y;\r\n    return this;\r\n  }\r\n\r\n  moveBy(x, y) {\r\n    this.position.x += x;\r\n    this.position.y += y;\r\n    return this;\r\n  }\r\n\r\n  _calcWorldMatrix() {\r\n    if (!this.parent) return ;\r\n\r\n    // cache check\r\n    if (this.rotation != this._cachedRotation) {\r\n      this._cachedRotation = this.rotation;\r\n\r\n      var r = this.rotation*(Math.PI/180);\r\n      this._sr = Math.sin(r);\r\n      this._cr = Math.cos(r);\r\n    }\r\n\r\n    var local = this._matrix;\r\n    var parent = this.parent._worldMatrix || Matrix33.IDENTITY;\r\n    var world = this._worldMatrix;\r\n\r\n    // ローカルの行列を計算\r\n    local.m00 = this._cr * this.scale.x;\r\n    local.m01 =-this._sr * this.scale.y;\r\n    local.m10 = this._sr * this.scale.x;\r\n    local.m11 = this._cr * this.scale.y;\r\n    local.m02 = this.position.x;\r\n    local.m12 = this.position.y;\r\n\r\n    // cache\r\n    var a00 = local.m00; var a01 = local.m01; var a02 = local.m02;\r\n    var a10 = local.m10; var a11 = local.m11; var a12 = local.m12;\r\n    var b00 = parent.m00; var b01 = parent.m01; var b02 = parent.m02;\r\n    var b10 = parent.m10; var b11 = parent.m11; var b12 = parent.m12;\r\n\r\n    // 親の行列と掛け合わせる\r\n    world.m00 = b00 * a00 + b01 * a10;\r\n    world.m01 = b00 * a01 + b01 * a11;\r\n    world.m02 = b00 * a02 + b01 * a12 + b02;\r\n\r\n    world.m10 = b10 * a00 + b11 * a10;\r\n    world.m11 = b10 * a01 + b11 * a11;\r\n    world.m12 = b10 * a02 + b11 * a12 + b12;\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @property    x\r\n   * x座標値\r\n   */\r\n  get x()   { return this.position.x; }\r\n  set x(v)  { this.position.x = v; }\r\n\r\n  /**\r\n   * @property    y\r\n   * y座標値\r\n   */\r\n  get y()   { return this.position.y; }\r\n  set y(v)  { this.position.y = v; }\r\n\r\n  /**\r\n   * @property    originX\r\n   * x座標値\r\n   */\r\n  get originX()   { return this.origin.x; }\r\n  set originX(v)  { this.origin.x = v; }\r\n\r\n  /**\r\n   * @property    originY\r\n   * y座標値\r\n   */\r\n  get originY()   { return this.origin.y; }\r\n  set originY(v)  { this.origin.y = v; }\r\n\r\n  /**\r\n   * @property    scaleX\r\n   * スケールX値\r\n   */\r\n  get scaleX()   { return this.scale.x; }\r\n  set scaleX(v)  { this.scale.x = v; }\r\n  \r\n  /**\r\n   * @property    scaleY\r\n   * スケールY値\r\n   */\r\n  get scaleY()   { return this.scale.y; }\r\n  set scaleY(v)  { this.scale.y = v; }\r\n  \r\n  /**\r\n   * @property    width\r\n   * width\r\n   */\r\n  get width()   {\r\n    return (this.boundingType === 'rect') ?\r\n      this._width : this._diameter;\r\n  }\r\n  set width(v)  { this._width = v; }\r\n  /**\r\n   * @property    height\r\n   * height\r\n   */\r\n  get height()   {\r\n    return (this.boundingType === 'rect') ?\r\n      this._height : this._diameter;\r\n  }\r\n  set height(v)  { this._height = v; }\r\n\r\n  /**\r\n   * @property    radius\r\n   * 半径\r\n   */\r\n  get radius()   {\r\n    return (this.boundingType === 'rect') ?\r\n      (this.width+this.height)/4 : this._radius;\r\n  }\r\n  set radius(v)  {\r\n    this._radius = v;\r\n    this._diameter = v*2;\r\n  }\r\n  \r\n  /**\r\n   * @property    top\r\n   * 左\r\n   */\r\n  get top()   { return this.y - this.height*this.originY; }\r\n  set top(v)  { this.y = v + this.height*this.originY; }\r\n\r\n  /**\r\n   * @property    right\r\n   * 左\r\n   */\r\n  get right()   { return this.x + this.width*(1-this.originX); }\r\n  set right(v)  { this.x = v - this.width*(1-this.originX); }\r\n\r\n  /**\r\n   * @property    bottom\r\n   * 左\r\n   */\r\n  get bottom()   { return this.y + this.height*(1-this.originY); }\r\n  set bottom(v)  { this.y = v - this.height*(1-this.originY); }\r\n\r\n  /**\r\n   * @property    left\r\n   * 左\r\n   */\r\n  get left()   { return this.x - this.width*this.originX; }\r\n  set left(v)  { this.x = v + this.width*this.originX; }\r\n\r\n  /**\r\n   * @property    centerX\r\n   * centerX\r\n   */\r\n  get centerX()   { return this.x + this.width/2 - this.width*this.originX; }\r\n  set centerX(v)  {\r\n    // TODO: どうしようかな??\r\n  }\r\n\r\n  /**\r\n   * @property    centerY\r\n   * centerY\r\n   */\r\n  get centerY()   { return this.y + this.height/2 - this.height*this.originY; }\r\n  set centerY(v)  {\r\n    // TODO: どうしようかな??\r\n  }\r\n}\r\n\r\nObject2D.defaults = {\r\n  x: 0,\r\n  y: 0,\r\n  scaleX: 1,\r\n  scaleY: 1,\r\n  rotation: 0,\r\n  originX: 0.5,\r\n  originY: 0.5,\r\n  width: 64,\r\n  height: 64,\r\n  radius: 32,\r\n  boundingType: 'rect',\r\n};\n\n/**\r\n * @class phina.display.DomApp\r\n * @extends phina.app.BaseApp\r\n */\r\nclass DomApp extends BaseApp {\r\n\r\n  // domElement: null,\r\n\r\n  /**\r\n   * @constructor\r\n   */\r\n  constructor(options) {\r\n    super(options);\r\n\r\n    if (options.domElement) {\r\n      this.domElement = options.domElement;\r\n    }\r\n    else {\r\n      if (options.query) {\r\n        this.domElement = document.querySelector(options.query);\r\n      }\r\n      else {\r\n        console.assert('error');\r\n      }\r\n    }\r\n\r\n    if (options.fps !== undefined) {\r\n      this.fps = options.fps;\r\n    }\r\n    \r\n    if(typeof options.runner === 'function') {\r\n      this.ticker.runner = options.runner;\r\n    }\r\n\r\n    this.mouse = new Mouse(this.domElement);\r\n    this.touch = new Touch(this.domElement);\r\n    this.touchList = new TouchList(this.domElement, 5);\r\n    this.keyboard = new Keyboard(document);\r\n    // // 加速度センサーを生成\r\n    // this.accelerometer = phina.input.Accelerometer();\r\n\r\n    // ポインタをセット(PC では Mouse, Mobile では Touch)\r\n    this.pointer = this.touch;\r\n    this.pointers = this.touchList.touches;\r\n\r\n    this.domElement.addEventListener(\"touchstart\", function () {\r\n      this.pointer = this.touch;\r\n      this.pointers = this.touchList.touches;\r\n    }.bind(this));\r\n    this.domElement.addEventListener(\"mouseover\", function () {\r\n      this.pointer = this.mouse;\r\n      this.pointers = [this.mouse];\r\n    }.bind(this));\r\n\r\n    // keyboard event\r\n    this.keyboard.on('keydown', function(e) {\r\n      this.currentScene && this.currentScene.flare('keydown', {\r\n        keyCode: e.keyCode,\r\n      });\r\n    }.bind(this));\r\n    this.keyboard.on('keyup', function(e) {\r\n      this.currentScene && this.currentScene.flare('keyup', {\r\n        keyCode: e.keyCode,\r\n      });\r\n    }.bind(this));\r\n    this.keyboard.on('keypress', function(e) {\r\n      this.currentScene && this.currentScene.flare('keypress', {\r\n        keyCode: e.keyCode,\r\n      });\r\n    }.bind(this));\r\n\r\n    // click 対応\r\n    var eventName = phina$1.isMobile() ? 'touchend' : 'mouseup';\r\n    this.domElement.addEventListener(eventName, this._checkClick.bind(this));\r\n\r\n    // 決定時の処理をオフにする(iPhone 時のちらつき対策)\r\n    this.domElement.addEventListener(\"touchstart\", function(e) { e.stop(); });\r\n    this.domElement.addEventListener(\"touchmove\", function(e) { e.stop(); });\r\n\r\n    // ウィンドウフォーカス時イベントリスナを登録\r\n    phina$1.global.addEventListener('focus', function() {\r\n      this.flare('focus');\r\n      this.currentScene.flare('focus');\r\n    }.bind(this), false);\r\n    // ウィンドウブラー時イベントリスナを登録\r\n    phina$1.global.addEventListener('blur', function() {\r\n      this.flare('blur');\r\n      this.currentScene.flare('blur');\r\n    }.bind(this), false);\r\n\r\n    // 更新関数を登録\r\n    this.on('enterframe', function() {\r\n      this.mouse.update();\r\n      this.touch.update();\r\n      this.touchList.update();\r\n      this.keyboard.update();\r\n    });\r\n  }\r\n\r\n  _checkClick(e) {\r\n    var _check = function(element) {\r\n      if (element.children.length > 0) {\r\n        element.children.forEach(function(child) {\r\n          _check(child);\r\n        });\r\n      }\r\n      if (element._clicked && element.has('click')) {\r\n        element.flare('click');\r\n      }\r\n      element._clicked = false;\r\n    };\r\n\r\n    _check(this.currentScene);\r\n  }\r\n\r\n}\n\n/**\r\n * @class phina.display.CanvasRenderer\r\n */\r\nclass CanvasRenderer {\r\n\r\n  constructor(canvas) {\r\n    this.canvas = canvas;\r\n    this._context = this.canvas.context;\r\n  }\r\n\r\n  render(scene) {\r\n    this.canvas.clear();\r\n    if (scene.backgroundColor) {\r\n      this.canvas.clearColor(scene.backgroundColor);\r\n    }\r\n\r\n    this._context.save();\r\n    this.renderChildren(scene);\r\n    this._context.restore();\r\n  }\r\n\r\n  renderChildren(obj) {\r\n    // 子供たちも実行\r\n    if (obj.children.length > 0) {\r\n      var tempChildren = obj.children.slice();\r\n      for (var i=0,len=tempChildren.length; i<len; ++i) {\r\n        this.renderObject(tempChildren[i]);\r\n      }\r\n    }\r\n  }\r\n\r\n  renderObject(obj) {\r\n    if (obj.visible === false && !obj.interactive) return;\r\n\r\n    obj._calcWorldMatrix && obj._calcWorldMatrix();\r\n\r\n    if (obj.visible === false) return;\r\n\r\n    obj._calcWorldAlpha && obj._calcWorldAlpha();\r\n\r\n    var context = this.canvas.context;\r\n\r\n    context.globalAlpha = obj._worldAlpha;\r\n    context.globalCompositeOperation = obj.blendMode;\r\n\r\n    if (obj._worldMatrix) {\r\n      // 行列をセット\r\n      var m = obj._worldMatrix;\r\n      context.setTransform( m.m00, m.m10, m.m01, m.m11, m.m02, m.m12 );\r\n    }\r\n\r\n    if (obj.clip) {\r\n\r\n      context.save();\r\n\r\n      obj.clip(this.canvas);\r\n      context.clip();\r\n\r\n      if (obj.draw) obj.draw(this.canvas);\r\n\r\n      // 子供たちも実行\r\n      if (obj.renderChildBySelf === false && obj.children.length > 0) {\r\n          var tempChildren = obj.children.slice();\r\n          for (var i=0,len=tempChildren.length; i<len; ++i) {\r\n              this.renderObject(tempChildren[i]);\r\n          }\r\n      }\r\n\r\n      context.restore();\r\n    }\r\n    else {\r\n      if (obj.draw) obj.draw(this.canvas);\r\n\r\n      // 子供たちも実行\r\n      if (obj.renderChildBySelf === false && obj.children.length > 0) {\r\n        var tempChildren = obj.children.slice();\r\n        for (var i=0,len=tempChildren.length; i<len; ++i) {\r\n          this.renderObject(tempChildren[i]);\r\n        }\r\n      }\r\n\r\n    }\r\n  }\r\n\r\n}\n\n/**\r\n * @class phina.display.DisplayScene\r\n * @extends phina.app.Scene\r\n */\r\nclass DisplayScene extends Scene {\r\n\r\n  constructor(params) {\r\n    super();\r\n\r\n    params = $safe.call({}, params, DisplayScene.defaults);\r\n    // params = ({}).$safe(params, DisplayScene.defaults);\r\n\r\n    this.canvas = new Canvas();\r\n    this.canvas.setSize(params.width, params.height);\r\n    this.renderer = new CanvasRenderer(this.canvas);\r\n    this.backgroundColor = (params.backgroundColor) ? params.backgroundColor : null;\r\n\r\n    this.width = params.width;\r\n    this.height = params.height;\r\n    this.gridX = new Grid(params.width, 16);\r\n    this.gridY = new Grid(params.height, 16);\r\n\r\n    // TODO: 一旦むりやり対応\r\n    this.interactive = true;\r\n    this.setInteractive = function(flag) {\r\n      this.interactive = flag;\r\n    };\r\n    this._overFlags = {};\r\n    this._touchFlags = {};\r\n\r\n    var ctx = this.canvas.context;\r\n    if (params.imageSmoothing === false) {\r\n      ctx.imageSmoothingEnabled = false;\r\n      ctx.webkitImageSmoothingEnabled = false;\r\n      ctx.msImageSmoothingEnabled = false;\r\n    }\r\n  }\r\n\r\n  hitTest() {\r\n    return true;\r\n  }\r\n\r\n  _update() {\r\n    if (this.update) {\r\n      this.update();\r\n    }\r\n  }\r\n\r\n  _render() {\r\n    this.renderer.render(this);\r\n  }\r\n\r\n}\r\n\r\nDisplayScene.defaults = {\r\n  width: 640,\r\n  height: 960,\r\n  imageSmoothing: true,\r\n};\n\n/**\r\n * @class phina.display.CanvasApp\r\n * @extends phina.display.DomApp\r\n */\r\nclass CanvasApp extends DomApp {\r\n\r\n  /**\r\n   * @constructor\r\n   */\r\n  constructor(options) {\r\n    options = $safe.call((options || {}), CanvasApp.defaults);\r\n    // options = (options || {}).$safe(CanvasApp.defaults);\r\n    \r\n    if (!options.query && !options.domElement) {\r\n      options.domElement = document.createElement('canvas');\r\n      if (options.append) {\r\n        document.body.appendChild(options.domElement);\r\n      }\r\n    }\r\n    super(options);\r\n\r\n    this.gridX = new Grid({\r\n      width: options.width,\r\n      columns: options.columns,\r\n    });\r\n    this.gridY = new Grid({\r\n      width: options.height,\r\n      columns: options.columns,\r\n    });\r\n\r\n    this.canvas = new Canvas(this.domElement);\r\n    this.canvas.setSize(options.width, options.height);\r\n\r\n    this.backgroundColor = (options.backgroundColor !== undefined) ? options.backgroundColor : 'white';\r\n\r\n    this.replaceScene(new DisplayScene({\r\n      width: options.width,\r\n      height: options.height,\r\n    }));\r\n\r\n    if (options.fit) {\r\n      this.fitScreen();\r\n    }\r\n\r\n    if (options.pixelated) {\r\n      // チラつき防止\r\n      // ドット絵ゲームのサポート\r\n      // https://drafts.csswg.org/css-images/#the-image-rendering\r\n      // https://developer.mozilla.org/en-US/docs/Web/CSS/image-rendering#Browser_compatibility\r\n      if (navigator.userAgent.match(/Firefox\\/\\d+/)) {\r\n        this.domElement.style.imageRendering = 'crisp-edges';\r\n      } else {\r\n        this.domElement.style.imageRendering = 'pixelated';\r\n      }\r\n    }\r\n\r\n    // pushScene, popScene 対策\r\n    this.on('push', function() {\r\n      // onenter 対策で描画しておく\r\n      if (this.currentScene.canvas) {\r\n        this._draw();\r\n      }\r\n    });\r\n  }\r\n\r\n  _draw() {\r\n    if (this.backgroundColor) {\r\n      this.canvas.clearColor(this.backgroundColor);\r\n    } else {\r\n      this.canvas.clear();\r\n    }\r\n\r\n    if (this.currentScene.canvas) {\r\n      this.currentScene._render();\r\n\r\n      // this._scenes.each(function(scene) {\r\n      this._scenes.forEach(function(scene) {\r\n        var c = scene.canvas;\r\n        if (c) {\r\n          this.canvas.context.drawImage(c.domElement, 0, 0, c.width, c.height);\r\n        }\r\n      }, this);\r\n    }\r\n  }\r\n\r\n  fitScreen() {\r\n    this.canvas.fitScreen();\r\n  }\r\n\r\n}\r\n\r\n// static\r\nCanvasApp.defaults = {\r\n  width: 640,\r\n  height: 960,\r\n  columns: 12,\r\n  fit: true,\r\n  append: true,\r\n};\n\n/**\r\n * @class phina.display.DisplayElement\r\n * @extends phina.app.Object2D\r\n */\r\nclass DisplayElement extends Object2D {\r\n\r\n  // /** 表示フラグ */\r\n  // visible: true,\r\n  // /** アルファ */\r\n  // alpha: 1.0,\r\n  // /** ブレンドモード */\r\n  // blendMode: \"source-over\",\r\n\r\n  // /** 子供を 自分のCanvasRenderer で描画するか */\r\n  // renderChildBySelf: false,\r\n\r\n  constructor(options) {\r\n    options = $safe.call({}, options||{}, DisplayElement.defaults);\r\n    // options = ({}).$safe(options || {}, phina.display.DisplayElement.defaults);\r\n\r\n    super(options);\r\n    this.visible = (options.visible != null) ? options.visible : true;\r\n    this.alpha = (options.alpha != null) ? options.alpha : 1.0;\r\n    this.blendMode = \"source-over\";\r\n    this.renderChildBySelf = false;\r\n    this._worldAlpha = 1.0;\r\n  }\r\n\r\n  /**\r\n   * アルファ値をセット\r\n   */\r\n  setAlpha(alpha) {\r\n    this.alpha = alpha;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * 表示/非表示をセット\r\n   */\r\n  setVisible(flag) {\r\n    this.visible = flag;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * 表示\r\n   */\r\n  show() {\r\n    this.visible = true;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * 非表示\r\n   */\r\n  hide() {\r\n    this.visible = false;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  _calcWorldAlpha() {\r\n    if (this.alpha < 0) {\r\n      this._worldAlpha = 0;\r\n      return;\r\n    }\r\n    if (!this.parent) {\r\n      this._worldAlpha = this.alpha;\r\n      return ;\r\n    }\r\n    else {\r\n      var worldAlpha = (this.parent._worldAlpha !== undefined) ? this.parent._worldAlpha : 1.0;\r\n      // alpha\r\n      this._worldAlpha = worldAlpha * this.alpha;\r\n    }\r\n  }\r\n\r\n}\r\n\r\nDisplayElement.defaults = {\r\n  alpha: 1.0,\r\n  visible: true,\r\n};\n\n/**\r\n * @class phina.asset.AssetManager\r\n * \r\n */\r\nclass AssetManager {\r\n\r\n  static get(type, key) {\r\n    return this.assets[type] && this.assets[type][key];\r\n  }\r\n\r\n  static set(type, key, asset) {\r\n    if (!this.assets[type]) {\r\n      this.assets[type] = {};\r\n    }\r\n    this.assets[type][key] = asset;\r\n  }\r\n\r\n  static contains(type, key) {\r\n    return ;\r\n  }\r\n\r\n}\r\n\r\nAssetManager.assets = {\r\n  image: {},\r\n  sound: {},\r\n  spritesheet: {},\r\n};\n\n/**\r\n * @class phina.display.Sprite\r\n * @extends phina.display.DisplayElement\r\n */\r\nclass Sprite extends DisplayElement {\r\n\r\n  constructor(image, width, height) {\r\n    super();\r\n\r\n    this.srcRect = new Rect();\r\n    this.setImage(image, width, height);\r\n  }\r\n\r\n  draw(canvas) {\r\n    var image = this.image.domElement;\r\n\r\n    // canvas.context.drawImage(image,\r\n    //   0, 0, image.width, image.height,\r\n    //   -this.width*this.origin.x, -this.height*this.origin.y, this.width, this.height\r\n    //   );\r\n\r\n    var srcRect = this.srcRect;\r\n    canvas.context.drawImage(image,\r\n      srcRect.x, srcRect.y, srcRect.width, srcRect.height,\r\n      -this._width*this.originX, -this._height*this.originY, this._width, this._height\r\n      );\r\n  }\r\n\r\n  setImage(image, width, height) {\r\n    if (typeof image === 'string') {\r\n      image = AssetManager.get('image', image);\r\n    }\r\n    this._image = image;\r\n    this.width = this._image.domElement.width;\r\n    this.height = this._image.domElement.height;\r\n\r\n    if (width) { this.width = width; }\r\n    if (height) { this.height = height; }\r\n\r\n    this.frameIndex = 0;\r\n\r\n    return this;\r\n  }\r\n\r\n  setFrameIndex(index, width, height) {\r\n    var tw  = width || this._width;      // tw\r\n    var th  = height || this._height;    // th\r\n    var row = ~~(this.image.domElement.width / tw);\r\n    var col = ~~(this.image.domElement.height / th);\r\n    var maxIndex = row*col;\r\n    index = index%maxIndex;\r\n    \r\n    var x = index%row;\r\n    var y = ~~(index/row);\r\n    this.srcRect.x = x*tw;\r\n    this.srcRect.y = y*th;\r\n    this.srcRect.width  = tw;\r\n    this.srcRect.height = th;\r\n\r\n    this._frameIndex = index;\r\n\r\n    return this;\r\n  }\r\n\r\n  get image() {return this._image;}\r\n  set image(v) {\r\n    this.setImage(v);\r\n    return this;\r\n  }\r\n\r\n  get frameIndex() {return this._frameIndex;}\r\n  set frameIndex(idx) {\r\n    this.setFrameIndex(idx);\r\n    return this;\r\n  }\r\n}\n\n/**\r\n * @class phina.display.PlainElement\r\n * @extends phina.display.DisplayElement\r\n */\r\nclass PlainElement extends DisplayElement {\r\n\r\n  constructor(options) {\r\n    super(options);\r\n    this.canvas = new Canvas();\r\n    this.canvas.setSize(this.width, this.height);\r\n  }\r\n\r\n  draw(canvas) {\r\n    var image = this.canvas.domElement;\r\n    var w = image.width;\r\n    var h = image.height;\r\n\r\n    var x = -w*this.origin.x;\r\n    var y = -h*this.origin.y;\r\n\r\n    canvas.context.drawImage(image,\r\n      0, 0, w, h,\r\n      x, y, w, h\r\n      );\r\n  }\r\n}\n\n/**\r\n * @class phina.display.Layer\r\n * @extends phina.display.DisplayElement\r\n */\r\nclass Layer extends DisplayElement {\r\n\r\n  /** 子供を 自分の CanvasRenderer で描画するか */\r\n  // renderChildBySelf: true,\r\n\r\n  constructor(options) {\r\n    options = $safe.call({}, options||{}, {\r\n    // options = ({}).$safe(options, {\r\n      width: 640,\r\n      height: 960,\r\n    });\r\n    super(options);\r\n    this.width = options.width;\r\n    this.height = options.height;\r\n    this.gridX = new Grid(options.width, 16);\r\n    this.gridY = new Grid(options.height, 16);\r\n    this.renderChildBySelf = true;\r\n  }\r\n\r\n  draw(canvas) {\r\n    if (!this.domElement) return ;\r\n\r\n    var image = this.domElement;\r\n    canvas.context.drawImage(image,\r\n      0, 0, image.width, image.height,\r\n      -this.width*this.originX, -this.height*this.originY, this.width, this.height\r\n      );\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @class phina.display.CanvasLayer\r\n * @extends phina.display.Layer\r\n */\r\nclass CanvasLayer extends Layer {\r\n\r\n  constructor(options) {\r\n    super(options);\r\n    this.canvas = new Canvas();\r\n    this.canvas.width  = this.width;\r\n    this.canvas.height = this.height;\r\n\r\n    this.renderer = new CanvasRenderer(this.canvas);\r\n    this.domElement = this.canvas.domElement;\r\n\r\n    this.on('enterframe', function() {\r\n      var temp = this._worldMatrix;\r\n      this._worldMatrix = null;\r\n      this.renderer.render(this);\r\n      this._worldMatrix = temp;\r\n    });\r\n  }\r\n\r\n  draw(canvas) {\r\n    var image = this.domElement;\r\n    canvas.context.drawImage(image,\r\n      0, 0, image.width, image.height,\r\n      -this.width*this.originX, -this.height*this.originY, this.width, this.height\r\n      );\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @class phina.display.ThreeLayer\r\n * @extends phina.display.Layer\r\n */\r\nclass ThreeLayer extends Layer {\r\n\r\n  // scene: null,\r\n  // camera: null,\r\n  // light: null,\r\n  // renderer: null,\r\n\r\n  constructor(options) {\r\n    super(options);\r\n\r\n    this.scene = new THREE.Scene();\r\n\r\n    this.camera = new THREE.PerspectiveCamera( 75, options.width / options.height, 1, 10000 );\r\n    this.camera.position.z = 1000;\r\n\r\n    this.light = new THREE.DirectionalLight( 0xffffff, 1 );\r\n    this.light.position.set( 1, 1, 1 ).normalize();\r\n    this.scene.add( this.light );\r\n\r\n    this.renderer = new THREE.WebGLRenderer();\r\n    this.renderer.setClearColor( 0xf0f0f0 );\r\n    this.renderer.setSize( options.width, options.height );\r\n\r\n    this.on('enterframe', function() {\r\n      this.renderer.render( this.scene, this.camera );\r\n    });\r\n\r\n    this.domElement = this.renderer.domElement;\r\n  }\r\n}\n\n/**\r\n * @class phina.display.Shape\r\n * @extends phina.display.PlainElement\r\n */\r\nclass Shape extends PlainElement {\r\n\r\n  constructor(options) {\r\n    // options = ({}).$safe(options || {}, phina.display.Shape.defaults);\r\n    options = $safe.call({}, options||{}, Shape.defaults);\r\n\r\n    super(options);\r\n\r\n    this.padding = options.padding;\r\n\r\n    this.backgroundColor = options.backgroundColor;\r\n    this.fill = options.fill;\r\n    this.stroke = options.stroke;\r\n    this.strokeWidth = options.strokeWidth;\r\n    this.lineCap = options.lineCap;\r\n    this.lineJoin = options.lineJoin;\r\n\r\n    this.shadow = options.shadow;\r\n    this.shadowBlur = options.shadowBlur;\r\n\r\n    this.watchDraw = true;\r\n    this._dirtyDraw = true;\r\n\r\n    var checkRender = function() {\r\n      // render\r\n      if (this.watchDraw && this._dirtyDraw === true) {\r\n        this.render(this.canvas);\r\n        this._dirtyDraw = false;\r\n      }\r\n    };\r\n\r\n    this.on('enterframe', checkRender);\r\n    this.on('added', checkRender);\r\n  }\r\n\r\n  calcCanvasWidth() {\r\n    return this.width + this.padding*2;\r\n  }\r\n\r\n  calcCanvasHeight() {\r\n    return this.height + this.padding*2;\r\n  }\r\n\r\n  calcCanvasSize () {\r\n    return {\r\n      width: this.calcCanvasWidth(),\r\n      height: this.calcCanvasHeight(),\r\n    };\r\n  }\r\n\r\n  isStrokable() {\r\n    return this.stroke && 0 < this.strokeWidth;\r\n  }\r\n\r\n  /**\r\n   * @virtual\r\n   * @param  {phina.graphics.Canvas} canvas \r\n   * @return {any}\r\n   */\r\n  prerender(canvas) {\r\n\r\n  }\r\n\r\n  /**\r\n   * @virtual\r\n   * @param  {phina.graphics.Canvas} canvas \r\n   * @return {any}\r\n   */\r\n  postrender(canvas) {\r\n\r\n  }\r\n\r\n  renderFill(canvas) {\r\n    canvas.fill();\r\n  }\r\n\r\n  renderStroke(canvas) {\r\n    canvas.stroke();\r\n  }\r\n\r\n  render(canvas) {\r\n    var context = canvas.context;\r\n    // リサイズ\r\n    var size = this.calcCanvasSize();\r\n    canvas.setSize(size.width, size.height);\r\n    // クリアカラー\r\n    canvas.clearColor(this.backgroundColor);\r\n    // 中心に座標を移動\r\n    canvas.transformCenter();\r\n\r\n    // 描画前処理\r\n    this.prerender(this.canvas);\r\n\r\n    // ストローク描画\r\n    if (this.isStrokable()) {\r\n      context.strokeStyle = this.stroke;\r\n      context.lineWidth = this.strokeWidth;\r\n      context.lineCap = this.lineCap;\r\n      context.lineJoin = this.lineJoin;\r\n      context.shadowBlur = 0;\r\n      this.renderStroke(canvas);\r\n    }\r\n\r\n    // 塗りつぶし描画\r\n    if (this.fill) {\r\n      context.fillStyle = this.fill;\r\n\r\n      // shadow の on/off\r\n      if (this.shadow) {\r\n        context.shadowColor = this.shadow;\r\n        context.shadowBlur = this.shadowBlur;\r\n      }\r\n      else {\r\n        context.shadowBlur = 0;\r\n      }\r\n\r\n      this.renderFill(canvas);\r\n    }\r\n\r\n    // 描画後処理\r\n    this.postrender(this.canvas);\r\n\r\n    return this;\r\n  }\r\n\r\n  static watchRenderProperty(key) {\r\n    // this.prototype.$watch(key, function(newVal, oldVal) {\r\n    $watch.call(this.prototype, key, function(newVal, oldVal) {\r\n      if (newVal !== oldVal) {\r\n        this._dirtyDraw = true;\r\n      }\r\n    });\r\n  }\r\n\r\n  static watchRenderProperties(keys) {\r\n    var watchRenderProperty = this.watchRenderProperty || Shape.watchRenderProperty;\r\n    keys.forEach(function(key) {\r\n      watchRenderProperty.call(this, key);\r\n    }, this);\r\n  }\r\n\r\n}\r\n\r\n// static props\r\nShape.defaults = {\r\n  width: 64,\r\n  height: 64,\r\n  padding: 8,\r\n\r\n  backgroundColor: '#aaa',\r\n  fill: '#00a',\r\n  stroke: '#aaa',\r\n  strokeWidth: 4,\r\n  lineCap: 'round',\r\n  lineJoin: 'round',\r\n\r\n  shadow: false,\r\n  shadowBlur: 4,\r\n};\r\n\r\n// _defined\r\nShape.watchRenderProperties([\r\n  'width',\r\n  'height',\r\n  'radius',\r\n  'padding',\r\n  'backgroundColor',\r\n  'fill',\r\n  'stroke',\r\n  'strokeWidth',\r\n  'lineCap',\r\n  'lineJoin',\r\n  'shadow',\r\n  'shadowBlur',\r\n]);\r\n\r\n\r\n/**\r\n * @class phina.display.RectangleShape\r\n * @extends phina.display.Shape\r\n */\r\nclass RectangleShape extends Shape {\r\n\r\n  constructor(options) {\r\n    // options = ({}).$safe(options || {}, phina.display.RectangleShape.defaults);\r\n    options = $safe.call({}, options||{}, RectangleShape.defaults);\r\n\r\n    super(options);\r\n\r\n    this.cornerRadius = options.cornerRadius;\r\n  }\r\n\r\n  prerender(canvas) {\r\n    canvas.roundRect(-this.width/2, -this.height/2, this.width, this.height, this.cornerRadius);\r\n  }\r\n\r\n}\r\n\r\n// static props\r\nRectangleShape.defaults = {\r\n  backgroundColor: 'transparent',\r\n  fill: 'blue',\r\n  stroke: '#aaa',\r\n  strokeWidth: 4,\r\n  cornerRadius: 0,\r\n};\r\n\r\n// _defined\r\nShape.watchRenderProperty.call(RectangleShape, 'cornerRadius');\r\n\r\n\r\n/**\r\n * @class phina.display.CircleShape\r\n * @extends phina.display.Shape\r\n */\r\nclass CircleShape extends Shape {\r\n\r\n  constructor(options) {\r\n    // options = ({}).$safe(options || {}, phina.display.CircleShape.defaults);\r\n    options = $safe.call({}, options||{}, CircleShape.defaults);\r\n\r\n    super(options);\r\n\r\n    this.setBoundingType('circle');\r\n  }\r\n\r\n  prerender(canvas) {\r\n    canvas.circle(0, 0, this.radius);\r\n  }\r\n\r\n}\r\n\r\n// static props\r\nCircleShape.defaults = {\r\n  backgroundColor: 'transparent',\r\n  fill: 'red',\r\n  stroke: '#aaa',\r\n  strokeWidth: 4,\r\n  radius: 32,\r\n};\r\n\r\n\r\n/**\r\n * @class phina.display.TriangleShape\r\n * @extends phina.display.Shape\r\n */\r\nclass TriangleShape extends Shape {\r\n\r\n  constructor(options) {\r\n    // options = ({}).$safe(options || {}, phina.display.TriangleShape.defaults);\r\n    options = $safe.call({}, options||{}, TriangleShape.defaults);\r\n\r\n    super(options);\r\n\r\n    this.setBoundingType('circle');\r\n  }\r\n\r\n  prerender(canvas) {\r\n    canvas.polygon(0, 0, this.radius, 3);\r\n  }\r\n\r\n}\r\n\r\n// static props\r\nTriangleShape.defaults = {\r\n  backgroundColor: 'transparent',\r\n  fill: 'green',\r\n  stroke: '#aaa',\r\n  strokeWidth: 4,\r\n\r\n  radius: 32,\r\n};\r\n\r\n\r\n/**\r\n * @class phina.display.StarShape\r\n * @extends phina.display.Shape\r\n */\r\nclass StarShape extends Shape {\r\n\r\n  constructor(options) {\r\n    // options = ({}).$safe(options || {}, phina.display.StarShape.defaults);\r\n    options = $safe.call({}, options||{}, StarShape.defaults);\r\n\r\n    super(options);\r\n\r\n    this.setBoundingType('circle');\r\n    this.sides = options.sides;\r\n    this.sideIndent = options.sideIndent;\r\n  }\r\n\r\n  prerender(canvas) {\r\n    canvas.star(0, 0, this.radius, this.sides, this.sideIndent);\r\n  }\r\n\r\n}\r\n\r\n// static props\r\nStarShape.defaults = {\r\n  backgroundColor: 'transparent',\r\n  fill: 'yellow',\r\n  stroke: '#aaa',\r\n  strokeWidth: 4,\r\n\r\n  radius: 32,\r\n  sides: 5,\r\n  sideIndent: 0.38,\r\n};\r\n\r\n// _defined\r\nShape.watchRenderProperty.call(StarShape, 'sides');\r\nShape.watchRenderProperty.call(StarShape, 'sideIndent');\r\n\r\n\r\n/**\r\n * @class phina.display.PolygonShape\r\n * @extends phina.display.Shape\r\n */\r\nclass PolygonShape extends Shape {\r\n\r\n  constructor(options) {\r\n    // options = ({}).$safe(options || {}, phina.display.PolygonShape.defaults);\r\n    options = $safe.call({}, options||{}, PolygonShape.defaults);\r\n\r\n    super(options);\r\n\r\n    this.setBoundingType('circle');\r\n    this.sides = options.sides;\r\n  }\r\n\r\n  prerender(canvas) {\r\n    canvas.polygon(0, 0, this.radius, this.sides);\r\n  }\r\n\r\n}\r\n\r\n// static props\r\nPolygonShape.defaults = {\r\n  backgroundColor: 'transparent',\r\n  fill: 'cyan',\r\n  stroke: '#aaa',\r\n  strokeWidth: 4,\r\n\r\n  radius: 32,\r\n  sides: 5,\r\n};\r\n\r\n// defined\r\nShape.watchRenderProperty.call(PolygonShape, 'sides');\r\n\r\n\r\n/**\r\n * @class phina.display.HeartShape\r\n * @extends phina.display.Shape\r\n */\r\nclass HeartShape extends Shape {\r\n\r\n  constructor(options) {\r\n    // options = ({}).$safe(options || {}, phina.display.HeartShape.defaults);\r\n    options = $safe.call({}, options||{}, HeartShape.defaults);\r\n\r\n    super(options);\r\n\r\n    this.setBoundingType('circle');\r\n    this.cornerAngle = options.cornerAngle;\r\n  }\r\n\r\n  prerender(canvas) {\r\n    canvas.heart(0, 0, this.radius, this.cornerAngle);\r\n  }\r\n\r\n}\r\n// static props\r\nHeartShape.defaults = {\r\n  backgroundColor: 'transparent',\r\n  fill: 'pink',\r\n  stroke: '#aaa',\r\n  strokeWidth: 4,\r\n\r\n  radius: 32,\r\n  cornerAngle: 45,\r\n};\r\n\r\n// defined\r\nShape.watchRenderProperty.call(HeartShape, 'cornerAngle');\r\n\r\n\r\n/**\r\n * @class phina.display.PathShape\r\n * @extends phina.display.Shape\r\n */\r\nclass PathShape extends Shape {\r\n  // paths: null,\r\n\r\n  constructor(options) {\r\n    // options = ({}).$safe(options || {}, phina.display.PathShape.defaults);\r\n    options = $safe.call({}, options||{}, PathShape.defaults);\r\n\r\n    super(options);\r\n    this.paths = options.paths || [];\r\n    this.lineJoin = options.lineJoin;\r\n    this.lineCap = options.lineCap;\r\n  }\r\n\r\n  setPaths (paths) {\r\n    this.paths = paths;\r\n    this._dirtyDraw = true;\r\n    return this;\r\n  }\r\n\r\n  clear () {\r\n    this.paths.length = 0;\r\n    this._dirtyDraw = true;\r\n    return this;\r\n  }\r\n\r\n  addPaths (paths) {\r\n    [].push.apply(this.paths, paths);\r\n    this._dirtyDraw = true;\r\n    return this;\r\n  }\r\n\r\n  addPath (x, y) {\r\n    this.paths.push(phina.geom.Vector2(x, y));\r\n    this._dirtyDraw = true;\r\n    return this;\r\n  }\r\n\r\n  getPath (i) {\r\n    return this.paths[i];\r\n  }\r\n\r\n  getPaths () {\r\n    return this.paths;\r\n  }\r\n\r\n  changePath (i, x, y) {\r\n    this.paths[i].set(x, y);\r\n    this._dirtyDraw = true;\r\n    return this;\r\n  }\r\n\r\n  calcCanvasSize () {\r\n    var paths = this.paths;\r\n    if (paths.length === 0) {\r\n      return {\r\n        width: this.padding * 2,\r\n        height:this.padding * 2,\r\n      };\r\n    }\r\n    var maxX = -Infinity;\r\n    var maxY = -Infinity;\r\n    var minX = Infinity;\r\n    var minY = Infinity;\r\n\r\n    for (var i = 0, len = paths.length; i < len; ++i) {\r\n      var path = paths[i];\r\n      if (maxX < path.x) { maxX = path.x; }\r\n      if (minX > path.x) { minX = path.x; }\r\n      if (maxY < path.y) { maxY = path.y; }\r\n      if (minY > path.y) { minY = path.y; }\r\n    }\r\n    return {\r\n      width: Math.max(Math.abs(maxX), Math.abs(minX)) * 2 + this.padding * 2,\r\n      height: Math.max(Math.abs(maxY), Math.abs(minY)) * 2 + this.padding * 2,\r\n    };\r\n  }\r\n\r\n  calcCanvasWidth () {\r\n    return this.calcCanvasSize().width;\r\n  }\r\n\r\n  calcCanvasHeight () {\r\n    return this.calcCanvasSize().height;\r\n  }\r\n\r\n  prerender (canvas) {\r\n    var paths = this.paths;\r\n    if (paths.length > 1) {\r\n      var c = canvas.context;\r\n      var p = paths[0];\r\n      c.beginPath();\r\n      c.moveTo(p.x, p.y);\r\n      for (var i = 1, len = paths.length; i < len; ++i) {\r\n        p = paths[i];\r\n        c.lineTo(p.x, p.y);\r\n      }\r\n    }\r\n  }\r\n\r\n}\r\n\r\n// static props\r\nPathShape.defaults = {\r\n  fill: false,\r\n  backgroundColor: 'transparent',\r\n};\n\n/**\r\n * @class phina.display.Label\r\n * @extends phina.display.Shape\r\n */\r\nclass Label extends Shape {\r\n\r\n  /**\r\n   * @constructor\r\n   */\r\n  constructor(options) {\r\n    if (typeof arguments[0] !== 'object') {\r\n      options = { text: arguments[0], };\r\n    }\r\n    else {\r\n      options = arguments[0];\r\n    }\r\n\r\n    options = $safe.call({}, options||{}, Label.defaults);\r\n    // options = ({}).$safe(options, phina.display.Label.defaults);\r\n\r\n    super(options);\r\n\r\n    this.text = options.text;\r\n    this.fontSize = options.fontSize;\r\n    this.fontWeight = options.fontWeight;\r\n    this.fontFamily = options.fontFamily;\r\n    this.align = options.align;\r\n    this.baseline = options.baseline;\r\n    this.lineHeight = options.lineHeight;\r\n  }\r\n\r\n  calcCanvasWidth() {\r\n    var width = 0;\r\n    var canvas = this.canvas;\r\n    canvas.context.font = this.font;\r\n    this._lines.forEach(function(line) {\r\n      var w = canvas.context.measureText(line).width;\r\n      if (width < w) {\r\n        width = w;\r\n      }\r\n    }, this);\r\n    if (this.align !== 'center') width*=2;\r\n\r\n    return width + this.padding*2;\r\n  }\r\n\r\n  calcCanvasHeight() {\r\n    var height = this.fontSize * this._lines.length;\r\n    if (this.baseline !== 'middle') height*=2;\r\n    return height*this.lineHeight + this.padding*2;\r\n  }\r\n\r\n  prerender(canvas) {\r\n    var context = canvas.context;\r\n    context.font = this.font;\r\n    context.textAlign = this.align;\r\n    context.textBaseline = this.baseline;\r\n\r\n    var lines = this._lines;\r\n    this.lineSize = this.fontSize*this.lineHeight;\r\n    this._offset = -Math.floor(lines.length/2)*this.lineSize;\r\n    this._offset += ((lines.length+1)%2) * (this.lineSize/2);\r\n  }\r\n\r\n  renderFill(canvas) {\r\n    var context = canvas.context;\r\n    this._lines.forEach(function(line, i) {\r\n      context.fillText(line, 0, i*this.lineSize+this._offset);\r\n    }, this);\r\n  }\r\n\r\n  renderStroke(canvas) {\r\n    var context = canvas.context;\r\n    this._lines.forEach(function(line, i) {\r\n      context.strokeText(line, 0, i*this.lineSize+this._offset);\r\n    }, this);\r\n  }\r\n\r\n  /**\r\n   * text\r\n   */\r\n  get text() { return this._text; }\r\n  set text(v) {\r\n    this._text = v;\r\n    this._lines = (this.text + '').split('\\n');\r\n  }\r\n\r\n  get font() {\r\n    return format.call(\"{fontWeight} {fontSize}px {fontFamily}\", this);\r\n    // return \"{fontWeight} {fontSize}px {fontFamily}\".format(this);\r\n  }\r\n\r\n}\r\n\r\n// static props\r\nLabel.defaults = {\r\n  backgroundColor: 'transparent',\r\n\r\n  fill: 'black',\r\n  stroke: null,\r\n  strokeWidth: 2,\r\n\r\n  // \r\n  text: 'Hello, world!',\r\n  // \r\n  fontSize: 32,\r\n  fontWeight: '',\r\n  fontFamily: \"'HiraKakuProN-W3'\", // Hiragino or Helvetica,\r\n  // \r\n  align: 'center',\r\n  baseline: 'middle',\r\n  lineHeight: 1.2,\r\n};\r\n\r\n// defined\r\nShape.watchRenderProperty.call(Label, 'text');\r\nShape.watchRenderProperty.call(Label, 'fontSize');\r\nShape.watchRenderProperty.call(Label, 'fontWeight');\r\nShape.watchRenderProperty.call(Label, 'fontFamily');\r\nShape.watchRenderProperty.call(Label, 'align');\r\nShape.watchRenderProperty.call(Label, 'baseline');\r\nShape.watchRenderProperty.call(Label, 'lineHeight');\n\n/**\r\n * @class phina.accessory.FrameAnimation\r\n * FrameAnimation\r\n * @extends phina.accessory.Accessory\r\n */\r\nclass FrameAnimation extends Accessory {\r\n\r\n  /**\r\n   * @constructor\r\n   */\r\n  constructor(ss) {\r\n    super();\r\n\r\n    this.ss = AssetManager.get('spritesheet', ss);\r\n    this.paused = true;\r\n    this.finished = false;\r\n    this.fit = true;\r\n  }\r\n\r\n  update() {\r\n    if (this.paused) return ;\r\n    if (!this.currentAnimation) return ;\r\n\r\n    if (this.finished) {\r\n      this.finished = false;\r\n      this.currentFrameIndex = 0;\r\n      return ;\r\n    }\r\n\r\n    ++this.frame;\r\n    if (this.frame%this.currentAnimation.frequency === 0) {\r\n      ++this.currentFrameIndex;\r\n      this._updateFrame();\r\n    }\r\n  }\r\n\r\n  gotoAndPlay(name, keep) {\r\n    keep = (keep !== undefined) ? keep : true;\r\n    if (keep && name === this.currentAnimationName\r\n             && this.currentFrameIndex < this.currentAnimation.frames.length\r\n             && !this.paused) {\r\n      return this;\r\n    }\r\n    this.currentAnimationName = name;\r\n    this.frame = 0;\r\n    this.currentFrameIndex = 0;\r\n    this.currentAnimation = this.ss.getAnimation(name);\r\n    this._updateFrame();\r\n\r\n    this.paused = false;\r\n\r\n    return this;\r\n  }\r\n\r\n  gotoAndStop(name) {\r\n    this.currentAnimationName = name;\r\n    this.frame = 0;\r\n    this.currentFrameIndex = 0;\r\n    this.currentAnimation = this.ss.getAnimation(name);\r\n    this._updateFrame();\r\n\r\n    this.paused = true;\r\n\r\n    return this;\r\n  }\r\n\r\n  _updateFrame() {\r\n    var anim = this.currentAnimation;\r\n    if (anim) {\r\n      if (this.currentFrameIndex >= anim.frames.length) {\r\n        if (anim.next) {\r\n          this.gotoAndPlay(anim.next);\r\n          return ;\r\n        }\r\n        else {\r\n          this.paused = true;\r\n          this.finished = true;\r\n          return ;\r\n        }\r\n      }\r\n    }\r\n\r\n    var index = anim.frames[this.currentFrameIndex];\r\n    var frame = this.ss.getFrame(index);\r\n    this.target.srcRect.set(frame.x, frame.y, frame.width, frame.height);\r\n\r\n    if (this.fit) {\r\n      this.target.width = frame.width;\r\n      this.target.height = frame.height;\r\n    }\r\n  }\r\n\r\n}\n\n/**\r\n * @class phina.accessory.Draggable\r\n * Draggable\r\n * @extends phina.accessory.Accessory\r\n */\r\nclass Draggable extends Accessory {\r\n\r\n  /**\r\n   * @constructor\r\n   */\r\n  constructor(target) {\r\n    super(target);\r\n\r\n    this.initialPosition = new Vector2(0, 0);\r\n    var self = this;\r\n\r\n    this.on('attached', function() {\r\n      this.target.setInteractive(true);\r\n\r\n      this._dragging = false;\r\n\r\n      this.target.on('pointstart', function(e) {\r\n        if (Draggable._lock) return ;\r\n\r\n        this._dragging = true;\r\n        self.initialPosition.x = this.x;\r\n        self.initialPosition.y = this.y;\r\n        self.flare('dragstart');\r\n        this.flare('dragstart');\r\n      });\r\n      this.target.on('pointmove', function(e) {\r\n        if (!this._dragging) return ;\r\n\r\n        this.x += e.pointer.dx;\r\n        this.y += e.pointer.dy;\r\n        self.flare('drag');\r\n        this.flare('drag');\r\n      });\r\n\r\n      this.target.on('pointend', function(e) {\r\n        if (!this._dragging) return ;\r\n\r\n        this._dragging = false;\r\n        self.flare('dragend');\r\n        this.flare('dragend');\r\n      });\r\n    });\r\n  }\r\n\r\n  back(time, easing) {\r\n    if (time) {\r\n      var t = this.target;\r\n      t.setInteractive(false);\r\n      var tweener = new Tweener().attachTo(t);\r\n      tweener\r\n        .to({\r\n          x: this.initialPosition.x,\r\n          y: this.initialPosition.y,\r\n        }, time, easing || 'easeOutElastic')\r\n        .call(function() {\r\n          tweener.remove();\r\n\r\n          t.setInteractive(true);\r\n          this.flare('backend');\r\n        }, this);\r\n    }\r\n    else {\r\n      this.target.x = this.initialPosition.x;\r\n      this.target.y = this.initialPosition.y;\r\n      this.flare('backend');\r\n    }\r\n  }\r\n\r\n  enable() {\r\n    this._enable = true;\r\n  }\r\n\r\n  static lock() {\r\n    this._lock = true;\r\n  }\r\n\r\n  static unlock() {\r\n    this._lock = false;\r\n  }\r\n\r\n}\r\n\r\nDraggable._lock = false;\r\n\r\n// 呼び出しで拡張する？ TweenerはElement側で定義\r\n// phina.app.Element.prototype.getter('draggable', function() {\r\n//   if (!this._draggable) {\r\n//     this._draggable = phina.accessory.Draggable().attachTo(this);\r\n//   }\r\n//   return this._draggable;\r\n// });\n\n/**\r\n * @class phina.accessory.Flickable\r\n * Flickable\r\n * @extends phina.accessory.Accessory\r\n */\r\nclass Flickable extends Accessory {\r\n\r\n  /**\r\n   * @constructor\r\n   */\r\n  constructor(target) {\r\n    super(target);\r\n\r\n    this.initialPosition = new Vector2(0, 0);\r\n    var self = this;\r\n\r\n    this.friction = 0.9;\r\n    this.velocity = new Vector2(0, 0);\r\n    this.vertical = true;\r\n    this.horizontal = true;\r\n\r\n    this.cacheList = [];\r\n\r\n    this.on('attached', function() {\r\n      this.target.setInteractive(true);\r\n\r\n      this.target.on('pointstart', function(e) {\r\n        self.initialPosition.set(this.x, this.y);\r\n        self.velocity.set(0, 0);\r\n      });\r\n      this.target.on('pointstay', function(e) {\r\n        if (self.horizontal) {\r\n          this.x += e.pointer.dx;\r\n        }\r\n        if (self.vertical) {\r\n          this.y += e.pointer.dy;\r\n        }\r\n\r\n        if (self.cacheList.length > 3) self.cacheList.shift();\r\n        self.cacheList.push(e.pointer.deltaPosition.clone());\r\n      });\r\n\r\n      this.target.on('pointend', function(e) {\r\n        // 動きのある delta position を後ろから検索　\r\n        var delta = self.cacheList.reverse().find(function(v) {\r\n          return v.lengthSquared() > 10;\r\n        });\r\n        clear.call(self.cacheList);\r\n        // self.cacheList.clear();\r\n\r\n        if (delta) {\r\n          self.velocity.x = delta.x;\r\n          self.velocity.y = delta.y;\r\n\r\n          self.flare('flickstart', {\r\n            direction: delta.normalize(),\r\n          });\r\n        }\r\n        else {\r\n          self.flare('flickcancel');\r\n        }\r\n\r\n        // self.flare('flick');\r\n        // self.flare('flickend');\r\n      });\r\n    });\r\n  }\r\n\r\n  update() {\r\n    if (!this.target) return ;\r\n\r\n    this.velocity.x *= this.friction;\r\n    this.velocity.y *= this.friction;\r\n\r\n    if (this.horizontal) {\r\n      this.target.position.x += this.velocity.x;\r\n    }\r\n    if (this.vertical) {\r\n      this.target.position.y += this.velocity.y;\r\n    }\r\n  }\r\n\r\n  cancel() {\r\n    this.target.x = this.initialPosition.x;\r\n    this.target.y = this.initialPosition.y;\r\n    this.velocity.set(0, 0);\r\n\r\n    // TODO: \r\n    // this.setInteractive(false);\r\n    // this.tweener.clear()\r\n    //     .move(this.initialX, this.initialY, 500, \"easeOutElastic\")\r\n    //     .call(function () {\r\n    //         this.setInteractive(true);\r\n    //         this.fire(tm.event.Event(\"backend\"));\r\n    //     }.bind(this));\r\n  }\r\n\r\n  enable() {\r\n    this._enable = true;\r\n  }\r\n\r\n}\r\n\r\n// TODO: Element側で呼ぶ？\r\n// phina.app.Element.prototype.getter('flickable', function() {\r\n//   if (!this._flickable) {\r\n//     this._flickable = phina.accessory.Flickable().attachTo(this);\r\n//   }\r\n//   return this._flickable;\r\n// });\n\n/**\r\n * @class phina.accessory.Physical\r\n * 本物ではないので名前変えるかも\r\n * FakePhysical or MarioPhysical or LiePhysical\r\n * RetroPysical or PysicaLike\r\n * @extends phina.accessory.Accessory\r\n */\r\nclass Physical extends Accessory  {\r\n\r\n  /**\r\n   * @constructor\r\n   */\r\n  constructor(target) {\r\n    super(target);\r\n\r\n    this.velocity = new Vector2(0, 0);\r\n    this.gravity = new Vector2(0, 0);\r\n\r\n    this.friction = 1.0;\r\n  }\r\n\r\n  update() {\r\n    var t = this.target;\r\n\r\n    this.velocity.x *= this.friction;\r\n    this.velocity.y *= this.friction;\r\n\r\n    this.velocity.x += this.gravity.x;\r\n    this.velocity.y += this.gravity.y;\r\n\r\n    t.position.x += this.velocity.x;\r\n    t.position.y += this.velocity.y;\r\n  }\r\n\r\n  force(x, y) {\r\n    this.velocity.set(x, y);\r\n    return this;\r\n  }\r\n\r\n  addForce(x, y) {\r\n    this.velocity.x += x;\r\n    this.velocity.y += y;\r\n    return this;\r\n  }\r\n\r\n  setGravity(x, y) {\r\n    this.gravity.set(x, y);\r\n    return this;\r\n  }\r\n\r\n  setFriction(fr) {\r\n    this.friction = fr;\r\n    return this;\r\n  }\r\n}\r\n\r\n// phina.app.Element.prototype.getter('physical', function() {\r\n//   if (!this._physical) {\r\n//     this._physical = phina.accessory.Physical().attachTo(this);\r\n//   }\r\n//   return this._physical;\r\n// });\n\n/**\r\n * @class phina.asset.Asset\r\n * @extends phina.util.EventDispatcher\r\n */\r\nclass Asset extends EventDispatcher {\r\n\r\n  // serverError: false,\r\n  // notFound: false,\r\n  // loadError: false,\r\n\r\n  /**\r\n   * @constructor\r\n   */\r\n  constructor(src) {\r\n    super();\r\n\r\n    this.loaded = false;\r\n    this.serverError = false;\r\n    this.notFound = false;\r\n    this.loadError = false;\r\n  }\r\n\r\n  load(src) {\r\n    this.src = src;\r\n    return new Flow(this._load.bind(this));\r\n  }\r\n\r\n  isLoaded() {\r\n    return this.loaded;\r\n  }\r\n\r\n  _load(resolve) {\r\n    var self = this;\r\n    setTimeout(function() {\r\n      self.loaded = true;\r\n      resolve();\r\n    }, 100);\r\n  }\r\n\r\n  // ロード失敗時にダミーをセットする\r\n  loadDummy() { }\r\n\r\n}\n\nvar getFirst = function(array) { return first.get.call(array); };\r\nvar getLast = function(array) { return last.get.call(array); };\r\n\r\n/**\r\n * @class phina.asset.Texture\r\n * @extends phina.asset.Asset\r\n */\r\nclass Texture extends Asset {\r\n\r\n  /**\r\n   * @constructor\r\n   */\r\n  constructor() {\r\n    super();\r\n  }\r\n\r\n  _load(resolve) {\r\n    this.domElement = new Image();\r\n\r\n    var isLocal = (location.protocol == 'file:');\r\n    if ( !isLocal && !(/^data:/.test(this.src)) ) ;\r\n\r\n    var self = this;\r\n    this.domElement.onload = function(e) {\r\n      self.loaded = true;\r\n      resolve(self);\r\n    };\r\n    this.domElement.onerror = function(e) {\r\n      console.error(format.call(\"[phina.js] not found `{0}`!\", this.src));\r\n      // console.error(\"[phina.js] not found `{0}`!\".format(this.src));\r\n\r\n      // var key = self.src.split('/').last.replace('.png', '').split('?').first.split('#').first;\r\n      var key = getFirst(\r\n        getFirst(\r\n          getLast(\r\n            self.src.split('/')\r\n          ).replace('.png', '').split('?')\r\n        ).split('#')\r\n      );\r\n      e.target.onerror = null;\r\n      e.target.src = \"http://dummyimage.com/128x128/444444/eeeeee&text=\" + key;\r\n    };\r\n\r\n    this.domElement.src = this.src;\r\n  }\r\n\r\n  clone() {\r\n    var image = this.domElement;\r\n    var canvas = new Canvas().setSize(image.width, image.height);\r\n    var t = new Texture();\r\n    canvas.context.drawImage(image, 0, 0);\r\n    t.domElement = canvas.domElement;\r\n    return t;\r\n  }\r\n\r\n  transmit(color) {\r\n    // imagaオブジェクトをゲット\r\n    var image = this.domElement;\r\n    // 新規canvas作成\r\n    var canvas = new Canvas().setSize(image.width, image.height);\r\n    // 新規canvasに描画\r\n    canvas.context.drawImage(image, 0, 0);\r\n    // canvas全体のイメージデータ配列をゲット\r\n    var imageData = canvas.context.getImageData(0, 0, canvas.width, canvas.height);\r\n    var data = imageData.data;\r\n    // 透過色の指定がなければ左上のrgb値を抽出\r\n    var r = (color !== undefined) ? color.r : data[0];\r\n    var g = (color !== undefined) ? color.g : data[1];\r\n    var b = (color !== undefined) ? color.b : data[2];\r\n    // 配列を4要素目から4つ飛び（アルファ値）でループ\r\n    // (3).step(data.length, 4, function(i) {\r\n    step.call(3, data.length, 4, function(i) {\r\n      // rgb値を逆算でゲットし、左上のrgbと比較\r\n      if (data[i - 3] === r && data[i - 2] === g && data[i - 1] === b) {\r\n        // 一致した場合はアルファ値を書き換える\r\n        data[i] = 0;\r\n      }\r\n    });\r\n    // 書き換えたイメージデータをcanvasに戻す\r\n    canvas.context.putImageData(imageData, 0, 0);\r\n\r\n    this.domElement = canvas.domElement;\r\n  }\r\n\r\n  filter(filters) {\r\n    if (!filters) {\r\n      return this;\r\n    }\r\n    if (!Array.isArray(filters)) {\r\n      filters = [filters];\r\n    }\r\n    var image = this.domElement;\r\n    var w = image.width;\r\n    var h = image.height;\r\n    var canvas = new Canvas().setSize(w, h);\r\n    var imageData = null;\r\n\r\n    canvas.context.drawImage(image, 0, 0);\r\n    imageData = canvas.context.getImageData(0, 0, w, h);\r\n    filters.forEach( function (fn) {\r\n      if (typeof fn == 'function') {\r\n        // h.times( function (y) {\r\n        times.call(h, function (y) {\r\n          // w.times( function (x) {\r\n          times(w, function (x) {\r\n            var i = (y * w + x) * 4;\r\n            var pixel = imageData.data.slice(i, i + 4);\r\n            fn(pixel, i, x, y, imageData);\r\n          });\r\n        });\r\n      }\r\n    });\r\n    canvas.context.putImageData(imageData, 0, 0);\r\n    this.domElement = canvas.domElement;\r\n    return this;\r\n  }\r\n\r\n}\n\n/**\r\n * @class phina.asset.Sound\r\n * @extends phina.asset.Asset\r\n */\r\nclass Sound extends Asset {\r\n  \r\n  // _loop: false,\r\n  // _loopStart: 0,\r\n  // _loopEnd: 0,\r\n  // _playbackRate: 1,\r\n  \r\n  /**\r\n   * @constructor\r\n   */\r\n  constructor() {\r\n    super();\r\n    this._loop = false;\r\n    this._loopStart = 0;\r\n    this._loopEnd = 0;\r\n    this._playbackRate = 1;\r\n    this.context = Sound.getAudioContext();\r\n    this.gainNode = this.context.createGain();\r\n  }\r\n\r\n  play(when, offset, duration) {\r\n    when = when ? when + this.context.currentTime : 0;\r\n    offset = offset || 0;\r\n\r\n    if (this.source) ;\r\n\r\n    var source = this.source = this.context.createBufferSource();\r\n    var buffer = source.buffer = this.buffer;\r\n    source.loop = this._loop;\r\n    source.loopStart = this._loopStart;\r\n    source.loopEnd = this._loopEnd;\r\n    source.playbackRate.value = this._playbackRate;\r\n\r\n    // connect\r\n    source.connect(this.gainNode);\r\n    this.gainNode.connect(Sound.getMasterGain());\r\n    // play\r\n    if (duration !== undefined) {\r\n      source.start(when, offset, duration);\r\n    }\r\n    else {\r\n      source.start(when, offset);\r\n    }\r\n    \r\n    // check play end\r\n    source.addEventListener('ended', function(){\r\n      this.flare('ended');\r\n    }.bind(this));\r\n\r\n    return this;\r\n  }\r\n\r\n  stop() {\r\n    // stop\r\n    if (this.source) {\r\n      // stop すると source.endedも発火する\r\n      this.source.stop && this.source.stop(0);\r\n      this.source = null;\r\n      this.flare('stop');\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  pause() {\r\n    this.source.playbackRate.value = 0;\r\n    this.flare('pause');\r\n    return this;\r\n  }\r\n\r\n  resume() {\r\n    this.source.playbackRate.value = this._playbackRate;\r\n    this.flare('resume');\r\n    return this;\r\n  }\r\n\r\n  // 試してみるなう\r\n  _oscillator(type) {\r\n    var context = this.context;\r\n\r\n    var oscillator = context.createOscillator();\r\n\r\n    // Sine wave is type = “sine”\r\n    // Square wave is type = “square”\r\n    // Sawtooth wave is type = “saw”\r\n    // Triangle wave is type = “triangle”\r\n    // Custom wave is type = “custom” \r\n    oscillator.type = type || 'sine';\r\n\r\n    this.source = oscillator;\r\n    // connect\r\n    this.source.connect(context.destination);\r\n  }\r\n\r\n  loadFromBuffer(buffer) {\r\n    var context = this.context;\r\n\r\n    // set default buffer\r\n    if (!buffer) {\r\n      buffer = context.createBuffer( 1, 44100, 44100 );\r\n      var channel = buffer.getChannelData(0);\r\n\r\n      for( var i=0; i < channel.length; i++ )\r\n      {\r\n        channel[i] = Math.sin( i / 100 * Math.PI);\r\n      }\r\n    }\r\n\r\n    // source\r\n    this.buffer = buffer;\r\n  }\r\n\r\n  setLoop(loop) {\r\n    this.loop = loop;\r\n    return this;\r\n  }\r\n\r\n  setLoopStart(loopStart) {\r\n    this.loopStart = loopStart;\r\n    return this;\r\n  }\r\n\r\n  setLoopEnd(loopEnd) {\r\n    this.loopEnd = loopEnd;\r\n    return this;\r\n  }\r\n  \r\n  setPlaybackRate(playbackRate) {\r\n    this.playbackRate = playbackRate;\r\n    return this;\r\n  }\r\n\r\n  _load(r) {\r\n    if (/^data:/.test(this.src)) {\r\n      this._loadFromURIScheme(r);\r\n    }\r\n    else {\r\n      this._loadFromFile(r);\r\n    }\r\n  }\r\n\r\n  _loadFromFile(r) {\r\n    var self = this;\r\n\r\n    var xml = new XMLHttpRequest();\r\n    xml.open('GET', this.src);\r\n    xml.onreadystatechange = function() {\r\n      if (xml.readyState === 4) {\r\n        if ([200, 201, 0].indexOf(xml.status) !== -1) {\r\n\r\n          // 音楽バイナリーデータ\r\n          var data = xml.response;\r\n\r\n          // webaudio 用に変換\r\n          self.context.decodeAudioData(data, function(buffer) {\r\n            self.loadFromBuffer(buffer);\r\n            r(self);\r\n          }, function() {\r\n            console.warn(\"音声ファイルのデコードに失敗しました。(\" + self.src + \")\");\r\n            r(self);\r\n            self.flare('decodeerror');\r\n          });\r\n\r\n        } else if (xml.status === 404) {\r\n          // not found\r\n\r\n          self.loadError = true;\r\n          self.notFound= true;\r\n          r(self);\r\n          self.flare('loaderror');\r\n          self.flare('notfound');\r\n\r\n        } else {\r\n          // サーバーエラー\r\n\r\n          self.loadError = true;\r\n          self.serverError = true;\r\n          r(self);\r\n          self.flare('loaderror');\r\n          self.flare('servererror');\r\n        }\r\n      }\r\n    };\r\n\r\n    xml.responseType = 'arraybuffer';\r\n\r\n    xml.send(null);\r\n  }\r\n\r\n  _loadFromURIScheme(r) {\r\n    var byteString = '';\r\n    if (this.src.split(',')[0].indexOf('base64') >= 0) {\r\n      byteString = atob(this.src.split(',')[1]);\r\n    }\r\n    else {\r\n      byteString = unescape(this.src.split(',')[1]);\r\n    }\r\n\r\n    var self = this;\r\n    var len = byteString.length;\r\n    var buffer = new Uint8Array(len);\r\n\r\n    for (var i=0; i<len; ++i) {\r\n      buffer[i] = byteString.charCodeAt(i);\r\n    }\r\n\r\n    // webaudio 用に変換\r\n    this.context.decodeAudioData(buffer.buffer, function(buffer) {\r\n      self.loadFromBuffer(buffer);\r\n      r(self);\r\n    }, function() {\r\n      console.warn(\"音声ファイルのデコードに失敗しました。(\" + self.src + \")\");\r\n      self.loaded = true;\r\n      r(self);\r\n    });\r\n  }\r\n\r\n  loadDummy() {\r\n    this.loadFromBuffer();\r\n  }\r\n\r\n  get volume()  { return this.gainNode.gain.value; }\r\n  set volume(v) { this.gainNode.gain.value = v; }\r\n\r\n  get loop()  { return this._loop; }\r\n  set loop(v) {\r\n    this._loop = v;\r\n    if (this.source) this.source._loop = v;\r\n  }\r\n\r\n  get loopStart()  { return this._loopStart; }\r\n  set loopStart(v) {\r\n    this._loopStart = v;\r\n    if (this.source) this.source._loopStart = v;\r\n  }\r\n\r\n  get loopEnd()  { return this._loopEnd; }\r\n  set loopEnd(v) {\r\n    this._loopEnd = v;\r\n    if (this.source) this.source._loopEnd = v;\r\n  }\r\n\r\n  get playbackRate() { return this._playbackRate; }\r\n  set playbackRate(v) {\r\n    this._playbackRate = v;\r\n    if(this.source && this.source.playbackRate.value !== 0){\r\n      this.source.playbackRate.value = v;\r\n    }\r\n  }\r\n\r\n  static getMasterGain() {\r\n    if(!this._masterGain) {\r\n      var context = this.getAudioContext();\r\n      this._masterGain = context.createGain();\r\n      this._masterGain.connect(context.destination);\r\n    }\r\n    return this._masterGain;\r\n  }\r\n\r\n  static getAudioContext() {\r\n    if (!Support.webAudio) return null;\r\n\r\n    if (this.context) return this.context;\r\n\r\n    var g = phina$1.global;\r\n    var context = null;\r\n\r\n    if (g.AudioContext) {\r\n      context = new AudioContext();\r\n    }\r\n    else if (g.webkitAudioContext) {\r\n      context = new webkitAudioContext();\r\n    }\r\n    else if (g.mozAudioContext) {\r\n      context = new mozAudioContext();\r\n    }\r\n\r\n    this.context = context;\r\n\r\n    return context;\r\n  }\r\n\r\n}\r\n\r\n// defined\r\naccessor.call(Sound, 'volume', {\r\n// this.accessor('volume', {\r\n  get: function() {\r\n    return this.getMasterGain().gain.value;\r\n  },\r\n  set: function(v) {\r\n    this.getMasterGain().gain.value = v;\r\n  },\r\n});\n\n/**\r\n * @class phina.asset.Script\r\n * @extends phina.asset.Asset\r\n */\r\nclass Script extends Asset {\r\n\r\n  /**\r\n   * @constructor\r\n   */\r\n  constructor() {\r\n    super();\r\n  }\r\n\r\n  _load(resolve) {\r\n    var self = this;\r\n    this.domElement = document.createElement('script');\r\n    this.domElement.src = this.src;\r\n\r\n    this.domElement.onload = function() {\r\n      resolve(self);\r\n    }.bind(this);\r\n\r\n    document.body.appendChild(this.domElement);\r\n  }\r\n\r\n}\n\n/**\r\n * @class phina.asset.SpriteSheet\r\n * @extends phina.asset.Asset\r\n */\r\nclass SpriteSheet extends Asset {\r\n\r\n  /**\r\n   * @constructor\r\n   */\r\n  constructor() {\r\n    super();\r\n  }\r\n\r\n  setup(params) {\r\n    this._setupFrame(params.frame);\r\n    this._setupAnim(params.animations);\r\n    return this;\r\n  }\r\n\r\n  _load(resolve) {\r\n\r\n    var self = this;\r\n\r\n    if (typeof this.src === 'string') {\r\n      var xml = new XMLHttpRequest();\r\n      xml.open('GET', this.src);\r\n      xml.onreadystatechange = function() {\r\n        if (xml.readyState === 4) {\r\n          if ([200, 201, 0].indexOf(xml.status) !== -1) {\r\n            var data = xml.responseText;\r\n            var json = JSON.parse(data);\r\n\r\n            self.setup(json);\r\n\r\n            resolve(self);\r\n          }\r\n        }\r\n      };\r\n\r\n      xml.send(null);\r\n    }\r\n    else {\r\n      this.setup(this.src);\r\n      resolve(self);\r\n    }\r\n\r\n  }\r\n\r\n  _setupFrame(frame) {\r\n    var frames = this.frames = [];\r\n    var unitWidth = frame.width;\r\n    var unitHeight = frame.height;\r\n\r\n    var count = frame.rows * frame.cols;\r\n    this.frame = count;\r\n\r\n    times.call(count, function(i) {\r\n    // (count).times(function(i) {\r\n      var xIndex = i%frame.cols;\r\n      var yIndex = (i/frame.cols)|0;\r\n\r\n      frames.push({\r\n        x: xIndex*unitWidth,\r\n        y: yIndex*unitHeight,\r\n        width: unitWidth,\r\n        height: unitHeight,\r\n      });\r\n    });\r\n  }\r\n\r\n  _setupAnim(animations) {\r\n    this.animations = {};\r\n\r\n    // デフォルトアニメーション\r\n    this.animations[\"default\"] = {\r\n        frames: range.call([], 0, this.frame),\r\n        // frames: [].range(0, this.frame),\r\n        next: \"default\",\r\n        frequency: 1,\r\n    };\r\n\r\n    forIn.call(animations, function(key, value) {\r\n    // animations.forIn(function(key, value) {\r\n      var anim = value;\r\n\r\n      if (anim instanceof Array) {\r\n        this.animations[key] = {\r\n          frames: range.call([], anim[0], anim[1]),\r\n          // frames: [].range(anim[0], anim[1]),\r\n          next: anim[2],\r\n          frequency: anim[3] || 1,\r\n        };\r\n      }\r\n      else {\r\n        this.animations[key] = {\r\n          frames: anim.frames,\r\n          next: anim.next,\r\n          frequency: anim.frequency || 1\r\n        };\r\n      }\r\n\r\n    }, this);\r\n  }\r\n\r\n  /**\r\n   * フレームを取得\r\n   */\r\n  getFrame(index) {\r\n    return this.frames[index];\r\n  }\r\n\r\n  getAnimation(name) {\r\n    name = (name !== undefined) ? name : \"default\";\r\n    return this.animations[name];\r\n  }\r\n\r\n}\n\n/**\r\n * @class phina.asset.Font\r\n * @extends phina.asset.Asset\r\n */\r\nclass Font extends Asset {\r\n\r\n  /**\r\n   * @constructor\r\n   */\r\n  constructor() {\r\n    super();\r\n    this.fontName = null;\r\n  }\r\n\r\n  load(path) {\r\n    this.src = path;\r\n\r\n    var reg = /(.*)(?:\\.([^.]+$))/;\r\n    var key = this.fontName || last.call(path.match(reg)[1].split('/'));    //フォント名指定が無い場合はpathの拡張子前を使用\r\n    // var key = this.fontName || path.match(reg)[1].split('/').last;    //フォント名指定が無い場合はpathの拡張子前を使用\r\n    var type = path.match(reg)[2];\r\n    var format$1 = \"unknown\";\r\n    switch (type) {\r\n      case \"ttf\":\r\n        format$1 = \"truetype\"; break;\r\n      case \"otf\":\r\n        format$1 = \"opentype\"; break;\r\n      case \"woff\":\r\n        format$1 = \"woff\"; break;\r\n      case \"woff2\":\r\n        format$1 = \"woff2\"; break;\r\n      default:\r\n        console.warn(\"サポートしていないフォント形式です。(\" + path + \")\");\r\n    }\r\n    this.format = format$1;\r\n    this.fontName = key;\r\n\r\n    if (format$1 !== \"unknown\") {\r\n      var text = format.call(\"@font-face { font-family: '{0}'; src: url({1}) format('{2}'); }\", key, path, format$1);\r\n      // var text = \"@font-face { font-family: '{0}'; src: url({1}) format('{2}'); }\".format(key, path, format);\r\n      var e = document.querySelector(\"head\");\r\n      var fontFaceStyleElement = document.createElement(\"style\");\r\n      if (fontFaceStyleElement.innerText) {\r\n        fontFaceStyleElement.innerText = text;\r\n      } else {\r\n        fontFaceStyleElement.textContent = text;\r\n      }\r\n      e.appendChild(fontFaceStyleElement);\r\n    }\r\n\r\n    return new Flow(this._load.bind(this));\r\n  }\r\n\r\n  _load(resolve) {\r\n    if (this.format !== \"unknown\") {\r\n      this._checkLoaded(this.fontName, function() {\r\n        this.loaded = true;\r\n        resolve(this);\r\n      }.bind(this));\r\n    } else {\r\n      this.loaded = true;\r\n      resolve(this);\r\n    }\r\n  }\r\n\r\n  _checkLoaded (font, callback) {\r\n    var canvas = new Canvas();\r\n    var DEFAULT_FONT = canvas.context.font.split(' ')[1];\r\n    canvas.context.font = '40px ' + DEFAULT_FONT;\r\n\r\n    var checkText = \"1234567890-^\\\\qwertyuiop@[asdfghjkl;:]zxcvbnm,./\\!\\\"#$%&'()=~|QWERTYUIOP`{ASDFGHJKL+*}ZXCVBNM<>?_１２３４５６７８９０－＾￥ｑｗｅｒｔｙｕｉｏｐａｓｄｆｇｈｊｋｌｚｘｃｖｂｎｍ，．あいうかさたなをん時は金なり\";\r\n    // 特殊文字対応\r\n    checkText += String.fromCharCode(\"0xf04b\");\r\n\r\n    var before = canvas.context.measureText(checkText).width;\r\n    canvas.context.font = '40px ' + font + ', ' + DEFAULT_FONT;\r\n\r\n    var timeoutCount = 30;\r\n    var checkLoadFont = function () {\r\n      var after = canvas.context.measureText(checkText).width;\r\n      if (after !== before) {\r\n        setTimeout(function() {\r\n          callback && callback();\r\n        }, 100);\r\n      } else {\r\n        if (--timeoutCount > 0) {\r\n          setTimeout(checkLoadFont, 100);\r\n        }\r\n        else {\r\n          callback && callback();\r\n          console.warn(\"timeout font loading\");\r\n        }\r\n      }\r\n    };\r\n    checkLoadFont();\r\n  }\r\n\r\n  setFontName(name) {\r\n    if (this.loaded) {\r\n      console.warn(\"フォント名はLoad前にのみ設定が出来ます(\" + name + \")\");\r\n      return this;\r\n    }\r\n    this.fontName = name;\r\n    \r\n    return this;\r\n  }\r\n\r\n  getFontName() {\r\n    return this.fontName;\r\n  }\r\n\r\n}\n\n/**\r\n * @class phina.asset.File\r\n * @extends phina.asset.Asset\r\n */\r\nclass File extends Asset {\r\n\r\n  /**\r\n   * @constructor\r\n   */\r\n  constructor() {\r\n    super();\r\n  }\r\n\r\n  _load(resolve) {\r\n\r\n    var params = {};\r\n\r\n    if (typeof this.src === 'string') {\r\n      $extend.call(params, {\r\n      // params.$extend({\r\n        path: this.src,\r\n      });\r\n    }\r\n    else if (typeof this.src === 'object') {\r\n      $extend.call(params, this.src);\r\n      // params.$extend(this.src);\r\n    }\r\n\r\n    $safe.call(params, {\r\n    // params.$safe({\r\n      path: '',\r\n      dataType: 'text',\r\n    });\r\n\r\n    // load\r\n    var self = this;\r\n    var xml = new XMLHttpRequest();\r\n    xml.open('GET', params.path);\r\n    xml.onreadystatechange = function() {\r\n      if (xml.readyState === 4) {\r\n        if ([200, 201, 0].indexOf(xml.status) !== -1) {\r\n          var data = xml.responseText;\r\n\r\n          if (params.dataType === 'json') {\r\n            data = JSON.parse(data);\r\n          } else if (params.dataType === 'xml') {\r\n            data = (new DOMParser()).parseFromString(data, \"text/xml\");\r\n          }\r\n          self.dataType = params.dataType;\r\n\r\n          self.data = data;\r\n          resolve(self);\r\n        }\r\n      }\r\n    };\r\n\r\n    xml.send(null);\r\n    // this.domElement = new Image();\r\n    // this.domElement.src = this.src;\r\n\r\n    // var self = this;\r\n    // this.domElement.onload = function() {\r\n    //   self.loaded = true;\r\n    //   resolve(self);\r\n    // };\r\n  }\r\n\r\n}\n\n/**\r\n * @class phina.asset.AssetLoader\r\n * @extends phina.util.EventDispatcher\r\n */\r\nclass AssetLoader extends EventDispatcher {\r\n\r\n  /**\r\n   * @constructor\r\n   */\r\n  constructor(params) {\r\n    super();\r\n\r\n    // params = (params || {}).$safe({\r\n    //   cache: true,\r\n    // });\r\n    params = $safe.call(params||{}, { cache: true });\r\n\r\n    this.assets = {};\r\n    this.cache = params.cache;\r\n  }\r\n\r\n  load(params) {\r\n    var self = this;\r\n    var flows = [];\r\n\r\n    var counter = 0;\r\n    var length = 0;\r\n    forIn.call(params, function(type, assets) {\r\n    // params.forIn(function(type, assets) {\r\n      length += Object.keys(assets).length;\r\n    });\r\n    \r\n    forIn.call(params, function(type, assets) {\r\n    // params.forIn(function(type, assets) {\r\n      forIn.call(assets, function(key, value) {\r\n      // assets.forIn(function(key, value) {\r\n        var func = AssetLoader.assetLoadFunctions[type];\r\n        var flow = func(key, value);\r\n        flow.then(function(asset) {\r\n          if (self.cache) {\r\n            AssetManager.set(type, key, asset);\r\n          }\r\n          self.flare('progress', {\r\n            key: key,\r\n            asset: asset,\r\n            progress: (++counter/length),\r\n          });\r\n        });\r\n        flows.push(flow);\r\n      });\r\n    });\r\n\r\n\r\n    if (self.cache) {\r\n\r\n      self.on('progress', function(e) {\r\n        if (e.progress >= 1.0) {\r\n          // load失敗時、対策\r\n\r\n          forIn.call(params, function(type, assets) {\r\n          // params.forIn(function(type, assets) {\r\n            forIn.call(assets, function(key, value) {\r\n            // assets.forIn(function(key, value) {\r\n              var asset = AssetManager.get(type, key);\r\n              if (asset.loadError) {\r\n                var dummy = AssetManager.get(type, 'dummy');\r\n                if (dummy) {\r\n                  if (dummy.loadError) {\r\n                    dummy.loadDummy();\r\n                    dummy.loadError = false;\r\n                  }\r\n                  AssetManager.set(type, key, dummy);\r\n                } else {\r\n                  asset.loadDummy();\r\n                }\r\n              }\r\n            });\r\n          });\r\n        }\r\n      });\r\n    }\r\n    return Flow.all(flows).then(function(args) {\r\n      self.flare('load');\r\n    });\r\n  }\r\n\r\n  static register(key, func) {\r\n    this.assetLoadFunctions[key] = func;\r\n    return this;\r\n  }\r\n\r\n}\r\n\r\nAssetLoader.assetLoadFunctions = {\r\n  image: function(key, path) {\r\n    var texture = new Texture();\r\n    var flow = texture.load(path);\r\n    return flow;\r\n  },\r\n  sound: function(key, path) {\r\n    var sound = new Sound();\r\n    var flow = sound.load(path);\r\n    return flow;\r\n  },\r\n  spritesheet: function(key, path) {\r\n    var ss = new SpriteSheet();\r\n    var flow = ss.load(path);\r\n    return flow;\r\n  },\r\n  script: function(key, path) {\r\n    var script = new Script();\r\n    return script.load(path);\r\n  },\r\n  font: function(key, path) {\r\n    var font = new Font();\r\n    font.setFontName(key);\r\n    return font.load(path);\r\n  },\r\n  json: function(key, path) {\r\n    var text = new File();\r\n    return text.load({\r\n      path: path,\r\n      dataType: \"json\",\r\n    });\r\n  },\r\n  xml: function(key, path) {\r\n    var text = new File();\r\n    return text.load({\r\n      path: path,\r\n      dataType: \"xml\",\r\n    });\r\n  },\r\n  text: function(key, path) {\r\n    var text = new File();\r\n    return text.load(path);\r\n  }\r\n};\n\n/**\r\n * @class phina.asset.SoundManager\r\n * ### Ref\r\n * - http://evolve.reintroducing.com/_source/classes/as3/SoundManager/SoundManager.html\r\n * - https://github.com/nicklockwood/SoundManager\r\n */\r\nclass SoundManager {\r\n  // volume: 0.8,\r\n  // musicVolume: 0.8,\r\n  // muteFlag: false,\r\n  // currentMusic: null,\r\n\r\n  static play(name, when, offset, duration) {\r\n    var sound = AssetManager.get('sound', name);\r\n\r\n    sound.volume = this.getVolume();\r\n    sound.play(when, offset, duration);\r\n\r\n    return sound;\r\n  }\r\n\r\n  static stop() {\r\n    // TODO: \r\n  }\r\n  static pause() {\r\n    // TODO: \r\n  }\r\n  static fade() {\r\n    // TODO: \r\n  }\r\n  static setVolume(volume) {\r\n    this.volume = volume;\r\n  }\r\n  static getVolume() {\r\n    return this.volume;\r\n  }\r\n\r\n  /*\r\n   * ミュート\r\n   */\r\n  static mute() {\r\n    this.muteFlag = true;\r\n    if (this.currentMusic) {\r\n      this.currentMusic.volume = 0;\r\n    }\r\n    return this;\r\n  }\r\n  /*\r\n   * ミュート解除\r\n   */\r\n  static unmute() {\r\n    this.muteFlag = false;\r\n    if (this.currentMusic) {\r\n      this.currentMusic.volume = this.getVolumeMusic();\r\n    }\r\n    return this;\r\n  }\r\n  static isMute() {\r\n    return this.muteFlag;\r\n  }\r\n\r\n  static playMusic(name, fadeTime, loop, when, offset, duration) {\r\n    loop = (loop !== undefined) ? loop : true;\r\n\r\n    if (this.currentMusic) {\r\n      this.stopMusic(fadeTime);\r\n    }\r\n\r\n    var music = AssetManager.get('sound', name);\r\n\r\n    music.setLoop(loop);\r\n    music.play(when, offset, duration);\r\n\r\n    if (fadeTime > 0) {\r\n      var count = 32;\r\n      var counter = 0;\r\n      var unitTime = fadeTime/count;\r\n      var volume = this.getVolumeMusic();\r\n\r\n      music.volume = 0;\r\n      var id = setInterval(function() {\r\n        counter += 1;\r\n        var rate = counter/count;\r\n        music.volume = rate*volume;\r\n\r\n        if (rate >= 1) {\r\n          clearInterval(id);\r\n          return false;\r\n        }\r\n\r\n        return true;\r\n      }, unitTime);\r\n    }\r\n    else {\r\n      music.volume = this.getVolumeMusic();\r\n    }\r\n\r\n    this.currentMusic = music;\r\n\r\n    return this.currentMusic;\r\n  }\r\n\r\n  static stopMusic(fadeTime) {\r\n    if (!this.currentMusic) { return ; }\r\n\r\n    var music = this.currentMusic;\r\n    this.currentMusic = null;\r\n\r\n    if (fadeTime > 0) {\r\n      var count = 32;\r\n      var counter = 0;\r\n      var unitTime = fadeTime/count;\r\n      var volume = this.getVolumeMusic();\r\n\r\n      music.volume = 0;\r\n      var id = setInterval(function() {\r\n        counter += 1;\r\n        var rate = counter/count;\r\n        music.volume = volume*(1-rate);\r\n\r\n        if (rate >= 1) {\r\n          music.stop();\r\n          clearInterval(id);\r\n          return false;\r\n        }\r\n\r\n        return true;\r\n      }, unitTime);\r\n    }\r\n    else {\r\n      music.stop();\r\n    }\r\n  }\r\n\r\n  /*\r\n   * 音楽を一時停止\r\n   */\r\n  static pauseMusic() {\r\n    if (!this.currentMusic) { return ; }\r\n    this.currentMusic.pause();\r\n  }\r\n  /*\r\n   * 音楽を再開\r\n   */\r\n  static resumeMusic() {\r\n    if (!this.currentMusic) { return ; }\r\n    this.currentMusic.resume();\r\n  }\r\n  /*\r\n   * 音楽のボリュームを設定\r\n   */\r\n  static setVolumeMusic(volume) {\r\n    this.musicVolume = volume;\r\n    if (this.currentMusic) {\r\n      this.currentMusic.volume = volume;\r\n    }\r\n\r\n    return this;\r\n  }\r\n  /*\r\n   * 音楽のボリュームを取得\r\n   */\r\n  static getVolumeMusic() {\r\n    return this.musicVolume;\r\n  }\r\n\r\n}\r\n\r\n// static props\r\nSoundManager.volume = 0.8;\r\nSoundManager.musicVolume = 0.8;\r\nSoundManager.muteFlag = false;\r\nSoundManager.currentMusic = null;\n\n/**\r\n * @class phina.ui.Button\r\n * Button\r\n * @extends phina.display.Shape\r\n */\r\nclass Button extends Shape {\r\n\r\n  /**\r\n   * @constructor\r\n   */\r\n  constructor(options) {\r\n    options = $safe.call(options || {}, Button.defaults);\r\n    // options = (options || {}).$safe(phina.ui.Button.defaults);\r\n    super(options);\r\n\r\n    this.cornerRadius = options.cornerRadius;\r\n    this.text         = options.text;\r\n    this.fontColor    = options.fontColor;\r\n    this.fontSize     = options.fontSize;\r\n    this.fontWeight     = options.fontWeight;\r\n    this.fontFamily   = options.fontFamily;\r\n\r\n    this.setInteractive(true);\r\n    this.on('pointend', function() {\r\n      this.flare('push');\r\n    });\r\n  }\r\n\r\n  prerender(canvas) {\r\n    canvas.roundRect(-this.width/2, -this.height/2, this.width, this.height, this.cornerRadius);\r\n  }\r\n\r\n  postrender(canvas) {\r\n    var context = canvas.context;\r\n    // text\r\n    var font = format.call(\"{fontWeight} {fontSize}px {fontFamily}\", this);\r\n    // var font = \"{fontWeight} {fontSize}px {fontFamily}\".format(this);\r\n    context.font = font;\r\n    context.textAlign = 'center';\r\n    context.textBaseline = 'middle';\r\n    context.fillStyle = this.fontColor;\r\n    context.fillText(this.text, 0, 0);\r\n  }\r\n\r\n}\r\n\r\n// static props\r\nButton.defaults = {\r\n  width: 200,\r\n  height: 80,\r\n  backgroundColor: 'transparent',\r\n  fill: 'hsl(200, 80%, 60%)',\r\n  stroke: null,\r\n\r\n  cornerRadius: 8,\r\n  text: 'Hello',\r\n  fontColor: 'white',\r\n  fontSize: 32,\r\n  fontWeight: '',\r\n  fontFamily: \"'HiraKakuProN-W3'\", // Hiragino or Helvetica,\r\n};\r\n\r\n// defined\r\nShape.watchRenderProperty.call(Button, 'cornerRadius');\r\nShape.watchRenderProperty.call(Button, 'text');\r\nShape.watchRenderProperty.call(Button, 'fontColor');\r\nShape.watchRenderProperty.call(Button, 'fontSize');\r\nShape.watchRenderProperty.call(Button, 'fontFamily');\n\n/**\r\n * @class phina.ui.Gauge\r\n * @extends phina.display.Shape\r\n */\r\nclass Gauge extends Shape {\r\n\r\n  constructor(options) {\r\n    options = $safe.call({}, options || {}, Gauge.defaults);\r\n    // options = ({}).$safe(options || {}, phina.ui.Gauge.defaults);\r\n    \r\n    super(options);\r\n\r\n    this._value = (options.value !== undefined) ? options.value : options.maxValue;\r\n    this.maxValue = options.maxValue;\r\n    this.gaugeColor = options.gaugeColor;\r\n    this.cornerRadius = options.cornerRadius;\r\n\r\n    this.visualValue = (options.value !== undefined) ? options.value : options.maxValue;\r\n    this.animation = options.animation;\r\n    this.animationTime = 1*1000;\r\n  }\r\n\r\n  /**\r\n   * 満タンかをチェック\r\n   */\r\n  isFull() {\r\n    return this.value === this.maxValue;\r\n  }\r\n\r\n  /**\r\n   * 空っぽかをチェック\r\n   */\r\n  isEmpty() {\r\n    return this.value === 0;\r\n  }\r\n\r\n  setValue(value) {\r\n    value = clamp(value, 0, this.maxValue);\r\n    // value = Math.clamp(value, 0, this.maxValue);\r\n\r\n    // end when now value equal value of argument\r\n    if (this.value === value) return ;\r\n\r\n    // fire value change event\r\n    this.flare('change');\r\n\r\n    this._value = value;\r\n\r\n    if (this.animation) {\r\n      var range = Math.abs(this.visualValue-value);\r\n      var time = (range/this.maxValue)*this.animationTime;\r\n\r\n      this.tweener.ontween = function() {\r\n        this._dirtyDraw = true;\r\n      }.bind(this);\r\n      this.tweener\r\n        .clear()\r\n        .to({'visualValue': value}, time)\r\n        .call(function() {\r\n          this.flare('changed');\r\n          if (this.isEmpty()) {\r\n            this.flare('empty');\r\n          }\r\n          else if (this.isFull()) {\r\n            this.flare('full');\r\n          }\r\n        }, this);\r\n    }\r\n    else {\r\n      this.visualValue = value;\r\n      this.flare('changed');\r\n      if (this.isEmpty()) {\r\n        this.flare('empty');\r\n      }\r\n      else if (this.isFull()) {\r\n        this.flare('full');\r\n      }\r\n    }\r\n  }\r\n\r\n  getRate() {\r\n    var rate = this.visualValue/this.maxValue;\r\n    return rate;\r\n  }\r\n\r\n  prerender(canvas) {\r\n    canvas.roundRect(-this.width/2, -this.height/2, this.width, this.height, this.cornerRadius);\r\n  }\r\n\r\n  postrender(canvas) {\r\n    var rate = this.getRate();\r\n    canvas.context.fillStyle = this.gaugeColor;\r\n    canvas.context.save();\r\n    canvas.context.clip();\r\n    canvas.fillRect(-this.width/2, -this.height/2, this.width*rate, this.height);\r\n    canvas.context.restore();\r\n  }\r\n\r\n  get value() {\r\n    return this._value;\r\n  }\r\n  set value(v) {\r\n    this.setValue(v);\r\n  }\r\n\r\n}\r\n\r\n// static props\r\nGauge.defaults = {\r\n  width: 256,\r\n  height: 32,\r\n  backgroundColor: 'transparent',\r\n  fill: 'white',\r\n  stroke: '#aaa',\r\n  strokeWidth: 4,\r\n  maxValue: 100,\r\n  gaugeColor: '#44f',\r\n  cornerRadius: 0,\r\n  animation: true\r\n};\r\n\r\n// defined\r\nShape.watchRenderProperty.call(Gauge, 'value');\r\nShape.watchRenderProperty.call(Gauge, 'maxValue');\r\nShape.watchRenderProperty.call(Gauge, 'gaugeColor');\r\nShape.watchRenderProperty.call(Gauge, 'cornerRadius');\r\n\r\n\r\n/**\r\n * @class phina.ui.CircleGauge\r\n * @extends phina.ui.Gauge\r\n */\r\nclass CircleGauge extends Gauge {\r\n\r\n  constructor(options) {\r\n    options = $safe.call(options || {}, {\r\n    // options = (options || {}).$safe({\r\n      backgroundColor: 'transparent',\r\n      fill: '#aaa',\r\n      stroke: '#222',\r\n\r\n      radius: 64,\r\n      anticlockwise: true,\r\n      showPercentage: false, // TODO\r\n    });\r\n\r\n    super(options);\r\n\r\n    this.setBoundingType('circle');\r\n\r\n    this.radius = options.radius;\r\n    this.anticlockwise = options.anticlockwise;\r\n    this.showPercentage = options.showPercentage;\r\n  }\r\n\r\n  prerender(canvas) {\r\n    var rate = this.getRate();\r\n    var end = (Math.PI*2)*rate;\r\n    this.startAngle = 0;\r\n    this.endAngle = end;\r\n\r\n    this.canvas.rotate(-Math.PI*0.5);\r\n    this.canvas.scale(1, -1);\r\n  }\r\n\r\n  renderFill(canvas) {\r\n    canvas.fillPie(0, 0, this.radius, this.startAngle, this.endAngle);\r\n  }\r\n\r\n  renderStroke(canvas) {\r\n    canvas.strokeArc(0, 0, this.radius, this.startAngle, this.endAngle);\r\n  }\r\n\r\n  postrender() {\r\n    // if (this.showPercentage) {\r\n    //   // TODO:\r\n    //   var left = Math.max(0, this.limit-this.time);\r\n    //   this.label.text = Math.ceil(left/1000)+'';\r\n    // }\r\n  }\r\n\r\n}\n\nvar textWidthCache = {};\r\n\r\n/**\r\n * @class phina.ui.LabelArea\r\n * @extends phina.display.Label\r\n */\r\nclass LabelArea extends Label {\r\n\r\n  // _lineUpdate: true,\r\n\r\n  constructor(options) {\r\n    options = $safe.call({}, options, LabelArea.defaults);\r\n    // options = {}.$safe(options, LabelArea.defaults);\r\n    super(options);\r\n\r\n    this._lineUpdate = true;\r\n    this.verticalAlign = options.verticalAlign;\r\n    this.scroll = options.scroll || new Vector2();\r\n    this.scrollX = options.scrollX;\r\n    this.scrollY = options.scrollY;\r\n  }\r\n\r\n  calcCanvasWidth () {\r\n    return this.width + this.padding * 2;\r\n  }\r\n\r\n  calcCanvasHeight () {\r\n    return this.height + this.padding * 2;\r\n  }\r\n  getOffsetY () {\r\n    if (typeof this.verticalAlign === 'number') {\r\n      return this.verticalAlign;\r\n    }\r\n    return LabelArea.verticalAlignToOffsetMap[this.verticalAlign] || 0;\r\n  }\r\n\r\n  getOffsetX () {\r\n    return LabelArea.alignToOffsetMap[this.align] || 0;\r\n  }\r\n\r\n  getTextWidthCache () {\r\n    var cache = textWidthCache[this.font];\r\n    return cache || (textWidthCache[this.font] = {});\r\n  }\r\n  \r\n  spliceLines (lines) {\r\n    var rowWidth = this.width;\r\n    var context = this.canvas.context;\r\n    context.font = this.font;\r\n\r\n    var cache = this.getTextWidthCache();\r\n\r\n    // update cache\r\n    each$1.call(this._text, function(ch) {\r\n    // this._text.each(function(ch) {\r\n      if (!cache[ch]) {\r\n        cache[ch] = context.measureText(ch).width;\r\n      }\r\n    });\r\n    \r\n    var localLines = [];\r\n    lines.forEach(function(line) {\r\n      \r\n      var str = '';\r\n      var totalWidth = 0;\r\n\r\n      // はみ出ていたら強制的に改行する\r\n      each$1.call(line, function(ch) {\r\n      // line.each(function(ch) {\r\n        var w = cache[ch];\r\n\r\n        if ((totalWidth+w) > rowWidth) {\r\n          localLines.push(str);\r\n          str = '';\r\n          totalWidth = 0;\r\n        }\r\n\r\n        str += ch;\r\n        totalWidth += w;\r\n      });\r\n\r\n      // 残りを push する\r\n      localLines.push(str);\r\n\r\n    });\r\n    \r\n\r\n    return localLines;\r\n  }\r\n  \r\n  getLines () {\r\n    if (this._lineUpdate === false) {\r\n      return this._lines;\r\n    }\r\n    this._lineUpdate = false;\r\n\r\n    var lines = (this.text + '').split('\\n');\r\n    if (this.width < 1) {\r\n      this._lines = lines;\r\n    }\r\n    else {\r\n      this._lines = this.spliceLines(lines);\r\n    }\r\n\r\n    return this._lines;\r\n  }\r\n\r\n  prerender (canvas) {\r\n    var context = canvas.context;\r\n    context.font = this.font;\r\n    context.textAlign = this.align;\r\n    context.textBaseline = this.baseline;\r\n\r\n    var text = this.text + '';\r\n    var lines = this.getLines();\r\n    var length = lines.length;\r\n    var width = this.width;\r\n    var height = this.height;\r\n\r\n    var fontSize = this.fontSize;\r\n    var lineSize = fontSize * this.lineHeight;\r\n    var offsetX = this.getOffsetX() * width;\r\n    var offsetY = this.getOffsetY();\r\n    if (offsetY === 0) {\r\n      offsetY = -Math.floor(length / 2) * lineSize;\r\n      offsetY += ((length + 1) % 2) * (lineSize / 2);\r\n    }\r\n    else if (offsetY < 0) {\r\n      offsetY *= height;\r\n    }\r\n    else {\r\n      offsetY = offsetY * height - length * lineSize + lineSize;\r\n    }\r\n\r\n    offsetY -= this.scrollY;\r\n    offsetX -= this.scrollX;\r\n    var start = (offsetY + height / 2) / -lineSize | 0;\r\n    if (start < 0) { start = 0; }\r\n\r\n    var end = (height / 2 - offsetY + lineSize * 2) / lineSize | 0;\r\n    lines = lines.filter(function(line, i) {\r\n      return start <= i && end > i;\r\n    });\r\n\r\n    this.lines = lines;\r\n    this.offsetX = offsetX;\r\n    this.offsetY = offsetY;\r\n    this.lineSize = lineSize;\r\n    this.start = start;\r\n  }\r\n\r\n  renderFill (canvas) {\r\n    var context = canvas.context;\r\n    var offsetX = this.offsetX;\r\n    var offsetY = this.offsetY;\r\n    var lineSize = this.lineSize;\r\n    var start = this.start;\r\n    this.lines.forEach(function(line, i) {\r\n      context.fillText(line, offsetX, (start + i) * lineSize + offsetY);\r\n    }, this);\r\n  }\r\n\r\n  renderStroke (canvas) {\r\n    var context = canvas.context;\r\n    var offsetX = this.offsetX;\r\n    var offsetY = this.offsetY;\r\n    var lineSize = this.lineSize;\r\n    var start = this.start;\r\n    this.lines.forEach(function(line, i) {\r\n      context.strokeText(line, offsetX, (start + i) * lineSize + offsetY);\r\n    }, this);\r\n  }\r\n\r\n  get text() {\r\n    return this._text;\r\n  }\r\n  set text(v) {\r\n    this._text = v;\r\n  }\r\n\r\n  get scrollX() {\r\n    return this.scroll.x;\r\n  }\r\n  set scrollX(v) {\r\n    this.scroll.x = v;\r\n  }\r\n\r\n  get scrollY() {\r\n    return this.scroll.y;\r\n  }\r\n  set scrollY(v) {\r\n    this.scroll.y = v;\r\n  }\r\n  \r\n  // _static: {\r\n  //   defaults: {\r\n  //     verticalAlign: 'top',\r\n  //     align: 'left',\r\n  //     baseline: 'top',\r\n  //     width: 320,\r\n  //     height: 320,\r\n  //     scrollX: 0,\r\n  //     scrollY: 0,\r\n  //   },\r\n  //   alignToOffsetMap: {\r\n  //     start: -0.5,\r\n  //     left: -0.5,\r\n  //     center: 0,\r\n  //     end: 0.5,\r\n  //     right: 0.5,\r\n  //   },\r\n\r\n  //   verticalAlignToOffsetMap: {\r\n  //     top: -0.5,\r\n  //     center: 0,\r\n  //     middle: 0,\r\n  //     bottom: 0.5,\r\n  //   },\r\n  // },\r\n\r\n  // _defined: function() {\r\n  //   var func = function(newVal, oldVal) {\r\n  //     if((this._lineUpdate === false) && (newVal !== oldVal)){\r\n  //       this._lineUpdate = true;\r\n  //     }\r\n  //   };\r\n\r\n  //   [\r\n  //     'text',\r\n  //     'width',\r\n  //     'fontSize',\r\n  //     'fontWeight',\r\n  //     'fontFamily'\r\n  //   ].forEach(function(key) {\r\n  //     this.$watch(key, func);\r\n  //   }, this.prototype);\r\n\r\n  //   phina.display.Shape.watchRenderProperties.call(this ,[\r\n  //     'verticalAlign',\r\n  //     'text',\r\n  //     'scroll',\r\n  //     'scrollX',\r\n  //     'scrollY'\r\n  //   ]);\r\n  // },\r\n\r\n\r\n  enableScroll() {\r\n    //   this.setInteractive(true);\r\n    //   var physical = phina.accessory.Physical();\r\n    //   physical.attachTo(this);\r\n    //   physical.friction = 0.8;\r\n    //   var lastForce = 0;\r\n    //   var lastMove = 0;\r\n    //   this.on('pointstart', function(e){\r\n    //     lastForce = physical.velocity.y;\r\n    //     lastMove = 0;\r\n    //     physical.force(0, 0);\r\n    //   });\r\n    //   this.on('pointmove', function(e){\r\n    //     var p = e.pointer.deltaPosition;\r\n    //     lastMove = p.y;\r\n    //     this.scrollY += lastMove;\r\n    //   });\r\n\r\n    //   this.on('pointend', function(e){\r\n    //     physical.force(0, lastForce + lastMove);\r\n    //   });\r\n\r\n    return this;\r\n  }\r\n\r\n}\r\n\r\n// static props\r\nLabelArea.defaults = {\r\n  verticalAlign: 'top',\r\n  align: 'left',\r\n  baseline: 'top',\r\n  width: 320,\r\n  height: 320,\r\n  scrollX: 0,\r\n  scrollY: 0,\r\n};\r\nLabelArea.alignToOffsetMap = {\r\n  start: -0.5,\r\n  left: -0.5,\r\n  center: 0,\r\n  end: 0.5,\r\n  right: 0.5,\r\n};\r\nLabelArea.verticalAlignToOffsetMap = {\r\n  top: -0.5,\r\n  center: 0,\r\n  middle: 0,\r\n  bottom: 0.5,\r\n}\r\n\r\n// defined\r\n;\r\nShape.watchRenderProperties.call(LabelArea ,[\r\n  'verticalAlign',\r\n  'text',\r\n  'scroll',\r\n  'scrollX',\r\n  'scrollY'\r\n]);\n\n/**\r\n * @class phina.effect.Wave\r\n * Button\r\n * @extends phina.display.CircleShape\r\n */\r\nclass Wave extends CircleShape {\r\n\r\n  /**\r\n   * @constructor\r\n   */\r\n  constructor(options) {\r\n    options = $safe.call(options || {}, {\r\n    // options = (options || {}).$safe({\r\n      fill: 'white',\r\n      stroke: false,\r\n    });\r\n\r\n    super(options);\r\n\r\n    var tweener = new Tweener().attachTo(this);\r\n    tweener\r\n      .to({scaleX:2, scaleY:2, alpha:0}, 500)\r\n      .call(function() {\r\n        this.remove();\r\n      }, this);\r\n  }\r\n}\n\n/**\r\n * @class phina.social.Twitter\r\n * # Twitter の共有リンクを生成するクラス\r\n * Twitter の共有リンクの URL を生成してくれるクラスです。\r\n */\r\nclass Twitter {\r\n\r\n  /**\r\n   * @constructor\r\n   * \r\n   * コンストラクタは存在しますがインスタンスメンバはありません。\r\n   */\r\n  constructor() {}\r\n\r\n  /**\r\n   * @method phina.social.Twitter.createURL\r\n   * Twitterの共有リンクを生成します。引数にオブジェクトを渡すことで様々なパラメーターを設定出来ます。引数のオブジェクトは {@link #phina.social.Twitter.defaults} で安全拡張されます。\r\n   * \r\n   * ### Example\r\n   *     phina.social.Twitter.createURL(); // => http://twitter.com/intent/tweet?text=Hello%2C%20world!&hashtags=javascript%2Cphina&url={現在のURL}\r\n   * \r\n   *     phina.social.Twitter.createURL({\r\n   *       text: 'This is text',\r\n   *       hashtags: 'hashtag1,hashtag2',\r\n   *       url: 'http://phinajs.com'\r\n   *     }); // => http://twitter.com/intent/tweet?text=This%20is%20text&hashtags=hashtag1%2Chashtag2&url=http%3A%2F%2Fphinajs.com\r\n   * \r\n   *     phina.social.Twitter.createURL({\r\n   *       text: 'This is text',\r\n   *       hashtags: 'hashtag1,hashtag2',\r\n   *       url: 'http://phinajs.com',\r\n   *       other: 'This is other'//設定項目は適当に増やせる\r\n   *     }); // => http://twitter.com/intent/tweet?text=This%20is%20text&hashtags=hashtag1%2Chashtag2&url=http%3A%2F%2Fphinajs.com&other=This%20is%20other\r\n   * \r\n   *     phina.social.Twitter.createURL({\r\n   *       url: 'http://phinajs.com'\r\n   *     }); // => http://twitter.com/intent/tweet?url=http%3A%2F%2Fphinajs.com&text=Hello%2C%20world!&hashtags=javascript%2Cphina\r\n   * \r\n   * @param {Object}\r\n   * @return {String} Twitter の共有リンク\r\n   * @static\r\n   */\r\n  static createURL (options) {\r\n    options = $safe.call(options || {}, Twitter.defaults);\r\n    // options = (options || {}).$safe(this.defaults);\r\n\r\n    var queries = [];\r\n    var euc = encodeURIComponent;\r\n    forIn.call(options, function(key, value) {\r\n    // options.forIn(function(key, value) {\r\n      var str = key + '=' + euc(value);\r\n      queries.push(str);\r\n    });\r\n\r\n    var url = format.call('{baseURL}/{type}?{query}', {\r\n    // var url = '{baseURL}/{type}?{query}'.format({\r\n      baseURL: this.baseURL,\r\n      // type: options.type,\r\n      type: 'tweet',\r\n      query: queries.join('&'),\r\n    });\r\n\r\n    return url;\r\n  }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @property {String} [phina.social.Twitter.baseURL = 'https://twitter.com/intent']\r\n * Twitter の共有リンクのベースとなる URL です。\r\n * \r\n * @static\r\n */\r\nTwitter.baseURL = 'https://twitter.com/intent';\r\n\r\n/**\r\n * @property {Object} phina.social.Twitter.defaults\r\n * デフォルト値を格納しているオブジェクトです。{@link #phina.social.Twitter.defaults.text}, {@link #phina.social.Twitter.defaults.hashtags}, {@link #phina.social.Twitter.defaults.url} を内包しています。\r\n * \r\n * @static\r\n */\r\nTwitter.defaults = {\r\n  // type: 'tweet',\r\n\r\n  /**\r\n   * @property {String} [phina.social.Twitter.defaults.text = 'Hello, World']\r\n   * デフォルトでツイートに含まれる文字列です。\r\n   * \r\n   * @static\r\n   */\r\n  text: 'Hello, world!',\r\n\r\n  // screen_name: 'phi_jp',\r\n\r\n  /**\r\n   * @property {String} [phina.social.Twitter.defaults.hashtags = 'javascript, phina_js']\r\n   * デフォルトでツイートに含まれるハッシュタグです。\r\n   * \r\n   * @static\r\n   */\r\n  hashtags: 'javascript,phina_js',\r\n\r\n  // url: 'http://github.com/phi-jp/phina.js',\r\n\r\n  /**\r\n   * @property {String} [phina.social.Twitter.defaults.url = phina.global.location && phina.global.location.href]\r\n   * デフォルトでツイートに含まれる URL です。\r\n   * \r\n   * @static\r\n   */\r\n  url: phina$1.global.location && phina$1.global.location.href\r\n\r\n  // via: 'phi_jp',\r\n};\n\n/**\r\n * @class phina.game.ManagerScene\r\n * @extends phina.app.Scene\r\n */\r\nclass ManagerScene extends Scene {\r\n\r\n  /**\r\n   * @constructor\r\n   */\r\n  constructor(params) {\r\n    super();\r\n\r\n    this.setScenes(params.scenes);\r\n\r\n    this.on(\"enter\", function() {\r\n      this.gotoScene(params.startLabel || 0);\r\n    }.bind(this));\r\n\r\n    this.on(\"resume\", this.onnext.bind(this));\r\n\r\n    this.commonArguments = {};\r\n  }\r\n\r\n  /**\r\n   * scenes をセット\r\n   */\r\n  setScenes(scenes) {\r\n    this.scenes = scenes;\r\n    this.sceneIndex = 0;\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Sceneクラスをインスタンス化して返す\r\n   * \r\n   * @param  {[type]} data  [description]\r\n   * @return {[type]}       [description]\r\n   */\r\n  _instantiateScene(data, args) {\r\n    // Scene初期化引数\r\n    var initArguments = $extend.call({}, data.arguments, args);\r\n    // var initArguments = {}.$extend(data.arguments, args);\r\n\r\n    var scene, klass;\r\n    if (typeof data.className === 'string') {\r\n      // phina.define、あるいはglobal(window)に直接定義されたクラスの文字列\r\n      klass = phina$1.using(data.className);\r\n      if (typeof klass !== 'function') {\r\n        klass = phina$1.using('phina.game.' + data.className);\r\n      }\r\n      // scene = klass.call(null, initArguments);\r\n    } else if (typeof data.className === 'function') {\r\n      // 関数の場合、純粋なclassと見なす\r\n      // scene = new data.className(initArguments);\r\n      klass = data.className;\r\n    }\r\n    scene = new klass(initArguments);\r\n\r\n    if (!scene.nextLabel) {\r\n      scene.nextLabel = data.nextLabel;\r\n    }\r\n    if (!scene.nextArguments) {\r\n      scene.nextArguments = data.nextArguments;\r\n    }\r\n\r\n    return scene\r\n  }\r\n\r\n  /**\r\n   * Sceneクラスをインスタンス化してappにreplaceSceneさせる\r\n   * \r\n   * @param  {string|number} label シーンの対応ラベル\r\n   * @param  {any} [args] Sceneにわたす引数がある場合に指定\r\n   * @return {this}\r\n   */\r\n  replaceScene(label, args) {\r\n    var index = (typeof label == 'string') ? this.labelToIndex(label) : label||0;\r\n    if (!this.scenes[index]) {\r\n      console.error(format.call('phina.js error: `{0}` に対応するシーンがありません.', label));\r\n    }\r\n    var scene = this._instantiateScene(this.scenes[index], args);\r\n    this.app.replaceScene(scene);\r\n    this.sceneIndex = index;\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * index(or label) のシーンへ飛ぶ\r\n   * replaceSceneとの違いはapp.replaceSceneではなく、app.pushSceneを実行する点\r\n   */\r\n  gotoScene(label, args) {\r\n    var index = (typeof label == 'string') ? this.labelToIndex(label) : label||0;\r\n    if (!this.scenes[index]) {\r\n      console.error(format.call('phina.js error: `{0}` に対応するシーンがありません.', label));\r\n    }\r\n    var scene = this._instantiateScene(this.scenes[index], args);\r\n    this.app.pushScene(scene);\r\n    this.sceneIndex = index;\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * 次のシーンへ飛ぶ\r\n   */\r\n  gotoNext(args) {\r\n    var data = this.scenes[this.sceneIndex];\r\n    var nextIndex = null;\r\n\r\n    // 次のラベルが設定されていた場合\r\n    if (data.nextLabel) {\r\n        nextIndex = this.labelToIndex(data.nextLabel);\r\n    }\r\n    // 次のシーンに遷移\r\n    else if (this.sceneIndex+1 < this.scenes.length) {\r\n        nextIndex = this.sceneIndex+1;\r\n    }\r\n\r\n    if (nextIndex !== null) {\r\n        this.gotoScene(nextIndex, args);\r\n    }\r\n    else {\r\n        this.flare(\"finish\");\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * シーンインデックスを取得\r\n   */\r\n  getCurrentIndex() {\r\n    return this.sceneIndex;\r\n  }\r\n\r\n  /**\r\n   * シーンラベルを取得\r\n   */\r\n  getCurrentLabel() {\r\n    return this.scenes[this.sceneIndex].label;\r\n  }\r\n\r\n  /**\r\n   * ラベルからインデックスに変換\r\n   */\r\n  labelToIndex(label) {\r\n    var data = this.scenes.filter(function(data) {\r\n      return data.label == label;\r\n    })[0];\r\n\r\n    return this.scenes.indexOf(data);\r\n  }\r\n\r\n  /**\r\n   * インデックスからラベルに変換\r\n   */\r\n  indexToLabel(index) {\r\n    return this.scenes[index].label;\r\n  }\r\n\r\n  onnext(e) {\r\n    var nextLabel = e.prevScene.nextLabel;\r\n    var nextArguments = e.prevScene.nextArguments;\r\n    if (nextLabel) {\r\n      this.gotoScene(nextLabel, nextArguments);\r\n    }\r\n    else {\r\n      this.gotoNext(nextArguments);\r\n    }\r\n  }\r\n\r\n}\n\n/**\r\n * @class phina.game.LoadingScene\r\n * @extends phina.display.DisplayScene\r\n */\r\nclass LoadingScene extends DisplayScene {\r\n\r\n  /**\r\n   * @constructor\r\n   */\r\n  constructor(options) {\r\n    options = $safe.call({}, options, LoadingScene.defaults);\r\n    // options = ({}).$safe(options, phina.game.LoadingScene.defaults);\r\n    super(options);\r\n\r\n    this.gauge = new Gauge({\r\n      value: 0,\r\n      width: this.width,\r\n      height: 12,\r\n      fill: '#aaa',\r\n      stroke: false,\r\n      gaugeColor: 'hsla(200, 100%, 80%, 0.8)',\r\n      padding: 0,\r\n    }).addChildTo(this)\r\n      .setPosition(\r\n        this.gridX.center(),\r\n        0,\r\n      )\r\n      .setOrigin(\r\n        0.5, \r\n        0\r\n      );\r\n    // this.fromJSON({\r\n    //   children: {\r\n    //     gauge: {\r\n    //       className: 'phina.ui.Gauge',\r\n    //       arguments: {\r\n    //         value: 0,\r\n    //         width: this.width,\r\n    //         height: 12,\r\n    //         fill: '#aaa',\r\n    //         stroke: false,\r\n    //         gaugeColor: 'hsla(200, 100%, 80%, 0.8)',\r\n    //         padding: 0,\r\n    //       },\r\n    //       x: this.gridX.center(),\r\n    //       y: 0,\r\n    //       originY: 0,\r\n    //     }\r\n    //   }\r\n    // });\r\n\r\n    var loader = new AssetLoader();\r\n\r\n    if (options.lie) {\r\n      this.gauge.animationTime = 10*1000;\r\n      this.gauge.value = 90;\r\n\r\n      loader.onload = function() {\r\n        this.gauge.animationTime = 0;\r\n        this.gauge.value = 100;\r\n      }.bind(this);\r\n    }\r\n    else {\r\n      this.gauge.animationTime = 100;\r\n      loader.onprogress = function(e) {\r\n        this.gauge.value = e.progress * 100;\r\n      }.bind(this);\r\n    }\r\n\r\n    this.gauge.onfull = function() {\r\n      if (options.exitType === 'auto') {\r\n        this.app.popScene();\r\n      }\r\n      this.flare('loaded');\r\n    }.bind(this);\r\n\r\n    loader.load(options.assets);\r\n  }\r\n\r\n}\r\n\r\nLoadingScene.defaults = {\r\n  exitType: 'auto',\r\n  lie: false,\r\n};\n\n/**\r\n * @class phina.game.SplashScene\r\n * @extends phina.display.DisplayScene\r\n */\r\nclass SplashScene extends DisplayScene {\r\n\r\n  constructor(options) {\r\n    var defaults = SplashScene.defaults;\r\n    super(options);\r\n\r\n    var texture = new Texture();\r\n    texture.load(defaults.imageURL).then(function() {\r\n      this._init();\r\n    }.bind(this));\r\n    this.texture = texture;\r\n  }\r\n\r\n  _init() {\r\n    this.sprite = new Sprite(this.texture).addChildTo(this);\r\n\r\n    this.sprite.setPosition(this.gridX.center(), this.gridY.center());\r\n    this.sprite.alpha = 0;\r\n\r\n    this.sprite.tweener\r\n      .clear()\r\n      .to({alpha:1}, 500, 'easeOutCubic')\r\n      .wait(1000)\r\n      .to({alpha:0}, 500, 'easeOutCubic')\r\n      .wait(250)\r\n      .call(function() {\r\n        this.exit();\r\n      }, this)\r\n      ;\r\n  }\r\n\r\n}\r\n\r\nSplashScene.defaults = {\r\n  imageURL: 'http://cdn.rawgit.com/phi-jp/phina.js/develop/logo.png',\r\n};\n\n/**\r\n * @class phina.game.TitleScene\r\n * @extends phina.display.DisplayScene\r\n */\r\nclass TitleScene extends DisplayScene {\r\n\r\n  /**\r\n   * @constructor\r\n   */\r\n  constructor(params) {\r\n    params = $safe.call({}, params, TitleScene.defaults);\r\n    // params = ({}).$safe(params, phina.game.TitleScene.defaults);\r\n    super(params);\r\n\r\n    this.backgroundColor = params.backgroundColor;\r\n\r\n    this.fromJSON({\r\n      children: {\r\n        titleLabel: {\r\n          className: Label,\r\n          // className: 'phina.display.Label',\r\n          arguments: {\r\n            text: params.title,\r\n            fill: params.fontColor,\r\n            stroke: false,\r\n            fontSize: 64,\r\n          },\r\n          x: this.gridX.center(),\r\n          y: this.gridY.span(4),\r\n        }\r\n      }\r\n    });\r\n\r\n    if (params.exitType === 'touch') {\r\n      this.fromJSON({\r\n        children: {\r\n          touchLabel: {\r\n            className: Label,\r\n            // className: 'phina.display.Label',\r\n            arguments: {\r\n              text: \"TOUCH START\",\r\n              fill: params.fontColor,\r\n              stroke: false,\r\n              fontSize: 32,\r\n            },\r\n            x: this.gridX.center(),\r\n            y: this.gridY.span(12),\r\n          },\r\n        },\r\n      });\r\n\r\n      this.on('pointend', function() {\r\n        this.exit();\r\n      });\r\n    }\r\n  }\r\n\r\n}\r\n\r\n// static props\r\nTitleScene.defaults = {\r\n  title: 'phina.js games',\r\n  message: '',\r\n\r\n  fontColor: 'white',\r\n  backgroundColor: 'hsl(200, 80%, 64%)',\r\n  backgroundImage: '',\r\n\r\n  exitType: 'touch',\r\n};\n\n/**\r\n * @class phina.game.PauseScene\r\n * @extends phina.display.DisplayScene\r\n */\r\nclass PauseScene extends DisplayScene {\r\n\r\n  /**\r\n   * @constructor\r\n   */\r\n  constructor(params) {\r\n    params = $safe.call({}, params, PauseScene.defaults);\r\n    // params = ({}).$safe(params, phina.game.PauseScene.defaults);\r\n    super(params);\r\n\r\n    this.backgroundColor = params.backgroundColor;\r\n\r\n    this.fromJSON({\r\n      children: {\r\n        text: {\r\n          className: Label,\r\n          // className: 'phina.display.Label',\r\n          arguments: {\r\n            text: 'Pause',\r\n            fill: params.fontColor,\r\n            stroke: null,\r\n            fontSize: 48,\r\n          },\r\n          x: this.gridX.center(),\r\n          y: this.gridY.center(),\r\n        },\r\n      }\r\n    });\r\n\r\n    if (params.exitType === 'touch') {\r\n      this.on('pointend', function() {\r\n        this.exit();\r\n      });\r\n    }\r\n  }\r\n\r\n}\r\n\r\nPauseScene.defaults =  {\r\n  fontColor: 'white',\r\n  backgroundColor: 'hsla(0, 0%, 0%, 0.85)',\r\n\r\n  exitType: 'touch',\r\n};\n\n/**\r\n * @class phina.game.ResultScene\r\n * @extends phina.display.DisplayScene\r\n */\r\nclass ResultScene extends DisplayScene {\r\n\r\n  /**\r\n   * @constructor\r\n   */\r\n  constructor(params) {\r\n    params = $safe.call({}, params, ResultScene.defaults);\r\n    // params = ({}).$safe(params, phina.game.ResultScene.defaults);\r\n    super(params);\r\n\r\n    var message = format.call(params.message, params);\r\n    // var message = params.message.format(params);\r\n\r\n    this.backgroundColor = params.backgroundColor;\r\n\r\n    this.fromJSON({\r\n      children: {\r\n        scoreText: {\r\n          className: Label,\r\n          // className: 'phina.display.Label',\r\n          arguments: {\r\n            text: 'score',\r\n            fill: params.fontColor,\r\n            stroke: null,\r\n            fontSize: 48,\r\n          },\r\n          x: this.gridX.span(8),\r\n          y: this.gridY.span(4),\r\n        },\r\n        scoreLabel: {\r\n          className: Label,\r\n          // className: 'phina.display.Label',\r\n          arguments: {\r\n            text: params.score+'',\r\n            fill: params.fontColor,\r\n            stroke: null,\r\n            fontSize: 72,\r\n          },\r\n          x: this.gridX.span(8),\r\n          y: this.gridY.span(6),\r\n        },\r\n\r\n        messageLabel: {\r\n          className: Label,\r\n          // className: 'phina.display.Label',\r\n          arguments: {\r\n            text: message,\r\n            fill: params.fontColor,\r\n            stroke: null,\r\n            fontSize: 32,\r\n          },\r\n          x: this.gridX.center(),\r\n          y: this.gridY.span(9),\r\n        },\r\n\r\n        shareButton: {\r\n          className: Button,\r\n          // className: 'phina.ui.Button',\r\n          arguments: [{\r\n            text: '★',\r\n            width: 128,\r\n            height: 128,\r\n            fontColor: params.fontColor,\r\n            fontSize: 50,\r\n            cornerRadius: 64,\r\n            fill: 'rgba(240, 240, 240, 0.5)',\r\n            // stroke: '#aaa',\r\n            // strokeWidth: 2,\r\n          }],\r\n          x: this.gridX.center(-3),\r\n          y: this.gridY.span(12),\r\n        },\r\n        playButton: {\r\n          className: Button,\r\n          // className: 'phina.ui.Button',\r\n          arguments: [{\r\n            text: '▶',\r\n            width: 128,\r\n            height: 128,\r\n            fontColor: params.fontColor,\r\n            fontSize: 50,\r\n            cornerRadius: 64,\r\n            fill: 'rgba(240, 240, 240, 0.5)',\r\n            // stroke: '#aaa',\r\n            // strokeWidth: 2,\r\n          }],\r\n          x: this.gridX.center(3),\r\n          y: this.gridY.span(12),\r\n\r\n          interactive: true,\r\n          onpush: function() {\r\n            this.exit();\r\n          }.bind(this),\r\n        },\r\n      }\r\n    });\r\n\r\n    if (params.exitType === 'touch') {\r\n      this.on('pointend', function() {\r\n        this.exit();\r\n      });\r\n    }\r\n\r\n    this.shareButton.onclick = function() {\r\n      var text = format.call('Score: {0}\\n{1}', params.score, message);\r\n      // var text = 'Score: {0}\\n{1}'.format(params.score, message);\r\n      var url = Twitter.createURL({\r\n        text: text,\r\n        hashtags: params.hashtags,\r\n        url: params.url,\r\n      });\r\n      window.open(url, 'share window', 'width=480, height=320');\r\n    };\r\n  }\r\n\r\n}\r\n\r\nResultScene.defaults = {\r\n  score: 16,\r\n\r\n  message: 'this is phina.js project.',\r\n  hashtags: 'phina_js,game,javascript',\r\n  url: phina$1.global.location && phina$1.global.location.href,\r\n\r\n  fontColor: 'white',\r\n  backgroundColor: 'hsl(200, 80%, 64%)',\r\n  backgroundImage: '',\r\n};\n\n/**\r\n * デフォルトのain class\r\n */\r\nclass DefaultMainScene extends DisplayScene {\r\n  constructor(options) {\r\n    super(options);\r\n    console.log('This is MainScene');\r\n  }\r\n}\r\n/**\r\n * クラスがphina.defineによって定義されているかどうかを返します\r\n * \r\n * @param {string} className クラス名。phina.game[className]で定義されているかも調べる\r\n * @return {string|boolean} 定義されてればそのままクラス名文字列を返す\r\n */\r\nfunction isGameClassDefined(className) {\r\n  if (\r\n    typeof phina$1.using(className) === 'function'\r\n    || typeof phina$1.using('phina.game.' + className) === 'function'\r\n  ) {\r\n    return className\r\n  }\r\n  return false;\r\n}\r\n\r\n/**\r\n * @class phina.game.GameApp\r\n * @extends phina.display.CanvasApp\r\n */\r\nclass GameApp extends CanvasApp {\r\n\r\n  constructor(options) {\r\n    options = $safe.call(options || {}, {\r\n    // options = (options || {}).$safe({\r\n      startLabel: 'title',\r\n    });\r\n    super(options);\r\n\r\n    var startLabel = options.startLabel || 'title';\r\n\r\n    var scenes = options.scenes || [\r\n      {\r\n        className: isGameClassDefined(\"SplashScene\") || SplashScene,\r\n        label: 'splash',\r\n        nextLabel: 'title',\r\n      },\r\n      {\r\n        className: isGameClassDefined(\"TitleScene\") || TitleScene,\r\n        label: 'title',\r\n        nextLabel: 'main',\r\n      },\r\n      {\r\n        className: isGameClassDefined(\"MainScene\") || DefaultMainScene,\r\n        label: 'main',\r\n        nextLabel: 'result',\r\n      },\r\n      {\r\n        className: isGameClassDefined(\"ResultScene\") || ResultScene,\r\n        label: 'result',\r\n        nextLabel: 'title',\r\n      },\r\n    ];\r\n\r\n    scenes = each.call(scenes, function(s) {\r\n      s.arguments = s.arguments || options;\r\n    });\r\n\r\n    var scene = new ManagerScene({\r\n      startLabel: startLabel,\r\n      scenes: scenes,\r\n    });\r\n\r\n    if (options.assets) {\r\n      // ローディング：esm版では独自のLoadingSceneはオプションで渡せるようにする\r\n\r\n      var loadingOptions = $extend.call({}, options, {\r\n      // var loadingOptions = ({}).$extend(options, {\r\n        exitType: '',\r\n      });\r\n      // グローバル定義のLoadingSceneを探す（従来）\r\n      // -> なければオプションをチェック \r\n      // -> これもなければデフォルトのLoadingSceneを使う\r\n      var definedLoadingClass = phina$1.using(\"LoadingScene\") || phina$1.using(\"phina.game.LoadingScene\");\r\n      var loading = (typeof definedLoadingClass === 'function') \r\n        ? definedLoadingClass(loadingOptions)\r\n        : (options.loadingScene != null)\r\n          ? new options.loadingScene(loadingOptions) \r\n          : new LoadingScene(loadingOptions)\r\n      ;\r\n      this.replaceScene(loading);\r\n\r\n      loading.onloaded = function() {\r\n        this.replaceScene(scene);\r\n        if (options.debug) {\r\n          this._enableDebugger();\r\n        }\r\n      }.bind(this);\r\n    }\r\n    else {\r\n      this.replaceScene(scene);\r\n      if (options.debug) {\r\n        this._enableDebugger();\r\n      }\r\n    }\r\n\r\n    // 自動でポーズする\r\n    // esm版では独自のポーズシーンはオプションで渡す\r\n    // 引数が渡せないのは元から\r\n    if (options.autoPause) {\r\n      this.on('blur', function() {\r\n        var definedPauseScene = phina$1.using(\"phina.game.PauseScene\");\r\n        var pauseScene = (typeof definedPauseScene === 'function') \r\n          ? definedPauseScene() \r\n          : (options.pauseScene) \r\n            ? new options.pauseScene() \r\n            : new PauseScene();\r\n        this.pushScene(pauseScene);\r\n      });\r\n    }\r\n  }\r\n\r\n  _enableDebugger() {\r\n    if (this.gui) return ;\r\n\r\n    this.enableDatGUI(function(gui) {\r\n      var f = gui.addFolder('scenes');\r\n      var funcs = {};\r\n      this.rootScene.scenes.forEach(function(scene) {\r\n      // this.rootScene.scenes.each(function(scene) {\r\n        funcs[scene.label] = function() {\r\n          this.rootScene.replaceScene(scene.label);\r\n          console.log(this._scenes.length);\r\n        }.bind(this);\r\n        return scene;\r\n      }, this);\r\n\r\n      forIn.call(funcs, function(key, value) {\r\n      // funcs.forIn(function(key, value) {\r\n        f.add(funcs, key);\r\n      });\r\n      f.open();\r\n\r\n      this.gui = gui;\r\n    }.bind(this));\r\n  }\r\n\r\n}\n\n/**\r\n * @class phina.game.CountScene\r\n * @extends phina.display.DisplayScene\r\n */\r\nclass CountScene extends DisplayScene {\r\n\r\n  /**\r\n   * @constructor\r\n   */\r\n  constructor(options) {\r\n    super(options);\r\n\r\n    options = $safe.call(options || {}, CountScene.defaults);\r\n    // options = (options || {}).$safe(phina.game.CountScene.defaults);\r\n\r\n    this.backgroundColor = options.backgroundColor;\r\n\r\n    this.fromJSON({\r\n      children: {\r\n        label: {\r\n          className: Label,\r\n          // className: 'phina.display.Label',\r\n          arguments: {\r\n            fill: options.fontColor,\r\n            fontSize: options.fontSize,\r\n            stroke: false,\r\n          },\r\n          x: this.gridX.center(),\r\n          y: this.gridY.center(),\r\n        },\r\n      }\r\n    });\r\n\r\n    if (options.count instanceof Array) {\r\n      this.countList = clone.call(options.count).reverse();\r\n      // this.countList = options.count.clone().reverse();\r\n    }\r\n    else {\r\n      this.countList = range.call([], 1, options.count+1);\r\n      // this.countList = Array.range(1, options.count+1);\r\n    }\r\n    this.counter = this.countList.length;\r\n    this.exitType = options.exitType;\r\n\r\n    this._updateCount();\r\n  }\r\n\r\n  _updateCount() {\r\n    var endFlag = this.counter <= 0;\r\n    var index = --this.counter;\r\n\r\n    this.label.text = this.countList[index];\r\n\r\n    this.label.scale.set(1, 1);\r\n    this.label.tweener\r\n      .clear()\r\n      .to({\r\n        scaleX: 1,\r\n        scaleY: 1,\r\n        alpha: 1,\r\n      }, 250)\r\n      .wait(500)\r\n      .to({\r\n        scaleX: 1.5,\r\n        scaleY: 1.5,\r\n        alpha: 0.0\r\n      }, 250)\r\n      .call(function() {\r\n        if (this.counter <= 0) {\r\n          this.flare('finish');\r\n          if (this.exitType === 'auto') {\r\n            this.app.popScene();\r\n          }\r\n        }\r\n        else {\r\n          this._updateCount();\r\n        }\r\n      }, this);\r\n  }\r\n\r\n}\r\n\r\nCountScene.defaults = {\r\n  count: 3,\r\n\r\n  width: 640,\r\n  height: 960,\r\n\r\n  fontColor: 'white',\r\n  fontSize: 164,\r\n  backgroundColor: 'rgba(50, 50, 50, 1)',\r\n\r\n  exitType: 'auto',\r\n};\n\n\n\n\n//# sourceURL=webpack://phina_esm_test/./node_modules/phina.js/build/phina.esm.js?");

/***/ }),

/***/ "./src/index.js":
/*!**********************!*
  !*** ./src/index.js ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var phina_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! phina.js */ \"./node_modules/phina.js/build/phina.esm.js\");\n/* harmony import */ var _src_scenes_MainScene__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../../../src/scenes/MainScene */ \"./src/scenes/MainScene.js\");\n\n\n\n/* main */\nphina_js__WEBPACK_IMPORTED_MODULE_0__.phina.main(()=> {\n  const app = new phina_js__WEBPACK_IMPORTED_MODULE_0__.CanvasApp();\n  const mainScene = new MainScene();\n  app.replaceScene(mainScene);\n});\n\n\n//# sourceURL=webpack://phina_esm_test/./src/index.js?");

/***/ }),

/***/ "./src/scenes/MainScene.js":
/*!*********************************!*
  !*** ./src/scenes/MainScene.js ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"MainScene\": () => /* binding */ MainScene\n/* harmony export */ });\n/* harmony import */ var phina_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! phina.js */ \"./node_modules/phina.js/build/phina.esm.js\");\n\n\n/* scene定義 */\nclass MainScene extends phina_js__WEBPACK_IMPORTED_MODULE_0__.DisplayScene {\n  constructor(options) {\n    super(options);\n    this.player = new phina_js__WEBPACK_IMPORTED_MODULE_0__.TriangleShape()\n      .addChildTo(this)\n      .setPosition(this.width/2, this.height/2)\n  }\n\n  update(app) {\n    if (app.pointer.getPointingStart()) {\n      this.player.setPosition(app.pointer.x, app.pointer.y)\n    }\n  }\n}\n\n\n//# sourceURL=webpack://phina_esm_test/./src/scenes/MainScene.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		if(__webpack_module_cache__[moduleId]) {
/******/ 			return __webpack_module_cache__[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/global */
/******/ 	(() => {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop)
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	// startup
/******/ 	// Load entry module
/******/ 	__webpack_require__("./src/index.js");
/******/ 	// This entry module used 'exports' so it can't be inlined
/******/ })()
;